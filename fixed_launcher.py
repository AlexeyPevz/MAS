#!/usr/bin/env python3
"""
Fixed MAS System Launcher
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SimpleGroupChatManager –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""
import os
import sys
import logging
from typing import Dict, Any
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)


def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"""
    required_keys = ['OPENROUTER_API_KEY']
    
    missing = []
    for key in required_keys:
        if not os.getenv(key):
            missing.append(key)
    
    if missing:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {missing}")
        logger.info("üí° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ demo —Ä–µ–∂–∏–º–µ")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    
    logger.info("‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True


def create_simple_agents() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    class SimpleAgent:
        def __init__(self, name: str, role: str):
            self.name = name
            self.role = role
            self.system_message = f"–í—ã - {role} –∞–≥–µ–Ω—Ç. –í–∞—à–∞ –∑–∞–¥–∞—á–∞: {self._get_role_description(role)}"
        
        def _get_role_description(self, role: str) -> str:
            descriptions = {
                "Meta": "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                "Coordination": "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏", 
                "PromptBuilder": "—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤",
                "ModelSelector": "–≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞—á",
                "AgentBuilder": "—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º",
                "InstanceFactory": "—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö MAS –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤",
                "Researcher": "–ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "FactChecker": "–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–∞–∫—Ç–æ–≤", 
                "MultiTool": "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏",
                "WfBuilder": "—Å–æ–∑–¥–∞–Ω–∏–µ n8n workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
                "WebAppBuilder": "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT-Pilot",
                "Communicator": "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
            }
            return descriptions.get(role, "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        def generate_reply(self, messages=None, sender=None, config=None):
            return f"[{self.role}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {self.name}"
    
    agents = {}
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö 12 –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ config/agents.yaml
    agent_configs = [
        ("meta", "Meta"),
        ("coordination", "Coordination"), 
        ("prompt_builder", "PromptBuilder"),
        ("model_selector", "ModelSelector"),
        ("agent_builder", "AgentBuilder"),
        ("instance_factory", "InstanceFactory"),
        ("researcher", "Researcher"),
        ("fact_checker", "FactChecker"),
        ("multitool", "MultiTool"),
        ("wf_builder", "WfBuilder"),
        ("webapp_builder", "WebAppBuilder"),
        ("communicator", "Communicator")
    ]
    
    for name, role in agent_configs:
        agents[name] = SimpleAgent(name, role)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {name} ({role})")
    
    return agents


def setup_routing() -> Dict[str, list]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    return {
        "communicator": ["meta"],
        "meta": ["coordination", "researcher"],
        "coordination": ["prompt_builder", "wf_builder", "webapp_builder"],
        "researcher": ["fact_checker"],
        "fact_checker": ["meta"],
        "prompt_builder": ["model_selector"],
        "model_selector": ["agent_builder"],
        "agent_builder": ["instance_factory"],
        "multitool": ["wf_builder", "webapp_builder"],
        "wf_builder": ["multitool"],
        "webapp_builder": ["multitool"],
        "instance_factory": ["coordination"]
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("\nüöÄ MAS System - Fixed Launcher")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
        agents = create_simple_agents()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
        routing = setup_routing()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à wrapper manager
        from tools.groupchat_wrapper import SimpleGroupChatManager
        
        # –°–æ–∑–¥–∞–µ–º manager
        manager = SimpleGroupChatManager(agents, routing)
        
        print(f"\n‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print(f"üìä –ê–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
        print(f"üîÄ –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routing)}")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            print("\n" + "="*50)
            print("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MAS")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
            print("4. –í—ã—Ö–æ–¥")
            
            choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                message = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ").strip()
                if message:
                    response = manager.send_user_message(message)
                    print(f"\nüîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {response}")
                    
            elif choice == "2":
                status = manager.get_status()
                print(f"\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
                for key, value in status.items():
                    print(f"  ‚Ä¢ {key}: {value}")
                    
            elif choice == "3":
                print(f"\nü§ñ –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:")
                for name, agent in agents.items():
                    print(f"  ‚Ä¢ {name}: {agent.role}")
                    
            elif choice == "4":
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
                
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("pip install autogen openai python-dotenv")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()