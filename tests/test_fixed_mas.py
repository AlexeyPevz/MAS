#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π MAS —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.insert(0, str(Path(__file__).parent))

def test_agents_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from fixed_launcher import create_simple_agents
        agents = create_simple_agents()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –µ—Å—Ç—å
        expected_agents = [
            "meta", "coordination", "prompt_builder", "model_selector",
            "agent_builder", "instance_factory", "researcher", "fact_checker", 
            "multitool", "wf_builder", "webapp_builder", "communicator"
        ]
        
        missing = set(expected_agents) - set(agents.keys())
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–≥–µ–Ω—Ç—ã: {missing}")
            return False
        
        print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_groupchat_wrapper():
    """–¢–µ—Å—Ç GroupChat wrapper"""
    print("\nüß™ –¢–µ—Å—Ç GroupChat wrapper...")
    
    try:
        from fixed_launcher import create_simple_agents, setup_routing
        from tools.groupchat_wrapper import SimpleGroupChatManager
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
        agents = create_simple_agents()
        routing = setup_routing()
        
        # –°–æ–∑–¥–∞–µ–º manager
        manager = SimpleGroupChatManager(agents, routing)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        response = manager.send_user_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print(f"üì® –û—Ç–≤–µ—Ç: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = manager.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
        
        print("‚úÖ GroupChat wrapper —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GroupChat wrapper: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_base_agent_hash():
    """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è BaseAgent"""
    print("\nüß™ –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è BaseAgent...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ hash
        class MockAgent:
            def __init__(self, name):
                self.name = name
            
            def __hash__(self):
                return hash(self.name)
            
            def __eq__(self, other):
                if not isinstance(other, MockAgent):
                    return False
                return self.name == other.name
        
        agent1 = MockAgent("test_agent")
        agent2 = MockAgent("test_agent")
        agent3 = MockAgent("other_agent")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert hash(agent1) == hash(agent2), "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π hash"
        assert hash(agent1) != hash(agent3), "–†–∞–∑–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–π hash"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        assert agent1 == agent2, "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã"
        assert agent1 != agent3, "–†–∞–∑–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ dict
        agent_dict = {agent1: "value1", agent3: "value2"}
        assert len(agent_dict) == 2, "–°–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 —ç–ª–µ–º–µ–Ω—Ç–∞"
        
        print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π MAS —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    tests = [
        test_agents_creation,
        test_groupchat_wrapper, 
        test_base_agent_hash
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print("-" * 40)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)