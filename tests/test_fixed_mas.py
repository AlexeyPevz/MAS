#!/usr/bin/env python3
"""–¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π MAS —Å–∏—Å—Ç–µ–º—ã"""

import traceback
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ sys.path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_agents_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from agents.core_agents import create_agents
        from config.config_loader import AgentsConfig
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cfg = AgentsConfig.from_yaml("config/agents.yaml")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        agents = create_agents(cfg)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
        for name, agent in agents.items():
            print(f"  - {name}: {type(agent).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_smart_groupchat():
    """–¢–µ—Å—Ç Smart GroupChat Manager"""
    print("\nüß™ –¢–µ—Å—Ç Smart GroupChat Manager...")
    
    try:
        from tools.smart_groupchat import SmartGroupChatManager
        from agents.core_agents import create_agents
        from config.config_loader import AgentsConfig
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        cfg = AgentsConfig.from_yaml("config/agents.yaml")
        agents = create_agents(cfg)
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        routing = {
            "meta": ["coordination"],
            "coordination": []
        }
        
        # –°–æ–∑–¥–∞–µ–º manager
        manager = SmartGroupChatManager(agents, routing)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        response = manager.process_user_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print(f"üì® –û—Ç–≤–µ—Ç: {response}")
        
        print("‚úÖ Smart GroupChat Manager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Smart GroupChat Manager: {e}")
        traceback.print_exc()
        return False

def test_base_agent_hash():
    """–¢–µ—Å—Ç —Ö—ç—à–∏—Ä—É–µ–º–æ—Å—Ç–∏ BaseAgent"""
    print("\nüß™ –¢–µ—Å—Ç —Ö—ç—à–∏—Ä—É–µ–º–æ—Å—Ç–∏ BaseAgent...")
    
    try:
        from agents.base import BaseAgent
        
        agent1 = BaseAgent("test1", {})
        agent2 = BaseAgent("test2", {})
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à
        hash1 = hash(agent1)
        hash2 = hash(agent2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        assert agent1 == agent1
        assert agent1 != agent2
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ set
        agent_set = {agent1, agent2}
        assert len(agent_set) == 2
        
        print("‚úÖ BaseAgent —Ö—ç—à–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è BaseAgent: {e}")
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π MAS —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    tests = [
        test_agents_creation,
        test_smart_groupchat, 
        test_base_agent_hash
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test.__name__}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)