"""Callback functions for the Rootâ€‘MAS platform.

Callbacks are used to intercept events during the execution of the MAS and
perform side effects such as sending messages to external services.  This
module provides a stub implementation of the `outgoing_to_telegram` callback
used by the Communicator agent.
"""

import logging
from typing import Any, Dict
import os
from telegram import Bot

logger = logging.getLogger(__name__)


def outgoing_to_telegram(message: Dict[str, Any]) -> None:
    """Forward assistant messages to the Telegram bot.

    This callback is triggered whenever the MAS produces an assistant message.
    It should extract the textual content, optionally convert it to speech via
    the SpeechKitClient and send it through the Communicator's bot.  In this
    skeleton implementation the function simply logs the event.

    Args:
        message: The message object generated by the MAS.  It is expected to
            contain at least a `content` field with the assistant's reply.
    """
    content = message.get("content", "")
    logger.info("Outgoing message to Telegram: %s", content)

    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not token or not chat_id:
        logger.error("Telegram credentials are not configured")
        return

    try:
        Bot(token=token).send_message(chat_id=chat_id, text=content)
    except Exception as exc:  # pragma: no cover
        logger.error("Failed to send Telegram message: %s", exc)
