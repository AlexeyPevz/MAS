#!/usr/bin/env python3
"""
Production MAS System Launcher
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π launcher –¥–ª—è production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""
import os
import sys
import asyncio
import logging
from pathlib import Path
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º .env –≤—Ä—É—á–Ω—É—é
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/mas_production.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


def validate_environment() -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'OPENROUTER_API_KEY',
    ]
    
    optional_vars = [
        'YANDEX_GPT_API_KEY',
        'YANDEX_FOLDER_ID', 
        'TELEGRAM_BOT_TOKEN',
        'N8N_API_TOKEN',
        'POSTGRES_HOST',
        'REDIS_HOST'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    missing_required = []
    for var in required_vars:
        if not os.getenv(var):
            missing_required.append(var)
    
    if missing_required:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_required}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    missing_optional = []
    for var in optional_vars:
        if not os.getenv(var):
            missing_optional.append(var)
    
    if missing_optional:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_optional}")
        logger.info("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    from tools.llm_config import validate_api_keys, get_available_models
    
    api_status = validate_api_keys()
    logger.info("üîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:")
    for provider, available in api_status.items():
        status = "‚úÖ" if available else "‚ùå"
        logger.info(f"  {status} {provider}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    models = get_available_models()
    logger.info(f"ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    logger.info("üîó –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:")
    
    # GPT-Pilot
    gpt_pilot_url = os.getenv('GPT_PILOT_URL', 'http://localhost:8000')
    gpt_pilot_key = os.getenv('GPT_PILOT_API_KEY')
    status_pilot = "üîë" if gpt_pilot_key else "üîì"
    logger.info(f"  üöÄ GPT-Pilot: {gpt_pilot_url} {status_pilot}")
    
    # AutoGen Studio  
    studio_url = os.getenv('AUTOGEN_STUDIO_URL', 'http://localhost:8081')
    studio_key = os.getenv('AUTOGEN_STUDIO_API_KEY')
    status_studio = "üîë" if studio_key else "üîì"
    logger.info(f"  üé¨ AutoGen Studio: {studio_url} {status_studio}")
    
    return True


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        'logs',
        'data',
        'backups',
        'temp'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")


async def initialize_agents() -> Dict[str, Any]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from pathlib import Path
        from agents.core_agents import create_agents
        from config.config_loader import AgentsConfig
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
        config_path = Path('config/agents.yaml')
        config = AgentsConfig.from_yaml(config_path)
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        agents = create_agents(config)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤:")
        for name, agent in agents.items():
            logger.info(f"  ‚Ä¢ {name}: {type(agent).__name__}")
        
        return agents
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise


def setup_routing() -> Dict[str, list]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return {
        "communicator": ["meta"],
        "meta": ["coordination", "researcher"],
        "coordination": ["prompt_builder", "workflow_builder", "webapp_builder"],
        "researcher": ["fact_checker"],
        "fact_checker": ["meta"],
        "prompt_builder": ["model_selector"],
        "model_selector": ["agent_builder"],
        "agent_builder": ["instance_factory"],
        "multi_tool": ["workflow_builder", "webapp_builder"],
        "workflow_builder": ["multi_tool"],
        "webapp_builder": ["multi_tool"],
        "instance_factory": ["coordination"]
    }


async def start_monitoring():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        from tools.observability import start_metrics_server
        start_metrics_server()
        logger.info("üìä Prometheus metrics –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É 9000")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")


async def start_telegram_bot(manager):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        from tools.modern_telegram_bot import ModernTelegramBot
        
        # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MAS
        async def mas_callback(message: str) -> str:
            try:
                response = await manager.process_user_message(message)
                return response or "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ MAS –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                return f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:200]}..."
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = ModernTelegramBot(
            token=os.getenv('TELEGRAM_BOT_TOKEN'),
            mas_callback=mas_callback,
            enable_voice=False
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        bot_task = asyncio.create_task(bot.run())
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MAS —Å–∏—Å—Ç–µ–º–µ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        manager._telegram_bot = bot
        manager._telegram_task = bot_task
        
    except ImportError:
        logger.warning("‚ö†Ô∏è python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")


async def start_web_interface(manager):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")


class ProductionMASSystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å production MAS —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.agents = None
        self.manager = None
        self.routing = None
        self.running = False
        self.monitoring_enabled = False
        self._telegram_bot = None
        self._telegram_task = None
        self._shutdown_event = asyncio.Event()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Production MAS System...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            await self._initialize_system()
            
            # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._start_components()
            
            logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self._shutdown_event.wait()
            
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
        finally:
            await self._cleanup()

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
            if self._telegram_bot:
                await self._telegram_bot.shutdown()
            
            if self._telegram_task:
                self._telegram_task.cancel()
                try:
                    await self._telegram_task
                except asyncio.CancelledError:
                    pass
                    
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    def shutdown(self):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç graceful shutdown"""
        self._shutdown_event.set()

    async def _initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not validate_environment():
            raise RuntimeError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        create_directories()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        self.agents = await initialize_agents()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        self.routing = setup_routing()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        from tools.smart_groupchat import SmartGroupChatManager
        self.manager = SmartGroupChatManager(self.agents, self.routing)
        
        self.running = True
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def _start_components(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await start_monitoring()
        
        # –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        await start_telegram_bot(self.manager)
        await start_web_interface(self.manager)
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = ProductionMASSystem()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler():
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        system.shutdown()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    import signal
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, lambda s, f: signal_handler())
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, lambda s, f: signal_handler())
    
    await system.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)