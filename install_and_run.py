#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ Root-MAS System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import sys
import subprocess
import pkg_resources
from pathlib import Path


def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë              Root-MAS Auto-Installer & Launcher              ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version_info = sys.version_info
    version_str = f"{version_info.major}.{version_info.minor}.{version_info.micro}"
    
    if version_info < (3, 9):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ, —É –≤–∞—Å {version_str}")
        sys.exit(1)
    elif version_info >= (3, 14):
        print(f"‚ùå AutoGen –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python 3.14+, —É –≤–∞—Å {version_str}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.9-3.13")
        sys.exit(1)
    elif version_info.major == 3 and version_info.minor == 13:
        print(f"‚ö†Ô∏è  Python {version_str} - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ AutoGen")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python 3.9-3.12 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    else:
        print(f"‚úÖ Python {version_str} - OK")


def get_installed_version(package_name):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞"""
    try:
        return pkg_resources.get_distribution(package_name).version
    except pkg_resources.DistributionNotFound:
        return None


def check_and_install_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ AutoGen
    critical_packages = {
        "autogen-agentchat": ">=0.5.1",
        "autogen-ext": ">=0.5.5",
        "autogen-core": None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Å—Ç–∞—Ä—ã–π pyautogen
    old_autogen = get_installed_version("pyautogen")
    if old_autogen:
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π pyautogen {old_autogen}")
        print("üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "uninstall", "-y", "pyautogen"])
            print("‚úÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except subprocess.CalledProcessError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
    packages_to_install = []
    
    for package, min_version in critical_packages.items():
        current_version = get_installed_version(package)
        
        if current_version is None:
            print(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            if package == "autogen-ext":
                packages_to_install.append("autogen-ext[openai]>=0.5.5")
            else:
                packages_to_install.append(package + (min_version or ""))
        elif min_version and not pkg_resources.parse_version(current_version) >= pkg_resources.parse_version(min_version.strip(">=")):
            print(f"‚ö†Ô∏è  {package} {current_version} —É—Å—Ç–∞—Ä–µ–ª (–Ω—É–∂–µ–Ω {min_version})")
            if package == "autogen-ext":
                packages_to_install.append("autogen-ext[openai]>=0.5.5")
            else:
                packages_to_install.append(package + min_version)
        else:
            print(f"‚úÖ {package} {current_version} - OK")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
    if packages_to_install:
        print(f"\nüì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: {', '.join(packages_to_install)}")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install"] + packages_to_install)
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
    print("\nüìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")
    requirements_file = Path(__file__).parent / "requirements.txt"
    
    if requirements_file.exists():
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", str(requirements_file)])
            print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            sys.exit(1)
    else:
        print("‚ö†Ô∏è  requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")


def verify_autogen_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AutoGen"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AutoGen...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        import autogen_agentchat
        print("‚úÖ autogen_agentchat –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import autogen_ext
        print("‚úÖ autogen_ext –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import autogen_core
        print("‚úÖ autogen_core –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        from autogen_agentchat.agents import AssistantAgent
        from autogen_ext.models.openai import OpenAIChatCompletionClient
        from autogen_core import CancellationToken
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AutoGen: {e}")
        return False


def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        "OPENROUTER_API_KEY": "API –∫–ª—é—á –¥–ª—è OpenRouter (LLM –º–æ–¥–µ–ª–∏)",
    }
    
    optional_vars = {
        "TELEGRAM_BOT_TOKEN": "–¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞",
        "YANDEX_API_KEY": "API –∫–ª—é—á –¥–ª—è Yandex SpeechKit",
    }
    
    missing_required = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, description in required_vars.items():
        if os.getenv(var):
            print(f"‚úÖ {var} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ùå {var} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
            missing_required.append(var)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, description in optional_vars.items():
        if os.getenv(var):
            print(f"‚úÖ {var} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ö†Ô∏è  {var} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
    
    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_required)}")
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   Linux/Mac: export OPENROUTER_API_KEY='your-key-here'")
        print("   Windows:   set OPENROUTER_API_KEY=your-key-here")
        print("\n   –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    return True


def create_env_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    env_file = Path(__file__).parent / ".env"
    env_template = Path(__file__).parent / ".env.template"
    
    if not env_file.exists() and not env_template.exists():
        print("\nüìÑ –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω .env.template...")
        template_content = """# Root-MAS Environment Variables

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# OpenRouter API key –¥–ª—è LLM –º–æ–¥–µ–ª–µ–π
OPENROUTER_API_KEY=your-openrouter-api-key-here

# –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# Telegram Bot Token (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω Telegram –±–æ—Ç)
# TELEGRAM_BOT_TOKEN=your-telegram-bot-token-here

# Yandex SpeechKit API key (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
# YANDEX_API_KEY=your-yandex-api-key-here

# –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: full, api, mas
RUN_MODE=full

# –û–∫—Ä—É–∂–µ–Ω–∏–µ: production, development
ENVIRONMENT=production
"""
        with open(env_template, "w", encoding="utf-8") as f:
            f.write(template_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω {env_template}")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")


def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        from agents.base import BaseAgent
        agent = BaseAgent("test", model="gpt-3.5-turbo", tier="cheap")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SmartGroupChatManager
        from tools.smart_groupchat import SmartGroupChatManager
        manager = SmartGroupChatManager()
        print("‚úÖ SmartGroupChatManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


def launch_system():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Root-MAS System...")
    
    run_system_path = Path(__file__).parent / "run_system.py"
    
    if not run_system_path.exists():
        print("‚ùå –§–∞–π–ª run_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        subprocess.call([sys.executable, str(run_system_path)])
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    check_python_version()
    
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    check_and_install_packages()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É AutoGen
    if not verify_autogen_installation():
        print("\n‚ùå AutoGen —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        print("   2. pip install --upgrade pip")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        sys.exit(1)
    
    # 4. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_env_template()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment_variables():
        print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ API –∫–ª—é—á–µ–π")
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å–µ —Ä–∞–≤–Ω–æ? (y/N): ")
        if response.lower() != 'y':
            print("–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            sys.exit(0)
    
    # 6. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    if not run_quick_test():
        print("\n‚ö†Ô∏è  –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            sys.exit(0)
    
    print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("=" * 60)
    
    # 7. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    launch_system()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)