#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –ª–æ–≥–∏ –∑–∞–±–∏–ª–∏ –≤–µ—Å—å –¥–∏—Å–∫
"""

import os
import shutil
import glob
from pathlib import Path


def emergency_cleanup():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í")
    print("=" * 40)
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏
    log_dirs = [
        "logs",
        "/var/log",
        "/tmp", 
        ".",  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    log_patterns = [
        "*.log",
        "*.log.*",
        "*.out",
        "*.err",
        "system.log*",
        "autogen*.log",
        "telegram*.log",
        "api*.log",
        "debug*.log",
        "error*.log"
    ]
    
    total_removed = 0
    total_size = 0
    
    for log_dir in log_dirs:
        if not os.path.exists(log_dir):
            continue
            
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º {log_dir}...")
        
        for pattern in log_patterns:
            for file_path in glob.glob(os.path.join(log_dir, pattern)):
                try:
                    if os.path.isfile(file_path):
                        file_size = os.path.getsize(file_path)
                        os.remove(file_path)
                        total_removed += 1
                        total_size += file_size
                        print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω: {file_path} ({file_size//1024//1024}MB)")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ {file_path}: {e}")
    
    print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"üìÅ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_removed}")
    print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {total_size//1024//1024}MB")
    
    return total_removed, total_size


def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        statvfs = os.statvfs('.')
        free_space = statvfs.f_frsize * statvfs.f_bavail
        total_space = statvfs.f_frsize * statvfs.f_blocks
        used_space = total_space - free_space
        
        free_gb = free_space // 1024 // 1024 // 1024
        used_gb = used_space // 1024 // 1024 // 1024
        total_gb = total_space // 1024 // 1024 // 1024
        
        usage_percent = (used_space / total_space) * 100
        
        print(f"üíæ –î–∏—Å–∫: {used_gb}GB / {total_gb}GB ({usage_percent:.1f}%)")
        print(f"üÜì –°–≤–æ–±–æ–¥–Ω–æ: {free_gb}GB")
        
        if usage_percent > 90:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 90%!")
            return True
        elif usage_percent > 80:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 80%")
            return False
        else:
            print("‚úÖ –ú–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
        return False


def find_large_log_files(min_size_mb: int = 100):
    """–ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –±–æ–ª—å—à–µ {min_size_mb}MB...")
    
    large_files = []
    
    for root, dirs, files in os.walk("."):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
        
        for file in files:
            if any(pattern in file.lower() for pattern in ['log', 'out', 'err']):
                file_path = os.path.join(root, file)
                try:
                    size = os.path.getsize(file_path)
                    size_mb = size // 1024 // 1024
                    
                    if size_mb >= min_size_mb:
                        large_files.append((file_path, size_mb))
                        print(f"  üìÅ {file_path}: {size_mb}MB")
                        
                except Exception:
                    pass
    
    if large_files:
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(large_files)} –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")
        total_size = sum(size for _, size in large_files)
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size}MB")
        
        answer = input("\n‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤? (y/N): ").strip().lower()
        if answer == 'y':
            for file_path, size_mb in large_files:
                try:
                    os.remove(file_path)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω: {file_path}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print("‚úÖ –ë–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


def setup_log_rotation():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ logrotate"""
    logrotate_config = """
# Root-MAS Log Rotation
/workspace/logs/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    copytruncate
    maxsize 50M
}
"""
    
    try:
        with open("/etc/logrotate.d/rootmas", "w") as f:
            f.write(logrotate_config)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤")
    except PermissionError:
        print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ logrotate")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ root:")
        print(f"echo '{logrotate_config}' > /etc/logrotate.d/rootmas")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –£–¢–ò–õ–ò–¢–ê –û–ß–ò–°–¢–ö–ò –õ–û–ì–û–í Root-MAS")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–∫–∞
    critical = check_disk_space()
    
    if critical:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ò–°–ö–ê!")
        answer = input("‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –ª–æ–≥–æ–≤? (y/N): ").strip().lower()
        if answer == 'y':
            emergency_cleanup()
    else:
        # –ò—â–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        find_large_log_files(min_size_mb=50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏...")
    setup_log_rotation()
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º:")
    print(f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ENVIRONMENT=production –¥–ª—è –º–∏–Ω–∏–º—É–º–∞ –ª–æ–≥–æ–≤")
    print(f"2. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ: python cleanup_logs.py")
    print(f"3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")


if __name__ == "__main__":
    main()