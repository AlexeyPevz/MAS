#!/usr/bin/env python3
"""
Universal Installer for AI Memory System
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å GUI –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
"""

import os
import sys
import json
import subprocess
import platform
import threading
import shutil
import requests
from pathlib import Path
from typing import Optional, Dict, List, Tuple
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import paramiko
from dataclasses import dataclass
import configparser
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
try:
    from error_handler import ErrorHandler, SafeInstaller, safe_execution
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    ErrorHandler = None
    SafeInstaller = None
    def safe_execution(func):
        return func


@dataclass
class InstallConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    install_type: str = "local"  # local –∏–ª–∏ remote
    server_ip: str = ""
    server_user: str = ""
    server_password: str = ""
    install_path: str = ""
    python_version: str = "3.11"
    memory_type: str = "chromadb"  # chromadb, qdrant, postgres
    memory_path: str = "./memory_data"
    memory_size_mb: int = 1024
    tokens: Dict[str, str] = None
    autogen_path: str = ""
    
    def __post_init__(self):
        if self.tokens is None:
            self.tokens = {}


class UniversalInstaller:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å GUI"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AI Memory System - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä")
        self.root.geometry("900x700")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = InstallConfig()
        
        # SSH –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.ssh_client = None
        
        # –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.installation_running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.error_handler = ErrorHandler(self.log) if ErrorHandler else None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ wizard"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(
            header_frame,
            text="AI Memory System Installer",
            font=('Arial', 18, 'bold')
        ).pack(side='left')
        
        ttk.Label(
            header_frame,
            text="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä v1.0",
            font=('Arial', 10),
            foreground='gray'
        ).pack(side='left', padx=20)
        
        # Notebook –¥–ª—è —à–∞–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.create_step1_install_type()
        
        # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.create_step2_connection()
        
        # –®–∞–≥ 3: –ü—É—Ç—å –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.create_step3_components()
        
        # –®–∞–≥ 4: –¢–æ–∫–µ–Ω—ã API
        self.create_step4_tokens()
        
        # –®–∞–≥ 5: –û–±–∑–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        self.create_step5_review()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.create_bottom_panel(main_frame)
        
    def create_step1_install_type(self):
        """–®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="1. –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        center_frame = ttk.Frame(frame)
        center_frame.place(relx=0.5, rely=0.4, anchor='center')
        
        ttk.Label(
            center_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
            font=('Arial', 16, 'bold')
        ).pack(pady=20)
        
        self.install_type_var = tk.StringVar(value="local")
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        local_btn = ttk.Radiobutton(
            center_frame,
            text="üñ•Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
            variable=self.install_type_var,
            value="local",
            style='Large.TRadiobutton'
        )
        local_btn.pack(pady=10)
        
        ttk.Label(
            center_frame,
            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä",
            foreground='gray'
        ).pack()
        
        ttk.Separator(center_frame, orient='horizontal').pack(fill='x', pady=20)
        
        # –£–¥–∞–ª–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        remote_btn = ttk.Radiobutton(
            center_frame,
            text="üåê  –£–¥–∞–ª–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
            variable=self.install_type_var,
            value="remote",
            style='Large.TRadiobutton'
        )
        remote_btn.pack(pady=10)
        
        ttk.Label(
            center_frame,
            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ SSH",
            foreground='gray'
        ).pack()
        
    def create_step2_connection(self):
        """–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º
        self.connection_container = ttk.Frame(frame)
        self.connection_container.pack(fill='both', expand=True, padx=40, pady=40)
        
        # –§–æ—Ä–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.remote_form = ttk.LabelFrame(
            self.connection_container,
            text="SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É",
            padding=20
        )
        
        # IP –∞–¥—Ä–µ—Å
        ttk.Label(self.remote_form, text="IP –∞–¥—Ä–µ—Å –∏–ª–∏ hostname:").grid(
            row=0, column=0, sticky='w', pady=10
        )
        self.ip_entry = ttk.Entry(self.remote_form, width=30)
        self.ip_entry.grid(row=0, column=1, padx=10, pady=10)
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ttk.Label(self.remote_form, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:").grid(
            row=1, column=0, sticky='w', pady=10
        )
        self.user_entry = ttk.Entry(self.remote_form, width=30)
        self.user_entry.grid(row=1, column=1, padx=10, pady=10)
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(self.remote_form, text="–ü–∞—Ä–æ–ª—å:").grid(
            row=2, column=0, sticky='w', pady=10
        )
        self.password_entry = ttk.Entry(self.remote_form, width=30, show='*')
        self.password_entry.grid(row=2, column=1, padx=10, pady=10)
        
        # –ü–æ—Ä—Ç SSH
        ttk.Label(self.remote_form, text="SSH –ø–æ—Ä—Ç:").grid(
            row=3, column=0, sticky='w', pady=10
        )
        self.port_var = tk.StringVar(value="22")
        port_entry = ttk.Entry(self.remote_form, textvariable=self.port_var, width=10)
        port_entry.grid(row=3, column=1, sticky='w', padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_btn = ttk.Button(
            self.remote_form,
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            command=self.test_ssh_connection
        )
        test_btn.grid(row=4, column=0, columnspan=2, pady=20)
        
        # –§–æ—Ä–º–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.local_form = ttk.LabelFrame(
            self.connection_container,
            text="–õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
            padding=20
        )
        
        info_label = ttk.Label(
            self.local_form,
            text="‚úì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n\n"
                 "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä",
            justify='center'
        )
        info_label.pack(pady=40)
        
    def create_step3_components(self):
        """–®–∞–≥ 3: –í—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—É—Ç–∏"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="3. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(frame)
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        path_frame = ttk.LabelFrame(scrollable_frame, text="–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", padding=15)
        path_frame.pack(fill='x', padx=20, pady=10)
        
        path_container = ttk.Frame(path_frame)
        path_container.pack(fill='x')
        
        self.path_var = tk.StringVar(value=str(Path.home() / "ai-memory-system"))
        path_entry = ttk.Entry(path_container, textvariable=self.path_var, width=50)
        path_entry.pack(side='left', padx=(0, 10))
        
        ttk.Button(
            path_container,
            text="–û–±–∑–æ—Ä...",
            command=self.browse_install_path
        ).pack(side='left')
        
        # –í–µ—Ä—Å–∏—è Python
        python_frame = ttk.LabelFrame(scrollable_frame, text="Python", padding=15)
        python_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(python_frame, text="–í–µ—Ä—Å–∏—è Python:").pack(side='left', padx=(0, 10))
        
        self.python_var = tk.StringVar(value="3.11")
        python_combo = ttk.Combobox(
            python_frame,
            textvariable=self.python_var,
            values=["3.9", "3.10", "3.11", "3.12"],
            width=10,
            state='readonly'
        )
        python_combo.pack(side='left')
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏
        memory_frame = ttk.LabelFrame(scrollable_frame, text="–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏", padding=15)
        memory_frame.pack(fill='x', padx=20, pady=10)
        
        # –¢–∏–ø –ø–∞–º—è—Ç–∏
        type_container = ttk.Frame(memory_frame)
        type_container.pack(fill='x', pady=5)
        
        ttk.Label(type_container, text="–¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:").pack(side='left', padx=(0, 10))
        
        self.memory_type_var = tk.StringVar(value="chromadb")
        memory_combo = ttk.Combobox(
            type_container,
            textvariable=self.memory_type_var,
            values=["chromadb", "qdrant", "postgres", "milvus"],
            width=20,
            state='readonly'
        )
        memory_combo.pack(side='left')
        
        # –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
        size_container = ttk.Frame(memory_frame)
        size_container.pack(fill='x', pady=5)
        
        ttk.Label(size_container, text="–†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏:").pack(side='left', padx=(0, 10))
        
        self.memory_size_var = tk.IntVar(value=1024)
        size_spinbox = ttk.Spinbox(
            size_container,
            from_=512,
            to=10240,
            increment=512,
            textvariable=self.memory_size_var,
            width=10
        )
        size_spinbox.pack(side='left')
        
        ttk.Label(size_container, text="–ú–ë").pack(side='left', padx=(5, 0))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components_frame = ttk.LabelFrame(scrollable_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", padding=15)
        components_frame.pack(fill='x', padx=20, pady=10)
        
        self.install_docker_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            components_frame,
            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)",
            variable=self.install_docker_var
        ).pack(anchor='w', pady=5)
        
        self.install_nodejs_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            components_frame,
            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)",
            variable=self.install_nodejs_var
        ).pack(anchor='w', pady=5)
        
        self.create_service_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            components_frame,
            text="–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫)",
            variable=self.create_service_var
        ).pack(anchor='w', pady=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_step4_tokens(self):
        """–®–∞–≥ 4: API —Ç–æ–∫–µ–Ω—ã"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="4. API —Ç–æ–∫–µ–Ω—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(
            frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Ç–æ–∫–µ–Ω–æ–≤",
            font=('Arial', 14, 'bold')
        )
        header.pack(pady=20)
        
        info = ttk.Label(
            frame,
            text="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–∑–∂–µ.",
            justify='center'
        )
        info.pack(pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        tokens_container = ttk.Frame(frame)
        tokens_container.pack(fill='both', expand=True, padx=40)
        
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(tokens_container)
        scrollbar = ttk.Scrollbar(tokens_container, orient="vertical", command=canvas.yview)
        tokens_frame = ttk.Frame(canvas)
        
        tokens_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=tokens_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Entry –≤–∏–¥–∂–µ—Ç–æ–≤
        self.token_entries = {}
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        token_configs = [
            {
                "key": "OPENAI_API_KEY",
                "name": "OpenAI",
                "desc": "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT-3.5/GPT-4",
                "icon": "ü§ñ"
            },
            {
                "key": "ANTHROPIC_API_KEY",
                "name": "Anthropic",
                "desc": "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude",
                "icon": "üß†"
            },
            {
                "key": "GOOGLE_API_KEY",
                "name": "Google AI",
                "desc": "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini",
                "icon": "üîç"
            },
            {
                "key": "YANDEX_API_KEY",
                "name": "Yandex",
                "desc": "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT",
                "icon": "üá∑üá∫"
            },
            {
                "key": "TELEGRAM_BOT_TOKEN",
                "name": "Telegram Bot",
                "desc": "–¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞",
                "icon": "‚úàÔ∏è"
            },
            {
                "key": "SPEECHKIT_API_KEY",
                "name": "SpeechKit",
                "desc": "–î–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏",
                "icon": "üé§"
            }
        ]
        
        for i, token_config in enumerate(token_configs):
            # –§—Ä–µ–π–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            token_frame = ttk.Frame(tokens_frame)
            token_frame.pack(fill='x', pady=10)
            
            # –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            header_frame = ttk.Frame(token_frame)
            header_frame.pack(fill='x')
            
            ttk.Label(
                header_frame,
                text=f"{token_config['icon']} {token_config['name']}",
                font=('Arial', 12, 'bold')
            ).pack(side='left')
            
            ttk.Label(
                header_frame,
                text=token_config['desc'],
                foreground='gray'
            ).pack(side='left', padx=20)
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry_frame = ttk.Frame(token_frame)
            entry_frame.pack(fill='x', pady=5)
            
            entry = ttk.Entry(entry_frame, width=60, show='*')
            entry.pack(side='left', padx=(20, 10))
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å
            show_var = tk.BooleanVar()
            ttk.Checkbutton(
                entry_frame,
                text="–ü–æ–∫–∞–∑–∞—Ç—å",
                variable=show_var,
                command=lambda e=entry, v=show_var: e.config(show='' if v.get() else '*')
            ).pack(side='left')
            
            self.token_entries[token_config['key']] = entry
            
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_step5_review(self):
        """–®–∞–≥ 5: –û–±–∑–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
        
        # –û–±–∑–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        review_frame = ttk.LabelFrame(frame, text="–û–±–∑–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫", padding=15)
        review_frame.pack(fill='x', padx=20, pady=10)
        
        self.review_text = tk.Text(review_frame, height=10, width=70)
        self.review_text.pack(fill='both', expand=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        progress_frame = ttk.LabelFrame(frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", padding=15)
        progress_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            variable=self.progress_var,
            maximum=100,
            length=400
        )
        self.progress_bar.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        self.status_label.pack()
        
        # –õ–æ–≥
        log_container = ttk.Frame(progress_frame)
        log_container.pack(fill='both', expand=True, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(
            log_container,
            height=12,
            width=80,
            wrap='word'
        )
        self.log_text.pack(side='left', fill='both', expand=True)
        
        log_scrollbar = ttk.Scrollbar(log_container, command=self.log_text.yview)
        log_scrollbar.pack(side='right', fill='y')
        self.log_text.config(yscrollcommand=log_scrollbar.set)
        
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        bottom_frame = ttk.Frame(parent)
        bottom_frame.pack(fill='x', padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_btn = ttk.Button(
            bottom_frame,
            text="‚Üê –ù–∞–∑–∞–¥",
            command=self.go_back,
            state='disabled'
        )
        self.back_btn.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
        self.next_btn = ttk.Button(
            bottom_frame,
            text="–î–∞–ª–µ–µ ‚Üí",
            command=self.go_next
        )
        self.next_btn.pack(side='right', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        self.install_btn = ttk.Button(
            bottom_frame,
            text="üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self.start_installation,
            style='Accent.TButton'
        )
        self.install_btn.pack(side='right')
        self.install_btn.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–∫–∞
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        ttk.Button(
            bottom_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.cancel_installation
        ).pack(side='right', padx=10)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        self.notebook.bind('<<NotebookTabChanged>>', self.on_tab_changed)
        
    def on_tab_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.notebook.index(self.notebook.select())
        total_tabs = len(self.notebook.tabs())
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
        self.back_btn.config(state='normal' if current_tab > 0 else 'disabled')
        
        if current_tab == total_tabs - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∫–ª–∞–¥–∫–∞
            self.next_btn.pack_forget()
            self.install_btn.pack(side='right')
            self.update_review()
        else:
            self.install_btn.pack_forget()
            self.next_btn.pack(side='right', padx=(10, 0))
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if current_tab == 1:  # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.update_connection_form()
            
    def go_back(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É"""
        current = self.notebook.index(self.notebook.select())
        if current > 0:
            self.notebook.select(current - 1)
            
    def go_next(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É"""
        current = self.notebook.index(self.notebook.select())
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        if current == 1 and self.install_type_var.get() == "remote":
            if not self.validate_connection():
                return
                
        if current < len(self.notebook.tabs()) - 1:
            self.notebook.select(current + 1)
            
    def update_connection_form(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if self.install_type_var.get() == "local":
            self.remote_form.pack_forget()
            self.local_form.pack(fill='both', expand=True)
        else:
            self.local_form.pack_forget()
            self.remote_form.pack(fill='both', expand=True)
            
    def validate_connection(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.install_type_var.get() == "remote":
            if not all([self.ip_entry.get(), self.user_entry.get()]):
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                )
                return False
        return True
        
    def browse_install_path(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        path = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
            initialdir=self.path_var.get()
        )
        if path:
            self.path_var.set(path)
            
    def test_ssh_connection(self):
        """–¢–µ—Å—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not all([self.ip_entry.get(), self.user_entry.get()]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_window = tk.Toplevel(self.root)
        progress_window.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        progress_window.geometry("300x100")
        progress_window.transient(self.root)
        
        ttk.Label(
            progress_window,
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...",
            font=('Arial', 12)
        ).pack(pady=20)
        
        progress_bar = ttk.Progressbar(
            progress_window,
            mode='indeterminate'
        )
        progress_bar.pack(padx=20, pady=10)
        progress_bar.start()
        
        def test_connection():
            try:
                import paramiko
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                
                ssh.connect(
                    self.ip_entry.get(),
                    port=int(self.port_var.get()),
                    username=self.user_entry.get(),
                    password=self.password_entry.get(),
                    timeout=10
                )
                
                stdin, stdout, stderr = ssh.exec_command("echo 'OK'")
                result = stdout.read().decode().strip()
                ssh.close()
                
                progress_window.destroy()
                
                if result == "OK":
                    messagebox.showinfo(
                        "–£—Å–ø–µ—Ö",
                        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
                    )
                else:
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                    )
                    
            except Exception as e:
                progress_window.destroy()
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n{str(e)}"
                )
                
        thread = threading.Thread(target=test_connection)
        thread.start()
        
    def update_review(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–∑–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
        self.review_text.delete(1.0, tk.END)
        
        review = "–ù–ê–°–¢–†–û–ô–ö–ò –£–°–¢–ê–ù–û–í–ö–ò\n" + "=" * 50 + "\n\n"
        
        # –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_type = "–õ–æ–∫–∞–ª—å–Ω–∞—è" if self.install_type_var.get() == "local" else "–£–¥–∞–ª–µ–Ω–Ω–∞—è"
        review += f"–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_type}\n"
        
        if self.install_type_var.get() == "remote":
            review += f"–°–µ—Ä–≤–µ—Ä: {self.ip_entry.get()}:{self.port_var.get()}\n"
            review += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_entry.get()}\n"
            
        review += f"\n–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.path_var.get()}\n"
        review += f"–í–µ—Ä—Å–∏—è Python: {self.python_var.get()}\n"
        
        review += f"\n–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏: {self.memory_type_var.get()}\n"
        review += f"–†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {self.memory_size_var.get()} –ú–ë\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        review += "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n"
        if self.install_docker_var.get():
            review += "  ‚úì Docker\n"
        if self.install_nodejs_var.get():
            review += "  ‚úì Node.js\n"
        if self.create_service_var.get():
            review += "  ‚úì –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å\n"
            
        # –¢–æ–∫–µ–Ω—ã
        tokens_count = sum(1 for entry in self.token_entries.values() if entry.get())
        review += f"\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_count}\n"
        
        self.review_text.insert(1.0, review)
        self.review_text.config(state='disabled')
        
    def log(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        colors = {
            "INFO": "black",
            "SUCCESS": "green",
            "WARNING": "orange",
            "ERROR": "red"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Ü–≤–µ—Ç–∞
        tag_name = f"tag_{level}"
        self.log_text.tag_config(tag_name, foreground=colors.get(level, "black"))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        log_line = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_line, tag_name)
        self.log_text.see(tk.END)
        self.root.update()
        
    def update_progress(self, value: float, status: str = ""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä"""
        self.progress_var.set(value)
        if status:
            self.status_label.config(text=status)
        self.root.update()
        
    def collect_config(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ GUI"""
        self.config.install_type = self.install_type_var.get()
        self.config.server_ip = self.ip_entry.get()
        self.config.server_user = self.user_entry.get()
        self.config.server_password = self.password_entry.get()
        self.config.install_path = self.path_var.get()
        self.config.python_version = self.python_var.get()
        self.config.memory_type = self.memory_type_var.get()
        self.config.memory_size_mb = self.memory_size_var.get()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        self.config.tokens = {}
        for key, entry in self.token_entries.items():
            value = entry.get().strip()
            if value:
                self.config.tokens[key] = value
                
    def start_installation(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if self.installation_running:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
            
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.collect_config()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?"
        ):
            return
            
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.installation_running = True
        self.install_btn.config(state='disabled')
        self.back_btn.config(state='disabled')
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥
        self.log_text.delete(1.0, tk.END)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._install_thread)
        thread.daemon = True
        thread.start()
        
    def _install_thread(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É AI Memory System", "INFO")
            self.log("=" * 60, "INFO")
            
            # –≠—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            steps = [
                ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", self.check_system, 5),
                ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.prepare_environment, 10),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤", self.install_python_packages, 15),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Autogen", self.install_autogen, 15),
                ("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", self.copy_project_files, 10),
                ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏", self.setup_memory_system, 15),
                ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.create_configuration, 10),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", self.install_additional, 10),
                ("–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", self.finalize_installation, 10),
            ]
            
            total_progress = 0
            
            for step_name, step_func, step_weight in steps:
                self.log(f"\n‚ñ∂ {step_name}...", "INFO")
                self.update_progress(total_progress, step_name)
                
                try:
                    success = step_func()
                    if success:
                        self.log(f"‚úì {step_name} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS")
                    else:
                        raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                except Exception as e:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if self.error_handler:
                        if self.error_handler.handle_error(e, context=step_name):
                            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º —ç—Ç–æ—Ç —à–∞–≥ –µ—â–µ —Ä–∞–∑
                            self.log(f"‚Üª –ü–æ–≤—Ç–æ—Ä—è–µ–º {step_name} –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏", "INFO")
                            try:
                                success = step_func()
                                if success:
                                    self.log(f"‚úì {step_name} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞", "SUCCESS")
                                else:
                                    raise Exception(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {step_name}")
                            except Exception as retry_error:
                                self.log(f"‚úó {step_name} - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {str(retry_error)}", "ERROR")
                                raise
                        else:
                            self.log(f"‚úó {step_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É", "ERROR")
                            raise
                    else:
                        self.log(f"‚úó {step_name} - –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
                        raise
                    
                total_progress += step_weight
                self.update_progress(total_progress)
                
            self.update_progress(100, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.log("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "SUCCESS")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.show_completion_dialog()
            
        except Exception as e:
            self.log(f"\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {str(e)}", "ERROR")
            
            # –î–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}\n\n"
            
            if self.error_handler:
                error_message += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                error_message += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n"
                error_message += "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã\n"
                error_message += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
                
                if "permission" in str(e).lower():
                    error_message += "\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                elif "space" in str(e).lower():
                    error_message += "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"
                elif "connection" in str(e).lower():
                    error_message += "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
                    
            messagebox.showerror("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", error_message)
            
        finally:
            self.installation_running = False
            self.install_btn.config(state='normal')
            self.back_btn.config(state='normal')
            
    def check_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        checks = [
            ("Python", self._check_python),
            ("Git", self._check_git),
            ("–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ", self._check_disk_space),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", self._check_permissions),
        ]
        
        for check_name, check_func in checks:
            self.log(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º {check_name}...", "INFO")
            if not check_func():
                self.log(f"  ‚úó {check_name} - –ø—Ä–æ–±–ª–µ–º–∞", "ERROR")
                return False
            self.log(f"  ‚úì {check_name} - OK", "SUCCESS")
            
        return True
        
    def _check_python(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python"""
        required = tuple(map(int, self.config.python_version.split('.')))
        current = sys.version_info[:2]
        return current >= required
        
    def _check_git(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Git"""
        return shutil.which("git") is not None
        
    def _check_disk_space(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        stat = shutil.disk_usage(Path(self.config.install_path).parent)
        free_gb = stat.free / (1024**3)
        return free_gb >= 2  # –ú–∏–Ω–∏–º—É–º 2GB
        
    def _check_permissions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            test_path = Path(self.config.install_path) / ".test"
            test_path.parent.mkdir(parents=True, exist_ok=True)
            test_path.touch()
            test_path.unlink()
            return True
        except:
            return False
            
    def prepare_environment(self) -> bool:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(self.config.install_path).mkdir(parents=True, exist_ok=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        return True
        
    def install_python_packages(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        venv_path = Path(self.config.install_path) / "venv"
        self.log(f"  –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {venv_path}", "INFO")
        
        subprocess.run([sys.executable, "-m", "venv", str(venv_path)])
        
        # –ü—É—Ç—å –∫ pip
        if platform.system() == "Windows":
            pip_path = venv_path / "Scripts" / "pip.exe"
        else:
            pip_path = venv_path / "bin" / "pip"
            
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
        packages = [
            "requests", "pyyaml", "python-dotenv",
            "rich", "typer", "paramiko"
        ]
        
        for package in packages:
            self.log(f"  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...", "INFO")
            subprocess.run([str(pip_path), "install", package])
            
        return True
        
    def install_autogen(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Autogen"""
        venv_path = Path(self.config.install_path) / "venv"
        
        if platform.system() == "Windows":
            pip_path = venv_path / "Scripts" / "pip.exe"
        else:
            pip_path = venv_path / "bin" / "pip"
            
        self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Microsoft Autogen...", "INFO")
        subprocess.run([str(pip_path), "install", "pyautogen[retrievechat]"])
        
        return True
        
    def copy_project_files(self) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        source_path = Path(__file__).parent.parent
        dest_path = Path(self.config.install_path) / "ai-memory-system"
        
        dest_path.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for item in source_path.iterdir():
            if item.name in ['.git', '__pycache__', 'venv', '.env', 'installer']:
                continue
                
            self.log(f"  –ö–æ–ø–∏—Ä—É–µ–º {item.name}...", "INFO")
            
            if item.is_file():
                shutil.copy2(item, dest_path / item.name)
            elif item.is_dir():
                shutil.copytree(
                    item,
                    dest_path / item.name,
                    dirs_exist_ok=True
                )
                
        return True
        
    def setup_memory_system(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        venv_path = Path(self.config.install_path) / "venv"
        
        if platform.system() == "Windows":
            pip_path = venv_path / "Scripts" / "pip.exe"
        else:
            pip_path = venv_path / "bin" / "pip"
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞–º—è—Ç–∏
        if self.config.memory_type == "chromadb":
            self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChromaDB...", "INFO")
            subprocess.run([str(pip_path), "install", "chromadb"])
        elif self.config.memory_type == "qdrant":
            self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Qdrant...", "INFO")
            subprocess.run([str(pip_path), "install", "qdrant-client"])
        elif self.config.memory_type == "postgres":
            self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL –¥—Ä–∞–π–≤–µ—Ä—ã...", "INFO")
            subprocess.run([str(pip_path), "install", "psycopg2-binary", "pgvector"])
        elif self.config.memory_type == "milvus":
            self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Milvus...", "INFO")
            subprocess.run([str(pip_path), "install", "pymilvus"])
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        memory_path = Path(self.config.install_path) / "memory_data"
        memory_path.mkdir(exist_ok=True)
        
        return True
        
    def create_configuration(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_path = Path(self.config.install_path) / "ai-memory-system"
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_content = "# AI Memory System Configuration\n\n"
        
        for key, value in self.config.tokens.items():
            env_content += f"{key}={value}\n"
            
        env_content += f"\n# System Settings\n"
        env_content += f"MEMORY_TYPE={self.config.memory_type}\n"
        env_content += f"MEMORY_PATH=../memory_data\n"
        env_content += f"MEMORY_SIZE_MB={self.config.memory_size_mb}\n"
        
        env_file = config_path / ".env"
        env_file.write_text(env_content)
        
        self.log("  ‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env", "SUCCESS")
        
        # –°–æ–∑–¥–∞–µ–º config.yaml
        config_content = f"""# AI Memory System Configuration

system:
  install_path: {self.config.install_path}
  python_version: {self.config.python_version}
  
memory:
  type: {self.config.memory_type}
  path: ../memory_data
  size_mb: {self.config.memory_size_mb}
  
logging:
  level: INFO
  path: ../logs
  
api:
  enabled: true
  host: 0.0.0.0
  port: 8000
"""
        
        config_file = config_path / "config.yaml"
        config_file.write_text(config_content)
        
        self.log("  ‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config.yaml", "SUCCESS")
        
        return True
        
    def install_additional(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if self.install_docker_var.get():
            self.log("  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...", "INFO")
            # –ó–¥–µ—Å—å –∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
            
        if self.install_nodejs_var.get():
            self.log("  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js...", "INFO")
            # –ó–¥–µ—Å—å –∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js
            
        if self.create_service_var.get() and platform.system() == "Linux":
            self.log("  –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...", "INFO")
            self.create_systemd_service()
            
        return True
        
    def create_systemd_service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞"""
        service_content = f"""[Unit]
Description=AI Memory System
After=network.target

[Service]
Type=simple
User={os.getenv('USER')}
WorkingDirectory={self.config.install_path}/ai-memory-system
ExecStart={self.config.install_path}/venv/bin/python run_system.py
Restart=on-failure

[Install]
WantedBy=multi-user.target
"""
        
        service_path = Path("/tmp/ai-memory-system.service")
        service_path.write_text(service_content)
        
        try:
            subprocess.run(
                ["sudo", "cp", str(service_path), "/etc/systemd/system/"],
                check=True
            )
            subprocess.run(["sudo", "systemctl", "daemon-reload"])
            subprocess.run(["sudo", "systemctl", "enable", "ai-memory-system"])
            self.log("    ‚úì –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω", "SUCCESS")
        except:
            self.log("    ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å (–Ω—É–∂–Ω—ã sudo –ø—Ä–∞–≤–∞)", "WARNING")
            
    def finalize_installation(self) -> bool:
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
        project_path = Path(self.config.install_path) / "ai-memory-system"
        req_file = project_path / "requirements.txt"
        
        if req_file.exists():
            venv_path = Path(self.config.install_path) / "venv"
            if platform.system() == "Windows":
                pip_path = venv_path / "Scripts" / "pip.exe"
            else:
                pip_path = venv_path / "bin" / "pip"
                
            self.log("  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...", "INFO")
            subprocess.run([str(pip_path), "install", "-r", str(req_file)])
            
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
        self.create_launch_scripts()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs = ["logs", "cache", "data", "backups"]
        for dir_name in dirs:
            (project_path / dir_name).mkdir(exist_ok=True)
            
        return True
        
    def create_launch_scripts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
        if platform.system() == "Windows":
            # Batch —Ñ–∞–π–ª –¥–ª—è Windows
            bat_content = f"""@echo off
echo Starting AI Memory System...
cd /d "{self.config.install_path}\\ai-memory-system"
"..\\venv\\Scripts\\python.exe" run_system.py
pause
"""
            bat_file = Path(self.config.install_path) / "start_ai_memory.bat"
            bat_file.write_text(bat_content)
            
            self.log("  ‚úì –°–æ–∑–¥–∞–Ω start_ai_memory.bat", "SUCCESS")
            
        else:
            # Shell —Å–∫—Ä–∏–ø—Ç –¥–ª—è Linux/Mac
            sh_content = f"""#!/bin/bash
echo "Starting AI Memory System..."
cd "{self.config.install_path}/ai-memory-system"
../venv/bin/python run_system.py
"""
            sh_file = Path(self.config.install_path) / "start_ai_memory.sh"
            sh_file.write_text(sh_content)
            sh_file.chmod(0o755)
            
            self.log("  ‚úì –°–æ–∑–¥–∞–Ω start_ai_memory.sh", "SUCCESS")
            
    def show_completion_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        dialog.geometry("600x400")
        dialog.transient(self.root)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(
            dialog,
            text="üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            font=('Arial', 16, 'bold')
        )
        header.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.Frame(dialog)
        info_frame.pack(fill='both', expand=True, padx=20)
        
        info_text = tk.Text(info_frame, height=15, width=70)
        info_text.pack(fill='both', expand=True)
        
        info = f"""
AI Memory System —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤:
{self.config.install_path}

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
"""
        
        if platform.system() == "Windows":
            info += f"\n  {self.config.install_path}\\start_ai_memory.bat\n"
        else:
            info += f"\n  {self.config.install_path}/start_ai_memory.sh\n"
            
            if self.create_service_var.get():
                info += "\n–ò–ª–∏ —á–µ—Ä–µ–∑ systemd:\n"
                info += "  sudo systemctl start ai-memory-system\n"
                
        info += f"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
  ‚Ä¢ –¢–∏–ø –ø–∞–º—è—Ç–∏: {self.config.memory_type}
  ‚Ä¢ –†–∞–∑–º–µ—Ä: {self.config.memory_size_mb} –ú–ë
  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(self.config.tokens)}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:
  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config.install_path}/ai-memory-system/.env
  ‚Ä¢ –õ–æ–≥–∏: {self.config.install_path}/ai-memory-system/logs/
"""
        
        info_text.insert(1.0, info)
        info_text.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(dialog)
        button_frame.pack(fill='x', padx=20, pady=20)
        
        ttk.Button(
            button_frame,
            text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
            command=lambda: self.open_install_folder()
        ).pack(side='left', padx=5)
        
        ttk.Button(
            button_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=dialog.destroy
        ).pack(side='right', padx=5)
        
    def open_install_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        path = Path(self.config.install_path)
        if platform.system() == "Windows":
            os.startfile(path)
        elif platform.system() == "Darwin":  # macOS
            subprocess.run(["open", str(path)])
        else:  # Linux
            subprocess.run(["xdg-open", str(path)])
            
    def cancel_installation(self):
        """–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if self.installation_running:
            if not messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å?"
            ):
                return
                
        self.root.destroy()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tkinter
    try:
        import tkinter
    except ImportError:
        print("–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ tkinter")
        print("Ubuntu/Debian: sudo apt-get install python3-tk")
        print("Fedora: sudo dnf install python3-tkinter")
        print("macOS: brew install python-tk")
        print("Windows: –û–±—ã—á–Ω–æ –≤–∫–ª—é—á–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É Python")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä
    installer = UniversalInstaller()
    installer.run()


if __name__ == "__main__":
    main()
