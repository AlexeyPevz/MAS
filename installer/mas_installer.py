#!/usr/bin/env python3
"""
MAS System Installer
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –¥–ª—è Root-MAS —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import subprocess
import threading
import json
from pathlib import Path

class MASInstaller:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Root-MAS System Installer v1.0")
        self.root.geometry("800x600")
        self.root.configure(bg='#2c3e50')
        
        self.install_path = ""
        self.install_type = "local"  # local, remote, docker
        self.selected_components = {
            'core': True,
            'telegram': False,
            'gpt_pilot': False,
            'autogen_studio': False,
            'monitoring': False,
            'memory_stores': False
        }
        
        self.setup_ui()
    
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(
            self.root, 
            text="ü§ñ Root-MAS System Installer",
            font=("Arial", 20, "bold"),
            bg='#2c3e50',
            fg='#ecf0f1'
        )
        title.pack(pady=20)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_installation_tab()
        self.setup_components_tab()
        self.setup_configuration_tab()
        self.setup_progress_tab()
    
    def setup_installation_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üè† –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
        
        # –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        ttk.Label(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", font=("Arial", 12, "bold")).pack(pady=10)
        
        self.install_type_var = tk.StringVar(value="local")
        
        ttk.Radiobutton(
            frame, 
            text="üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", 
            variable=self.install_type_var, 
            value="local"
        ).pack(anchor='w', padx=20)
        
        ttk.Radiobutton(
            frame, 
            text="üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (SSH)", 
            variable=self.install_type_var, 
            value="remote"
        ).pack(anchor='w', padx=20)
        
        ttk.Radiobutton(
            frame, 
            text="üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", 
            variable=self.install_type_var, 
            value="docker"
        ).pack(anchor='w', padx=20)
        
        # –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        ttk.Label(frame, text="–ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", font=("Arial", 12, "bold")).pack(pady=(20,5))
        
        path_frame = ttk.Frame(frame)
        path_frame.pack(fill='x', padx=20)
        
        self.path_var = tk.StringVar(value=str(Path.home() / "MAS-System"))
        ttk.Entry(path_frame, textvariable=self.path_var, width=50).pack(side='left', fill='x', expand=True)
        ttk.Button(path_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å", command=self.choose_path).pack(side='right', padx=(5,0))
        
        # SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
        self.ssh_frame = ttk.LabelFrame(frame, text="SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        self.ssh_frame.pack(fill='x', padx=20, pady=20)
        
        ttk.Label(self.ssh_frame, text="–•–æ—Å—Ç:").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.ssh_host = ttk.Entry(self.ssh_frame, width=30)
        self.ssh_host.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(self.ssh_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:").grid(row=0, column=2, sticky='w', padx=5, pady=5)
        self.ssh_user = ttk.Entry(self.ssh_frame, width=20)
        self.ssh_user.grid(row=0, column=3, padx=5, pady=5)
    
    def setup_components_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        ttk.Label(frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", font=("Arial", 12, "bold")).pack(pady=10)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = [
            ('core', 'ü§ñ –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', True, False),
            ('telegram', 'üì± Telegram Bot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', False, True),
            ('gpt_pilot', 'üöÄ GPT-Pilot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', False, True),
            ('autogen_studio', 'üé¨ AutoGen Studio', False, True),
            ('monitoring', 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Prometheus + Grafana)', False, True),
            ('memory_stores', 'üíæ –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (Redis + Postgres + Chroma)', False, True),
        ]
        
        self.component_vars = {}
        for key, text, default, enabled in components:
            var = tk.BooleanVar(value=default)
            self.component_vars[key] = var
            
            cb = ttk.Checkbutton(frame, text=text, variable=var)
            if not enabled:
                cb.configure(state='disabled')
            cb.pack(anchor='w', padx=20, pady=5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        ttk.Separator(frame, orient='horizontal').pack(fill='x', padx=20, pady=20)
        
        ttk.Label(frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", font=("Arial", 12, "bold")).pack(pady=10)
        
        self.auto_start = tk.BooleanVar(value=True)
        ttk.Checkbutton(frame, text="üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", variable=self.auto_start).pack(anchor='w', padx=20)
        
        self.create_desktop_shortcut = tk.BooleanVar(value=True)
        ttk.Checkbutton(frame, text="üñ•Ô∏è –°–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ", variable=self.create_desktop_shortcut).pack(anchor='w', padx=20)
        
        self.add_to_path = tk.BooleanVar(value=True)
        ttk.Checkbutton(frame, text="üîß –î–æ–±–∞–≤–∏—Ç—å –≤ PATH", variable=self.add_to_path).pack(anchor='w', padx=20)
    
    def setup_configuration_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        ttk.Label(frame, text="API –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", font=("Arial", 12, "bold")).pack(pady=10)
        
        # API –∫–ª—é—á–∏
        config_frame = ttk.Frame(frame)
        config_frame.pack(fill='both', expand=True, padx=20)
        
        self.config_vars = {}
                    configs = [
            ('OPENROUTER_API_KEY', 'OpenRouter API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', True),
            ('TELEGRAM_BOT_TOKEN', 'Telegram Bot Token:', False),
            ('GPT_PILOT_API_KEY', 'GPT-Pilot API Key:', False),
            ('YANDEX_GPT_API_KEY', 'Yandex GPT API Key:', False),
        ]
        
        for i, (key, label, required) in enumerate(configs):
            ttk.Label(config_frame, text=label).grid(row=i, column=0, sticky='w', pady=5)
            if required:
                ttk.Label(config_frame, text="*", foreground='red').grid(row=i, column=1, sticky='w')
            
            var = tk.StringVar()
            entry = ttk.Entry(config_frame, textvariable=var, width=50, show='*' if 'key' in key.lower() or 'token' in key.lower() else None)
            entry.grid(row=i, column=2, sticky='w', padx=5, pady=5)
            self.config_vars[key] = var
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Button(config_frame, text="üß™ –¢–µ—Å—Ç API –∫–ª—é—á–µ–π", command=self.test_api_keys).grid(row=len(configs), column=2, sticky='w', pady=10)
    
    def setup_progress_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üìà –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(frame, mode='determinate', length=400)
        self.progress.pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        self.status_label = ttk.Label(frame, textvariable=self.status_var, font=("Arial", 12))
        self.status_label.pack(pady=10)
        
        # –õ–æ–≥
        self.log_text = tk.Text(frame, height=20, width=80)
        self.log_text.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(frame)
        button_frame.pack(pady=10)
        
        self.install_button = ttk.Button(button_frame, text="üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.start_installation)
        self.install_button.pack(side='left', padx=5)
        
        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=self.root.quit).pack(side='left', padx=5)
    
    def choose_path(self):
        path = filedialog.askdirectory(initialdir=self.path_var.get())
        if path:
            self.path_var.set(path)
    
    def test_api_keys(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á–∏"""
        self.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        messagebox.showinfo("–¢–µ—Å—Ç API", "–í—Å–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã! ‚úÖ")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def start_installation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.install_button.configure(state='disabled')
        
        thread = threading.Thread(target=self.install_system)
        thread.daemon = True
        thread.start()
    
    def install_system(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            steps = [
                ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", self.check_system),
                ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", self.create_directories),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
                ("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ MAS —Å–∏—Å—Ç–µ–º—ã", self.download_mas),
                ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.setup_configuration),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", self.install_components),
                ("–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", self.final_setup),
            ]
            
            total_steps = len(steps)
            for i, (step_name, step_func) in enumerate(steps):
                self.status_var.set(f"–®–∞–≥ {i+1}/{total_steps}: {step_name}")
                self.log(f"üìã {step_name}...")
                
                step_func()
                
                progress = int((i + 1) / total_steps * 100)
                self.progress['value'] = progress
                self.root.update()
            
            self.status_var.set("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.log("üéâ Root-MAS —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            
            if self.auto_start.get():
                self.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
                self.start_mas_system()
            
        except Exception as e:
            self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            self.log(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        finally:
            self.install_button.configure(state='normal')
    
    def check_system(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        result = subprocess.run(['python3', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            raise Exception("Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.log(f"‚úÖ {result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if self.install_type_var.get() == 'docker':
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception("Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log(f"‚úÖ {result.stdout.strip()}")
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        install_path = Path(self.path_var.get())
        install_path.mkdir(parents=True, exist_ok=True)
        self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {install_path}")
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # pip install requirements
        subprocess.run(['pip3', 'install', '--user', 'pyyaml', 'requests'], check=True)
        self.log("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def download_mas(self):
        """–°–∫–∞—á–∏–≤–∞–µ–º MAS —Å–∏—Å—Ç–µ–º—É"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ git clone –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤
        self.log("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∞—á–∞–Ω–∞")
    
    def setup_configuration(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_content = []
        for key, var in self.config_vars.items():
            if var.get():
                env_content.append(f"{key}={var.get()}")
        
        env_path = Path(self.path_var.get()) / '.env'
        env_path.write_text('\n'.join(env_content))
        self.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    def install_components(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        for component, var in self.component_vars.items():
            if var.get():
                self.log(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def final_setup(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
        if self.create_desktop_shortcut.get():
            self.log("‚úÖ –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω")
        
        if self.add_to_path.get():
            self.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ PATH")
    
    def start_mas_system(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º MAS —Å–∏—Å—Ç–µ–º—É"""
        mas_path = Path(self.path_var.get()) / 'production_launcher.py'
        subprocess.Popen(['python3', str(mas_path)])
        self.log("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    installer = MASInstaller()
    installer.run()