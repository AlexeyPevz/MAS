#!/usr/bin/env python3
"""
System Doctor - Diagnostic and Recovery Tool
–£—Ç–∏–ª–∏—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è AI Memory System
"""

import os
import sys
import platform
import psutil
import subprocess
import socket
import shutil
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import argparse

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
try:
    from rich.console import Console
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.panel import Panel
    from rich import print as rprint
    RICH_AVAILABLE = True
    console = Console()
except ImportError:
    RICH_AVAILABLE = False
    console = None
    rprint = print

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
try:
    from error_handler import ErrorHandler, SystemRequirements
except ImportError:
    ErrorHandler = None
    SystemRequirements = None


class SystemDoctor:
    """–î–æ–∫—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    
    def __init__(self):
        self.error_handler = ErrorHandler() if ErrorHandler else None
        self.requirements = SystemRequirements() if SystemRequirements else None
        self.issues_found = []
        self.fixes_applied = []
        
    def print_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         AI Memory System Doctor              ‚ïë
‚ïë     –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ v1.0        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        if RICH_AVAILABLE:
            console.print(Panel(banner, style="bold blue"))
        else:
            print(banner)
            
    def run_diagnostics(self) -> Dict[str, Dict]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        self.print_banner()
        
        if RICH_AVAILABLE:
            console.print("\n[bold yellow]üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...[/bold yellow]\n")
        else:
            print("\nüîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n")
            
        diagnostics = {
            "system": self.check_system_info(),
            "resources": self.check_resources(),
            "network": self.check_network(),
            "dependencies": self.check_dependencies(),
            "installation": self.check_installation(),
            "services": self.check_services(),
            "logs": self.analyze_logs(),
        }
        
        return diagnostics
        
    def check_system_info(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = {
            "platform": platform.system(),
            "version": platform.version(),
            "architecture": platform.machine(),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "hostname": socket.gethostname(),
            "user": os.getenv('USER', os.getenv('USERNAME', 'unknown')),
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        info["in_venv"] = hasattr(sys, 'real_prefix') or (
            hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix
        )
        
        return info
        
    def check_resources(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        # CPU
        cpu_info = {
            "count": psutil.cpu_count(),
            "usage_percent": psutil.cpu_percent(interval=1),
            "frequency": psutil.cpu_freq().current if psutil.cpu_freq() else 0,
        }
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        memory_info = {
            "total": memory.total,
            "available": memory.available,
            "used": memory.used,
            "percent": memory.percent,
            "status": "OK" if memory.percent < 85 else "WARNING" if memory.percent < 95 else "CRITICAL"
        }
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        disk_info = {
            "total": disk.total,
            "used": disk.used,
            "free": disk.free,
            "percent": disk.percent,
            "status": "OK" if disk.percent < 85 else "WARNING" if disk.percent < 95 else "CRITICAL"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if memory.percent > 85:
            self.issues_found.append({
                "type": "memory",
                "severity": "high" if memory.percent > 95 else "medium",
                "message": f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%",
                "fix": "free_memory"
            })
            
        if disk.percent > 85:
            self.issues_found.append({
                "type": "disk",
                "severity": "high" if disk.percent > 95 else "medium",
                "message": f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk.free / (1024**3):.1f} GB",
                "fix": "free_disk_space"
            })
            
        return {
            "cpu": cpu_info,
            "memory": memory_info,
            "disk": disk_info
        }
        
    def check_network(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        network_info = {
            "internet": False,
            "dns": False,
            "proxy": None,
            "speed": None,
            "ports": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        test_hosts = [
            ("pypi.org", 443),
            ("github.com", 443),
            ("google.com", 443)
        ]
        
        for host, port in test_hosts:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((host, port))
                sock.close()
                
                if result == 0:
                    network_info["internet"] = True
                    break
            except:
                pass
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
        try:
            socket.gethostbyname("pypi.org")
            network_info["dns"] = True
        except:
            self.issues_found.append({
                "type": "network",
                "severity": "high",
                "message": "–ü—Ä–æ–±–ª–µ–º—ã —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º",
                "fix": "fix_dns"
            })
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy_vars = ['HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy']
        for var in proxy_vars:
            if os.getenv(var):
                network_info["proxy"] = os.getenv(var)
                break
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        if self.requirements:
            for port in self.requirements.required_ports:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    result = sock.bind(('', port))
                    sock.close()
                    network_info["ports"][port] = "free"
                except:
                    network_info["ports"][port] = "occupied"
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å
                    try:
                        for conn in psutil.net_connections():
                            if conn.laddr.port == port:
                                proc = psutil.Process(conn.pid)
                                self.issues_found.append({
                                    "type": "port",
                                    "severity": "medium",
                                    "message": f"–ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º {proc.name()} (PID: {conn.pid})",
                                    "fix": "free_port",
                                    "data": {"port": port, "pid": conn.pid}
                                })
                                break
                    except:
                        pass
                        
        if not network_info["internet"]:
            self.issues_found.append({
                "type": "network",
                "severity": "critical",
                "message": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
                "fix": "check_network"
            })
            
        return network_info
        
    def check_dependencies(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        deps = {
            "python": {
                "installed": True,
                "version": sys.version,
                "path": sys.executable
            },
            "pip": self._check_command("pip"),
            "git": self._check_command("git"),
            "docker": self._check_command("docker"),
            "node": self._check_command("node"),
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
        required_packages = [
            "autogen",
            "chromadb",
            "paramiko",
            "rich",
            "pyyaml"
        ]
        
        deps["packages"] = {}
        for package in required_packages:
            try:
                __import__(package)
                deps["packages"][package] = {"installed": True}
            except ImportError:
                deps["packages"][package] = {"installed": False}
                self.issues_found.append({
                    "type": "dependency",
                    "severity": "medium",
                    "message": f"–ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "fix": "install_package",
                    "data": {"package": package}
                })
                
        return deps
        
    def check_installation(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É AI Memory System"""
        installation = {
            "found": False,
            "path": None,
            "version": None,
            "config": None,
            "issues": []
        }
        
        # –ò—â–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        search_paths = [
            Path.home() / "ai-memory-system",
            Path("/opt/ai-memory-system"),
            Path.cwd().parent,
            Path.cwd()
        ]
        
        for path in search_paths:
            if (path / "run_system.py").exists():
                installation["found"] = True
                installation["path"] = str(path)
                break
                
        if not installation["found"]:
            self.issues_found.append({
                "type": "installation",
                "severity": "critical",
                "message": "AI Memory System –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "fix": "install_system"
            })
            return installation
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = Path(installation["path"]) / ".env"
        if config_path.exists():
            installation["config"] = "found"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
            with open(config_path) as f:
                env_content = f.read()
                
            required_tokens = ["OPENAI_API_KEY", "ANTHROPIC_API_KEY"]
            missing_tokens = []
            
            for token in required_tokens:
                if token not in env_content or f"{token}=" not in env_content:
                    missing_tokens.append(token)
                    
            if missing_tokens:
                installation["issues"].append("missing_tokens")
                self.issues_found.append({
                    "type": "config",
                    "severity": "medium",
                    "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã: {', '.join(missing_tokens)}",
                    "fix": "configure_tokens"
                })
        else:
            installation["config"] = "missing"
            self.issues_found.append({
                "type": "config",
                "severity": "high",
                "message": "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "fix": "create_config"
            })
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = ["logs", "memory_data", "cache"]
        for dir_name in required_dirs:
            dir_path = Path(installation["path"]) / dir_name
            if not dir_path.exists():
                installation["issues"].append(f"missing_dir_{dir_name}")
                
        return installation
        
    def check_services(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
        services = {
            "systemd": False,
            "ai_memory_service": None,
            "docker": None,
            "processes": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd (Linux)
        if platform.system() == "Linux":
            try:
                result = subprocess.run(
                    ["systemctl", "is-system-running"],
                    capture_output=True,
                    text=True
                )
                services["systemd"] = result.returncode == 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
                if services["systemd"]:
                    result = subprocess.run(
                        ["systemctl", "status", "ai-memory-system"],
                        capture_output=True,
                        text=True
                    )
                    if result.returncode == 0:
                        services["ai_memory_service"] = "running"
                    elif "could not be found" in result.stderr:
                        services["ai_memory_service"] = "not_installed"
                    else:
                        services["ai_memory_service"] = "stopped"
                        
            except:
                pass
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(
                ["docker", "info"],
                capture_output=True,
                text=True
            )
            services["docker"] = "running" if result.returncode == 0 else "not_running"
        except:
            services["docker"] = "not_installed"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–∏—Å—Ç–µ–º—ã
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'run_system.py' in cmdline or 'ai-memory' in cmdline:
                    services["processes"].append({
                        "pid": proc.info['pid'],
                        "name": proc.info['name'],
                        "cmdline": cmdline
                    })
            except:
                pass
                
        return services
        
    def analyze_logs(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
        log_analysis = {
            "logs_found": False,
            "recent_errors": [],
            "error_patterns": {},
            "recommendations": []
        }
        
        # –ò—â–µ–º –ª–æ–≥–∏
        log_locations = [
            Path.cwd() / "logs",
            Path.home() / "ai-memory-system" / "logs",
            Path("/var/log/ai-memory-system"),
        ]
        
        log_files = []
        for location in log_locations:
            if location.exists():
                log_files.extend(location.glob("*.log"))
                
        if not log_files:
            return log_analysis
            
        log_analysis["logs_found"] = True
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        error_keywords = [
            "ERROR", "CRITICAL", "FATAL", "Exception", "Traceback",
            "Failed", "Error:", "failed to", "unable to"
        ]
        
        recent_logs = sorted(log_files, key=lambda f: f.stat().st_mtime, reverse=True)[:5]
        
        for log_file in recent_logs:
            try:
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    
                for line in lines:
                    for keyword in error_keywords:
                        if keyword in line:
                            log_analysis["recent_errors"].append({
                                "file": log_file.name,
                                "line": line.strip(),
                                "timestamp": datetime.fromtimestamp(log_file.stat().st_mtime)
                            })
                            
                            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                            if "memory" in line.lower():
                                log_analysis["error_patterns"]["memory"] = \
                                    log_analysis["error_patterns"].get("memory", 0) + 1
                            elif "disk" in line.lower() or "space" in line.lower():
                                log_analysis["error_patterns"]["disk"] = \
                                    log_analysis["error_patterns"].get("disk", 0) + 1
                            elif "connection" in line.lower() or "network" in line.lower():
                                log_analysis["error_patterns"]["network"] = \
                                    log_analysis["error_patterns"].get("network", 0) + 1
                            elif "permission" in line.lower() or "denied" in line.lower():
                                log_analysis["error_patterns"]["permissions"] = \
                                    log_analysis["error_patterns"].get("permissions", 0) + 1
                                    
            except:
                pass
                
        # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if log_analysis["error_patterns"]:
            most_common = max(log_analysis["error_patterns"], 
                            key=log_analysis["error_patterns"].get)
            
            recommendations = {
                "memory": "–£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "disk": "–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
                "network": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏",
                "permissions": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º"
            }
            
            if most_common in recommendations:
                log_analysis["recommendations"].append(recommendations[most_common])
                
        return log_analysis
        
    def _check_command(self, cmd: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            path = shutil.which(cmd)
            if path:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
                version_cmd = f"{cmd} --version"
                result = subprocess.run(
                    version_cmd.split(),
                    capture_output=True,
                    text=True
                )
                version = result.stdout.strip().split('\n')[0] if result.stdout else "unknown"
                
                return {
                    "installed": True,
                    "path": path,
                    "version": version
                }
        except:
            pass
            
        return {"installed": False}
        
    def show_report(self, diagnostics: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        if RICH_AVAILABLE:
            self._show_rich_report(diagnostics)
        else:
            self._show_simple_report(diagnostics)
            
    def _show_rich_report(self, diagnostics: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç —Å rich"""
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.print("\n[bold cyan]üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/bold cyan]")
        
        sys_table = Table(show_header=False)
        sys_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        sys_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ")
        
        for key, value in diagnostics["system"].items():
            sys_table.add_row(key.replace('_', ' ').title(), str(value))
            
        console.print(sys_table)
        
        # –†–µ—Å—É—Ä—Å—ã
        console.print("\n[bold cyan]üíæ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã[/bold cyan]")
        
        res_table = Table()
        res_table.add_column("–†–µ—Å—É—Ä—Å", style="cyan")
        res_table.add_column("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        res_table.add_column("–°—Ç–∞—Ç—É—Å")
        
        # CPU
        cpu = diagnostics["resources"]["cpu"]
        res_table.add_row(
            "CPU",
            f"{cpu['usage_percent']}% ({cpu['count']} —è–¥–µ—Ä)",
            "[green]OK[/green]" if cpu['usage_percent'] < 80 else "[yellow]HIGH[/yellow]"
        )
        
        # –ü–∞–º—è—Ç—å
        mem = diagnostics["resources"]["memory"]
        res_table.add_row(
            "–ü–∞–º—è—Ç—å",
            f"{mem['percent']:.1f}% ({mem['used'] / (1024**3):.1f} / {mem['total'] / (1024**3):.1f} GB)",
            f"[{'green' if mem['status'] == 'OK' else 'yellow' if mem['status'] == 'WARNING' else 'red'}]{mem['status']}[/]"
        )
        
        # –î–∏—Å–∫
        disk = diagnostics["resources"]["disk"]
        res_table.add_row(
            "–î–∏—Å–∫",
            f"{disk['percent']:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ {disk['free'] / (1024**3):.1f} GB)",
            f"[{'green' if disk['status'] == 'OK' else 'yellow' if disk['status'] == 'WARNING' else 'red'}]{disk['status']}[/]"
        )
        
        console.print(res_table)
        
        # –°–µ—Ç—å
        console.print("\n[bold cyan]üåê –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ[/bold cyan]")
        
        net = diagnostics["network"]
        net_table = Table(show_header=False)
        net_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        net_table.add_column("–°—Ç–∞—Ç—É—Å")
        
        net_table.add_row(
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "[green]‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω[/green]" if net["internet"] else "[red]‚úó –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]"
        )
        net_table.add_row(
            "DNS",
            "[green]‚úì –†–∞–±–æ—Ç–∞–µ—Ç[/green]" if net["dns"] else "[red]‚úó –ü—Ä–æ–±–ª–µ–º—ã[/red]"
        )
        
        if net["proxy"]:
            net_table.add_row("–ü—Ä–æ–∫—Å–∏", net["proxy"])
            
        console.print(net_table)
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if self.issues_found:
            console.print("\n[bold red]‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã[/bold red]")
            
            issues_table = Table()
            issues_table.add_column("–¢–∏–ø", style="cyan")
            issues_table.add_column("–ü—Ä–æ–±–ª–µ–º–∞")
            issues_table.add_column("–í–∞–∂–Ω–æ—Å—Ç—å")
            
            severity_colors = {
                "critical": "red",
                "high": "yellow", 
                "medium": "blue",
                "low": "green"
            }
            
            for issue in self.issues_found:
                issues_table.add_row(
                    issue["type"].upper(),
                    issue["message"],
                    f"[{severity_colors.get(issue['severity'], 'white')}]{issue['severity'].upper()}[/]"
                )
                
            console.print(issues_table)
        else:
            console.print("\n[bold green]‚úì –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã![/bold green]")
            
    def _show_simple_report(self, diagnostics: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        print("-" * 50)
        for key, value in diagnostics["system"].items():
            print(f"{key}: {value}")
            
        print("\nüíæ –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´")
        print("-" * 50)
        cpu = diagnostics["resources"]["cpu"]
        print(f"CPU: {cpu['usage_percent']}% ({cpu['count']} —è–¥–µ—Ä)")
        
        mem = diagnostics["resources"]["memory"]
        print(f"–ü–∞–º—è—Ç—å: {mem['percent']:.1f}% - {mem['status']}")
        
        disk = diagnostics["resources"]["disk"]
        print(f"–î–∏—Å–∫: {disk['percent']:.1f}% (—Å–≤–æ–±–æ–¥–Ω–æ {disk['free'] / (1024**3):.1f} GB) - {disk['status']}")
        
        print("\nüåê –°–ï–¢–¨")
        print("-" * 50)
        net = diagnostics["network"]
        print(f"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {'‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω' if net['internet'] else '‚úó –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}")
        print(f"DNS: {'‚úì –†–∞–±–æ—Ç–∞–µ—Ç' if net['dns'] else '‚úó –ü—Ä–æ–±–ª–µ–º—ã'}")
        
        if self.issues_found:
            print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
            print("-" * 50)
            for i, issue in enumerate(self.issues_found, 1):
                print(f"{i}. [{issue['severity'].upper()}] {issue['message']}")
        else:
            print("\n‚úì –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
            
    def fix_issues(self, auto_fix: bool = False):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        if not self.issues_found:
            print("\n‚úì –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return
            
        print(f"\nüîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues_found)}")
        
        if not auto_fix:
            response = input("\n–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? [y/N]: ")
            if response.lower() not in ['y', 'yes']:
                return
                
        fixes = {
            "free_memory": self._fix_memory,
            "free_disk_space": self._fix_disk_space,
            "free_port": self._fix_port,
            "install_package": self._fix_install_package,
            "check_network": self._fix_network,
            "create_config": self._fix_create_config,
            "install_system": self._fix_install_system,
        }
        
        for issue in self.issues_found:
            fix_func = fixes.get(issue.get("fix"))
            if fix_func:
                print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {issue['message']}")
                try:
                    if fix_func(issue):
                        print("‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        self.fixes_applied.append(issue)
                    else:
                        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")
                    
    def _fix_memory(self, issue: Dict) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å"""
        if self.error_handler:
            freed = self.error_handler._free_memory()
            return freed > 0
        return False
        
    def _fix_disk_space(self, issue: Dict) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"""
        if self.error_handler:
            return self.error_handler._handle_disk_space_error()
        return False
        
    def _fix_port(self, issue: Dict) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç"""
        if "data" in issue and "pid" in issue["data"]:
            try:
                proc = psutil.Process(issue["data"]["pid"])
                proc.terminate()
                return True
            except:
                pass
        return False
        
    def _fix_install_package(self, issue: Dict) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç"""
        if "data" in issue and "package" in issue["data"]:
            try:
                cmd = f"{sys.executable} -m pip install {issue['data']['package']}"
                result = subprocess.run(cmd.split(), capture_output=True)
                return result.returncode == 0
            except:
                pass
        return False
        
    def _fix_network(self, issue: Dict) -> bool:
        """–î–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ—Ç–∏"""
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —Å–µ—Ç–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å/WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: ping google.com")
        return False
        
    def _fix_create_config(self, issue: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        return False
        
    def _fix_install_system(self, issue: Dict) -> bool:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
        print("\nüí° AI Memory System –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É:")
        print("  python install.py")
        return False
        
    def generate_report_file(self, diagnostics: Dict, filename: str = None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞"""
        if not filename:
            filename = f"system_diagnostic_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
        report = {
            "timestamp": datetime.now().isoformat(),
            "diagnostics": diagnostics,
            "issues": self.issues_found,
            "fixes_applied": self.fixes_applied,
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        return filename


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='AI Memory System Doctor - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  
  # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  python system_doctor.py
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
  python system_doctor.py --fix
  
  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  python system_doctor.py --report diagnostic_report.json
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
  python system_doctor.py --check memory
  python system_doctor.py --check network
        """
    )
    
    parser.add_argument(
        '--fix', '-f',
        action='store_true',
        help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'
    )
    
    parser.add_argument(
        '--report', '-r',
        type=str,
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª'
    )
    
    parser.add_argument(
        '--check', '-c',
        choices=['system', 'resources', 'network', 'dependencies', 'installation', 'services', 'logs'],
        help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å–∏—Å—Ç–µ–º—É'
    )
    
    parser.add_argument(
        '--json',
        action='store_true',
        help='–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—Ç–æ—Ä–∞
    doctor = SystemDoctor()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    if args.check:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å–∏—Å—Ç–µ–º—É
        check_method = getattr(doctor, f"check_{args.check}")
        result = check_method()
        
        if args.json:
            print(json.dumps(result, indent=2))
        else:
            print(f"\n{args.check.upper()}:")
            print(json.dumps(result, indent=2))
    else:
        # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        diagnostics = doctor.run_diagnostics()
        
        if args.json:
            print(json.dumps({
                "diagnostics": diagnostics,
                "issues": doctor.issues_found
            }, indent=2))
        else:
            doctor.show_report(diagnostics)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if args.fix or doctor.issues_found:
                doctor.fix_issues(auto_fix=args.fix)
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if args.report:
            doctor.generate_report_file(diagnostics, args.report)
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if not args.json:
            if doctor.fixes_applied:
                print(f"\n‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(doctor.fixes_applied)}")
            
            remaining_issues = len(doctor.issues_found) - len(doctor.fixes_applied)
            if remaining_issues > 0:
                print(f"\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º: {remaining_issues}")
                print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)