#!/usr/bin/env python3
"""
Error Handler and Recovery System for AI Memory System Installer
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import psutil
import shutil
import subprocess
import socket
import time
import signal
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Callable
from dataclasses import dataclass
from datetime import datetime, timedelta
import json


@dataclass
class SystemRequirements:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    min_disk_space_gb: float = 2.0
    min_memory_mb: int = 512
    required_ports: List[int] = None
    
    def __post_init__(self):
        if self.required_ports is None:
            self.required_ports = [8000, 8080, 5000, 6333, 19530]  # API, Web, Installer, Qdrant, Milvus


class ErrorHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    
    def __init__(self, log_callback=None):
        self.log = log_callback or print
        self.requirements = SystemRequirements()
        self.recovery_attempts = {}
        self.max_recovery_attempts = 3
        
    def handle_error(self, error: Exception, context: str = "") -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"""
        error_type = type(error).__name__
        error_msg = str(error).lower()
        
        self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_type} - {error}", "ERROR")
        
        # –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
        handlers = {
            "OSError": self._handle_os_error,
            "PermissionError": self._handle_permission_error,
            "ConnectionError": self._handle_connection_error,
            "MemoryError": self._handle_memory_error,
            "subprocess.CalledProcessError": self._handle_subprocess_error,
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if "no space left" in error_msg or "disk full" in error_msg:
            return self._handle_disk_space_error()
        elif "address already in use" in error_msg or "port" in error_msg:
            return self._handle_port_conflict()
        elif "connection refused" in error_msg:
            return self._handle_connection_refused()
        elif "package not found" in error_msg or "module not found" in error_msg:
            return self._handle_missing_package(error_msg)
        elif "timeout" in error_msg:
            return self._handle_timeout_error()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        handler = handlers.get(error_type)
        if handler:
            return handler(error, context)
        
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        return self._handle_generic_error(error, context)
        
    def _handle_disk_space_error(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        self.log("\n‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!", "WARNING")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        disk_usage = shutil.disk_usage("/")
        free_gb = disk_usage.free / (1024**3)
        total_gb = disk_usage.total / (1024**3)
        used_percent = (disk_usage.used / disk_usage.total) * 100
        
        self.log(f"–°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f} GB –∏–∑ {total_gb:.1f} GB ({used_percent:.1f}% –∑–∞–Ω—è—Ç–æ)")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—á–∏—Å—Ç–∫–∏
        self.log("\nüßπ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞:")
        
        cleanable_space = 0
        
        # 1. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        log_dirs = self._find_log_directories()
        if log_dirs:
            log_size = self._calculate_directory_size(log_dirs)
            if log_size > 0:
                self.log(f"1. –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ ({self._format_size(log_size)})")
                cleanable_space += log_size
        
        # 2. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        cache_dirs = self._find_cache_directories()
        if cache_dirs:
            cache_size = self._calculate_directory_size(cache_dirs)
            if cache_size > 0:
                self.log(f"2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à ({self._format_size(cache_size)})")
                cleanable_space += cache_size
        
        # 3. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_size = self._calculate_temp_size()
        if temp_size > 0:
            self.log(f"3. –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({self._format_size(temp_size)})")
            cleanable_space += temp_size
        
        # 4. –°—Ç–∞—Ä—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        old_venvs = self._find_old_venvs()
        if old_venvs:
            venv_size = self._calculate_directory_size(old_venvs)
            if venv_size > 0:
                self.log(f"4. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ({self._format_size(venv_size)})")
                cleanable_space += venv_size
        
        if cleanable_space > 0:
            self.log(f"\nüíæ –ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –¥–æ {self._format_size(cleanable_space)}")
            
            if self._confirm("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É?"):
                freed_space = self._perform_cleanup(log_dirs, cache_dirs, old_venvs)
                self.log(f"‚úì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {self._format_size(freed_space)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–ø–µ—Ä—å –º–µ—Å—Ç–∞
                disk_usage = shutil.disk_usage("/")
                free_gb = disk_usage.free / (1024**3)
                if free_gb >= self.requirements.min_disk_space_gb:
                    self.log("‚úì –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return True
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.log("\nüìÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        self.log("1. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.log("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å")
        self.log("3. –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
        
        return False
        
    def _handle_port_conflict(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤"""
        self.log("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤!", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã
        occupied_ports = []
        for port in self.requirements.required_ports:
            if self._is_port_occupied(port):
                process = self._find_process_by_port(port)
                occupied_ports.append((port, process))
                
        if not occupied_ports:
            return True
            
        self.log("\nüîç –ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã:")
        for port, process in occupied_ports:
            if process:
                self.log(f"  –ü–æ—Ä—Ç {port}: {process['name']} (PID: {process['pid']})")
            else:
                self.log(f"  –ü–æ—Ä—Ç {port}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
                
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        self.log("\nüõ†Ô∏è  –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
        self.log("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        self.log("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Ä—Ç—ã")
        self.log("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --force —Ñ–ª–∞–≥–æ–º")
        
        if self._confirm("–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã?"):
            success = True
            for port, process in occupied_ports:
                if process and self._stop_process(process['pid']):
                    self.log(f"‚úì –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {process['name']} (PID: {process['pid']})")
                else:
                    self.log(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                    success = False
                    
            if success:
                self.log("‚úì –í—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
                
        return False
        
    def _handle_memory_error(self, error: Exception = None, context: str = "") -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏"""
        self.log("\n‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏!", "WARNING")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        self.log(f"\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
        self.log(f"  RAM: {memory.percent}% ({self._format_size(memory.used)} –∏–∑ {self._format_size(memory.total)})")
        self.log(f"  Swap: {swap.percent}% ({self._format_size(swap.used)} –∏–∑ {self._format_size(swap.total)})")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏–µ –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
        memory_hogs = self._find_memory_intensive_processes()
        if memory_hogs:
            self.log("\nüîç –ü—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏:")
            for proc in memory_hogs[:5]:
                self.log(f"  {proc['name']}: {self._format_size(proc['memory'])} ({proc['percent']:.1f}%)")
                
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
        self.log("\nüõ†Ô∏è  –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
        self.log("1. –ó–∞–∫—Ä—ã—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.log("2. –£–≤–µ–ª–∏—á–∏—Ç—å swap —Ñ–∞–π–ª")
        self.log("3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
        self.log("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --low-memory —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
        if self._confirm("–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?"):
            freed = self._free_memory()
            if freed > 0:
                self.log(f"‚úì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {self._format_size(freed)} –ø–∞–º—è—Ç–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–ø–µ—Ä—å
                memory = psutil.virtual_memory()
                if memory.available >= self.requirements.min_memory_mb * 1024 * 1024:
                    self.log("‚úì –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                    return True
                    
        return False
        
    def _handle_permission_error(self, error: Exception, context: str = "") -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        self.log("\n‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", "WARNING")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        error_msg = str(error)
        
        if "sudo" in error_msg or "root" in error_msg or "/etc" in error_msg:
            self.log("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (sudo)")
            self.log("\nüõ†Ô∏è  –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
            self.log("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å sudo: sudo python install.py")
            self.log("2. –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            self.log("3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
        elif "write" in error_msg or "read-only" in error_msg:
            self.log("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            problem_path = self._extract_path_from_error(error_msg)
            if problem_path and Path(problem_path).exists():
                self.log(f"–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {problem_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                import pwd
                stat_info = os.stat(problem_path)
                owner = pwd.getpwuid(stat_info.st_uid).pw_name
                current_user = os.getenv('USER')
                
                if owner != current_user:
                    self.log(f"–í–ª–∞–¥–µ–ª–µ—Ü: {owner}, —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")
                    
                    if self._confirm(f"–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ {current_user}?"):
                        if self._change_ownership(problem_path, current_user):
                            self.log("‚úì –ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                            return True
                            
        return False
        
    def _handle_connection_error(self, error: Exception, context: str = "") -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.log("\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not self._check_internet_connection():
            self.log("‚úó –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            self.log("\nüõ†Ô∏è  –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
            self.log("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            self.log("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
            self.log("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–ª–∞–π–Ω –ø–∞–∫–µ—Ç–æ–≤
            offline_cache = Path("installer/offline_cache")
            if offline_cache.exists():
                if self._confirm("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–ª–∞–π–Ω –∫—ç—à –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏?"):
                    os.environ['PIP_NO_INDEX'] = '1'
                    os.environ['PIP_FIND_LINKS'] = str(offline_cache)
                    self.log("‚úì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –æ—Ñ–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–∫—É")
                    return True
                    
        else:
            # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –µ—Å—Ç—å, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º
            error_msg = str(error).lower()
            
            if "timeout" in error_msg:
                self.log("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                self.log("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                self.log("- –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                self.log("- –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
                self.log("- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ firewall")
                
                if self._confirm("–£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"):
                    os.environ['PIP_DEFAULT_TIMEOUT'] = '120'
                    return True
                    
            elif "certificate" in error_msg or "ssl" in error_msg:
                self.log("–ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
                self.log("\nüõ†Ô∏è  –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
                self.log("1. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: pip install --upgrade certifi")
                self.log("2. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
                
                if self._confirm("–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL?"):
                    os.environ['PYTHONHTTPSVERIFY'] = '0'
                    os.environ['PIP_TRUSTED_HOST'] = 'pypi.org files.pythonhosted.org'
                    self.log("‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏)")
                    return True
                    
        return False
        
    def _handle_subprocess_error(self, error: Exception, context: str = "") -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        self.log("\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!", "WARNING")
        
        if hasattr(error, 'cmd'):
            self.log(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(error.cmd) if isinstance(error.cmd, list) else error.cmd}")
        if hasattr(error, 'returncode'):
            self.log(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {error.returncode}")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
        error_output = ""
        if hasattr(error, 'stderr'):
            error_output = error.stderr.decode() if isinstance(error.stderr, bytes) else str(error.stderr)
        elif hasattr(error, 'output'):
            error_output = error.output.decode() if isinstance(error.output, bytes) else str(error.output)
            
        if error_output:
            # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            if "command not found" in error_output or "not recognized" in error_output:
                missing_cmd = self._extract_command_from_error(error_output)
                self.log(f"–ö–æ–º–∞–Ω–¥–∞ '{missing_cmd}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                install_cmds = {
                    'git': {
                        'apt': 'sudo apt-get install git',
                        'yum': 'sudo yum install git',
                        'brew': 'brew install git',
                        'windows': '–°–∫–∞—á–∞–π—Ç–µ —Å https://git-scm.com/'
                    },
                    'docker': {
                        'apt': 'sudo apt-get install docker.io',
                        'yum': 'sudo yum install docker',
                        'brew': 'brew install docker',
                        'windows': '–°–∫–∞—á–∞–π—Ç–µ Docker Desktop'
                    },
                    'node': {
                        'apt': 'sudo apt-get install nodejs',
                        'yum': 'sudo yum install nodejs',
                        'brew': 'brew install node',
                        'windows': '–°–∫–∞—á–∞–π—Ç–µ —Å https://nodejs.org/'
                    }
                }
                
                if missing_cmd in install_cmds:
                    self.log(f"\nüõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {missing_cmd}:")
                    pkg_manager = self._detect_package_manager()
                    if pkg_manager in install_cmds[missing_cmd]:
                        cmd = install_cmds[missing_cmd][pkg_manager]
                        self.log(f"  {cmd}")
                        
                        if self._confirm(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {missing_cmd} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?"):
                            if self._run_command(cmd):
                                self.log(f"‚úì {missing_cmd} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                                return True
                                
        return False
        
    def _handle_timeout_error(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
        self.log("\n‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è!", "WARNING")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        self.log("–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è...")
        os.environ['PIP_DEFAULT_TIMEOUT'] = '120'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        speed = self._check_connection_speed()
        if speed and speed < 1.0:  # –ú–µ–Ω—å—à–µ 1 –ú–±–∏—Ç/—Å
            self.log(f"‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {speed:.2f} –ú–±–∏—Ç/—Å")
            self.log("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
            self.log("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            self.log("- –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
            self.log("- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
            
        return True
        
    def _handle_missing_package(self, error_msg: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        self.log("\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞–∫–µ—Ç!", "WARNING")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞
        package_name = self._extract_package_name(error_msg)
        if package_name:
            self.log(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç: {package_name}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            if self._confirm(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package_name}?"):
                if self._install_package(package_name):
                    self.log(f"‚úì –ü–∞–∫–µ—Ç {package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                    
        return False
        
    def _handle_generic_error(self, error: Exception, context: str = "") -> bool:
        """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        self.log("\n‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        error_key = f"{type(error).__name__}_{context}"
        self.recovery_attempts[error_key] = self.recovery_attempts.get(error_key, 0) + 1
        
        if self.recovery_attempts[error_key] >= self.max_recovery_attempts:
            self.log(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ({self.max_recovery_attempts})")
            return False
            
        self.log(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {self.recovery_attempts[error_key]} –∏–∑ {self.max_recovery_attempts}")
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.log("\nüõ†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        
        # 1. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.log("1. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        self._cleanup_temp_files()
        
        # 2. –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.log("2. –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        self._reset_environment()
        
        # 3. –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        self.log("3. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
        time.sleep(2)
        
        return True
        
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _find_log_directories(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ª–æ–≥–∞–º–∏"""
        log_dirs = []
        search_paths = [
            Path.home() / ".cache",
            Path("/var/log"),
            Path("/tmp"),
            Path.cwd() / "logs",
        ]
        
        for base_path in search_paths:
            if base_path.exists():
                for path in base_path.rglob("*.log"):
                    log_dirs.append(path.parent)
                    
        return list(set(log_dirs))
        
    def _find_cache_directories(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫—ç—à–µ–º"""
        cache_dirs = []
        cache_paths = [
            Path.home() / ".cache" / "pip",
            Path.home() / ".cache" / "pypoetry",
            Path.home() / ".npm",
            Path.home() / ".yarn",
            Path("/tmp") / "pip-cache",
        ]
        
        for path in cache_paths:
            if path.exists():
                cache_dirs.append(path)
                
        return cache_dirs
        
    def _find_old_venvs(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ä—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        venvs = []
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
        for base in [Path.cwd(), Path.cwd().parent]:
            for venv_name in ['venv', 'env', '.venv', 'virtualenv']:
                venv_path = base / venv_name
                if venv_path.exists() and (venv_path / 'bin' / 'python').exists():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                    age = datetime.now() - datetime.fromtimestamp(venv_path.stat().st_mtime)
                    if age > timedelta(days=30):  # –°—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
                        venvs.append(venv_path)
                        
        return venvs
        
    def _calculate_directory_size(self, directories: List[Path]) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        total_size = 0
        for directory in directories:
            if directory.exists():
                for path in directory.rglob('*'):
                    if path.is_file():
                        try:
                            total_size += path.stat().st_size
                        except:
                            pass
        return total_size
        
    def _calculate_temp_size(self) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_size = 0
        temp_dir = Path("/tmp") if os.name != 'nt' else Path(os.environ.get('TEMP', '/tmp'))
        
        if temp_dir.exists():
            for path in temp_dir.iterdir():
                try:
                    if path.is_file():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
                        age = datetime.now() - datetime.fromtimestamp(path.stat().st_mtime)
                        if age > timedelta(hours=24):  # –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                            temp_size += path.stat().st_size
                except:
                    pass
                    
        return temp_size
        
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
        
    def _confirm(self, message: str) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = input(f"{message} [y/N]: ").strip().lower()
        return response in ['y', 'yes', '–¥–∞']
        
    def _perform_cleanup(self, log_dirs: List[Path], cache_dirs: List[Path], old_venvs: List[Path]) -> int:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤"""
        freed_space = 0
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        for log_dir in log_dirs:
            try:
                for log_file in log_dir.glob("*.log"):
                    if log_file.stat().st_size > 100 * 1024 * 1024:  # –ë–æ–ª—å—à–µ 100MB
                        size = log_file.stat().st_size
                        log_file.unlink()
                        freed_space += size
            except:
                pass
                
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        for cache_dir in cache_dirs:
            try:
                size = self._calculate_directory_size([cache_dir])
                shutil.rmtree(cache_dir, ignore_errors=True)
                freed_space += size
            except:
                pass
                
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö venv
        for venv in old_venvs:
            try:
                size = self._calculate_directory_size([venv])
                shutil.rmtree(venv, ignore_errors=True)
                freed_space += size
            except:
                pass
                
        return freed_space
        
    def _is_port_occupied(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.bind(('', port))
            sock.close()
            return False
        except:
            return True
            
    def _find_process_by_port(self, port: int) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–Ω–∏–º–∞—é—â–∏–π –ø–æ—Ä—Ç"""
        try:
            for conn in psutil.net_connections():
                if conn.laddr.port == port and conn.status == 'LISTEN':
                    try:
                        proc = psutil.Process(conn.pid)
                        return {
                            'pid': conn.pid,
                            'name': proc.name(),
                            'cmdline': ' '.join(proc.cmdline())
                        }
                    except:
                        pass
        except:
            pass
        return None
        
    def _stop_process(self, pid: int) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
        try:
            proc = psutil.Process(pid)
            proc.terminate()
            time.sleep(1)
            
            if proc.is_running():
                proc.kill()
                time.sleep(1)
                
            return not proc.is_running()
        except:
            return False
            
    def _find_memory_intensive_processes(self) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
        processes = []
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
                try:
                    memory_mb = proc.info['memory_info'].rss / (1024 * 1024)
                    memory_percent = proc.memory_percent()
                    
                    if memory_percent > 5.0:  # –ë–æ–ª—å—à–µ 5% –ø–∞–º—è—Ç–∏
                        processes.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'],
                            'memory': proc.info['memory_info'].rss,
                            'percent': memory_percent
                        })
                except:
                    pass
                    
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
            processes.sort(key=lambda x: x['memory'], reverse=True)
            
        except:
            pass
            
        return processes
        
    def _free_memory(self) -> int:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å"""
        freed = 0
        
        # 1. –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞ (Linux)
        if os.name != 'nt' and os.geteuid() == 0:
            try:
                subprocess.run(['sync'], check=True)
                subprocess.run(['sh', '-c', 'echo 3 > /proc/sys/vm/drop_caches'], check=True)
                freed += 500 * 1024 * 1024  # –ü—Ä–∏–º–µ—Ä–Ω–æ
            except:
                pass
                
        # 2. –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ Python
        import gc
        gc.collect()
        
        # 3. –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
        try:
            max_fd = os.sysconf('SC_OPEN_MAX')
            for fd in range(3, min(max_fd, 1024)):
                try:
                    os.close(fd)
                except:
                    pass
        except:
            pass
            
        return freed
        
    def _check_internet_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"""
        test_urls = [
            "https://pypi.org",
            "https://google.com",
            "https://github.com"
        ]
        
        for url in test_urls:
            try:
                import urllib.request
                urllib.request.urlopen(url, timeout=5)
                return True
            except:
                continue
                
        return False
        
    def _check_connection_speed(self) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ú–±–∏—Ç/—Å)"""
        try:
            import urllib.request
            import time
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
            url = "https://pypi.org/static/images/logo-small.svg"
            start_time = time.time()
            
            response = urllib.request.urlopen(url)
            data = response.read()
            
            elapsed = time.time() - start_time
            size_bits = len(data) * 8
            speed_bps = size_bits / elapsed
            speed_mbps = speed_bps / (1024 * 1024)
            
            return speed_mbps
        except:
            return None
            
    def _extract_path_from_error(self, error_msg: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        import re
        
        # –ò—â–µ–º –ø—É—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        path_patterns = [
            r"'([^']+)'",  # –í –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'"([^"]+)"',  # –í –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'`([^`]+)`',  # –í –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'(\S+/\S+)',  # Unix –ø—É—Ç–∏
            r'([A-Za-z]:\\[^\\]+(?:\\[^\\]+)*)',  # Windows –ø—É—Ç–∏
        ]
        
        for pattern in path_patterns:
            match = re.search(pattern, error_msg)
            if match:
                potential_path = match.group(1)
                if '/' in potential_path or '\\' in potential_path:
                    return potential_path
                    
        return None
        
    def _change_ownership(self, path: str, user: str) -> bool:
        """–ò–∑–º–µ–Ω—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            cmd = f"sudo chown -R {user}:{user} {path}"
            return self._run_command(cmd)
        except:
            return False
            
    def _detect_package_manager(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        if os.name == 'nt':
            return 'windows'
            
        managers = {
            'apt': '/usr/bin/apt-get',
            'yum': '/usr/bin/yum',
            'dnf': '/usr/bin/dnf',
            'brew': '/usr/local/bin/brew',
            'pacman': '/usr/bin/pacman',
        }
        
        for name, path in managers.items():
            if Path(path).exists():
                return name
                
        return 'unknown'
        
    def _run_command(self, cmd: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
            
    def _extract_command_from_error(self, error_msg: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        import re
        
        patterns = [
            r"command not found: (\w+)",
            r"'(\w+)' is not recognized",
            r"(\w+): command not found",
        ]
        
        for pattern in patterns:
            match = re.search(pattern, error_msg)
            if match:
                return match.group(1)
                
        return "unknown"
        
    def _install_package(self, package_name: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –ø–∞–∫–µ—Ç"""
        try:
            cmd = f"{sys.executable} -m pip install {package_name}"
            return self._run_command(cmd)
        except:
            return False
            
    def _extract_package_name(self, error_msg: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–∞–∫–µ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        import re
        
        patterns = [
            r"No module named '(\w+)'",
            r"ModuleNotFoundError: (\w+)",
            r"ImportError: (\w+)",
            r"Package '(\w+)' not found",
        ]
        
        for pattern in patterns:
            match = re.search(pattern, error_msg)
            if match:
                return match.group(1)
                
        return None
        
    def _cleanup_temp_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        temp_patterns = [
            "*.tmp",
            "*.temp",
            "*.pyc",
            "__pycache__",
            ".pytest_cache",
            ".coverage",
        ]
        
        for pattern in temp_patterns:
            for path in Path.cwd().rglob(pattern):
                try:
                    if path.is_file():
                        path.unlink()
                    elif path.is_dir():
                        shutil.rmtree(path)
                except:
                    pass
                    
    def _reset_environment(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        critical_vars = [
            'PYTHONPATH',
            'LD_LIBRARY_PATH',
            'DYLD_LIBRARY_PATH',
            'PIP_NO_INDEX',
            'PIP_FIND_LINKS',
            'PYTHONHTTPSVERIFY',
        ]
        
        for var in critical_vars:
            if var in os.environ:
                del os.environ[var]


class SafeInstaller:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self, base_installer, log_callback=None):
        self.base_installer = base_installer
        self.error_handler = ErrorHandler(log_callback)
        self.install_attempts = 0
        self.max_attempts = 3
        
    def safe_install(self, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        while self.install_attempts < self.max_attempts:
            self.install_attempts += 1
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É
                return self.base_installer(*args, **kwargs)
                
            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if self.error_handler.handle_error(e, context="installation"):
                    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    continue
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    if self.install_attempts < self.max_attempts:
                        if self._confirm_retry():
                            continue
                    
                    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
                    self._handle_final_error(e)
                    raise
                    
    def _confirm_retry(self) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        remaining = self.max_attempts - self.install_attempts
        response = input(f"\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}) [y/N]: ")
        return response.strip().lower() in ['y', 'yes', '–¥–∞']
        
    def _handle_final_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏"""
        print("\n" + "=" * 60)
        print("‚ùå –£–°–¢–ê–ù–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")
        print("=" * 60)
        print(f"\n–û—à–∏–±–∫–∞: {type(error).__name__}: {str(error)}")
        print("\nüìã –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ installer/logs/")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã: python installer/cli_installer.py --check")
        print("3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é —Å –ª–æ–≥–∞–º–∏ –æ—à–∏–±–∫–∏")
        print("4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞")
        print("\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  make check     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("  make clean     # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("  make install   # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def safe_execution(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    def wrapper(*args, **kwargs):
        error_handler = ErrorHandler()
        attempts = 0
        max_attempts = 3
        
        while attempts < max_attempts:
            attempts += 1
            
            try:
                return func(*args, **kwargs)
            except Exception as e:
                if error_handler.handle_error(e, context=func.__name__):
                    continue
                else:
                    if attempts < max_attempts:
                        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                    raise
                    
    return wrapper