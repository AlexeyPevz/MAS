#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Root-MAS System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import sys
import os
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'

def print_status(status, message):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞"""
    if status == "ok":
        print(f"{GREEN}‚úÖ{RESET} {message}")
    elif status == "error":
        print(f"{RED}‚ùå{RESET} {message}")
    elif status == "warning":
        print(f"{YELLOW}‚ö†Ô∏è{RESET} {message}")
    elif status == "info":
        print(f"{BLUE}‚ÑπÔ∏è{RESET} {message}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version < (3, 9):
        print_status("error", f"Python {version.major}.{version.minor} - —Ç—Ä–µ–±—É–µ—Ç—Å—è 3.9+")
        return False
    elif version >= (3, 14):
        print_status("error", f"Python {version.major}.{version.minor} - AutoGen –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3.14+")
        return False
    else:
        print_status("ok", f"Python {version.major}.{version.minor}.{version.micro}")
        return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    env_path = Path(".env")
    env_example = Path(".env.example")
    
    if env_path.exists():
        print_status("ok", ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
        with open(env_path, 'r') as f:
            content = f.read()
            if "your-openrouter-api-key-here" in content or "OPENROUTER_API_KEY=" not in content:
                print_status("warning", "OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
                return False
        return True
    elif env_example.exists():
        print_status("warning", ".env –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å .env.example")
        print_status("info", "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ: cp .env.example .env")
        return False
    else:
        print_status("error", "–ù–µ—Ç .env –∏ .env.example —Ñ–∞–π–ª–æ–≤")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    imports_ok = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AutoGen
    try:
        import autogen_agentchat
        import autogen_ext
        import autogen_core
        print_status("ok", "AutoGen v0.4+ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError as e:
        print_status("error", f"AutoGen –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        print_status("info", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install autogen-agentchat>=0.5.1 autogen-ext[openai]>=0.5.5")
        imports_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    critical_packages = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn"),
        ("aiohttp", "aiohttp"),
        ("redis", "Redis client"),
        ("chromadb", "ChromaDB"),
    ]
    
    for package, name in critical_packages:
        try:
            __import__(package)
            print_status("ok", f"{name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print_status("warning", f"{name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            imports_ok = False
    
    return imports_ok

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    required_dirs = ["agents", "config", "prompts", "tools", "api"]
    required_files = ["run_system.py", "requirements.txt"]
    
    all_ok = True
    
    for dir_name in required_dirs:
        if Path(dir_name).is_dir():
            print_status("ok", f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print_status("error", f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_ok = False
    
    for file_name in required_files:
        if Path(file_name).is_file():
            print_status("ok", f"–§–∞–π–ª {file_name} –Ω–∞–π–¥–µ–Ω")
        else:
            print_status("error", f"–§–∞–π–ª {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_ok = False
    
    return all_ok

def check_agents():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        from agents.base import BaseAgent
        agent = BaseAgent("test", model="gpt-3.5-turbo", tier="cheap")
        print_status("ok", "–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        return True
    except Exception as e:
        print_status("error", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print(f"\n{BLUE}üîç Root-MAS System Quick Test{RESET}\n")
    
    results = []
    
    # 1. Python –≤–µ—Ä—Å–∏—è
    print(f"{BLUE}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python:{RESET}")
    results.append(check_python_version())
    
    # 2. –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\n{BLUE}2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:{RESET}")
    results.append(check_env_file())
    
    # 3. –ò–º–ø–æ—Ä—Ç—ã
    print(f"\n{BLUE}3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:{RESET}")
    results.append(check_imports())
    
    # 4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\n{BLUE}4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:{RESET}")
    results.append(check_project_structure())
    
    # 5. –ê–≥–µ–Ω—Ç—ã
    print(f"\n{BLUE}5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤:{RESET}")
    results.append(check_agents())
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{BLUE}‚ïê‚ïê‚ïê –ò–¢–û–ì–ò ‚ïê‚ïê‚ïê{RESET}")
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print_status("ok", f"–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})")
        print(f"\n{GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!{RESET}")
        print(f"\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: {BLUE}python run_system.py{RESET}")
    else:
        print_status("error", f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
        print(f"\n{YELLOW}‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º{RESET}")
        
        if not results[2]:  # –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            print(f"\n{BLUE}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å:{RESET}")
            print("  python install_and_run.py")
        
        sys.exit(1)

if __name__ == "__main__":
    main()