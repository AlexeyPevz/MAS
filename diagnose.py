#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–ø—É—Å–∫–æ–º"""

import sys
import importlib.util
import traceback

def test_import(module_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è"""
    print(f"\nTesting import: {module_name}")
    try:
        spec = importlib.util.find_spec(module_name)
        if spec is None:
            print(f"  ‚ùå Module not found: {module_name}")
            return False
            
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        module = importlib.import_module(module_name)
        print(f"  ‚úÖ Successfully imported: {module_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if hasattr(module, '__file__'):
            with open(module.__file__, 'r') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            issues = []
            
            # asyncio.run –≤–Ω–µ if __name__
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if 'asyncio.run(' in line and not any('if __name__' in lines[max(0, i-10):i] for i in range(i)):
                    issues.append(f"Line {i+1}: asyncio.run() outside if __name__")
                    
            # –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
            import_exec_patterns = [
                'print(',
                'logger.',
                '.initialize()',
                '.start()',
                '.run()'
            ]
            
            in_function = False
            indent_level = 0
            
            for i, line in enumerate(lines):
                stripped = line.strip()
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã
                if stripped.startswith('def ') or stripped.startswith('class '):
                    in_function = True
                elif not line.startswith(' ') and not line.startswith('\t') and line.strip():
                    in_function = False
                    
                # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                if not in_function and not stripped.startswith('#'):
                    for pattern in import_exec_patterns:
                        if pattern in stripped and 'if __name__' not in content[max(0, i-100):i]:
                            issues.append(f"Line {i+1}: Possible execution on import: {stripped[:50]}...")
                            
            if issues:
                print(f"  ‚ö†Ô∏è  Found potential issues:")
                for issue in issues[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"     - {issue}")
                    
        return True
        
    except Exception as e:
        print(f"  ‚ùå Import failed: {type(e).__name__}: {str(e)[:100]}")
        if '--verbose' in sys.argv:
            traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç Root-MAS Import Diagnostics")
    print("=" * 50)
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    modules_to_test = [
        # –ë–∞–∑–æ–≤—ã–µ
        "fastapi",
        "pydantic",
        "redis",
        
        # Memory
        "memory.in_memory_store",
        "memory.redis_store",
        "memory.chroma_store",
        
        # Agents  
        "agents.base",
        "agents.core_agents",
        "agents.specialized_agents",
        "agents.lazy_loader",
        
        # Tools
        "tools.smart_groupchat",
        "tools.semantic_llm_cache",
        "tools.modern_telegram_bot",
        "tools.streaming_telegram_bot",
        "tools.teams_groupchat_manager",
        
        # API
        "api.main",
        "api.integration",
        "api.models",
        
        # Configs
        "config.config_loader",
    ]
    
    failed = []
    passed = []
    
    for module in modules_to_test:
        if test_import(module):
            passed.append(module)
        else:
            failed.append(module)
            
    print("\n" + "=" * 50)
    print("üìä Summary:")
    print(f"‚úÖ Passed: {len(passed)}")
    print(f"‚ùå Failed: {len(failed)}")
    
    if failed:
        print(f"\n‚ùå Failed modules:")
        for module in failed:
            print(f"   - {module}")
            
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ api.main
    if "api.main" in failed:
        print("\n‚ö†Ô∏è  API module failed to import. This is critical!")
        print("Try running: python3 safe_start.py")
    
    return len(failed)

if __name__ == "__main__":
    sys.exit(main())