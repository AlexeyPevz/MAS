"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π MAS —Å–∏—Å—Ç–µ–º–æ–π
"""

import logging
import os
from typing import Optional

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from core.factory import ComponentFactory
from core.interfaces import IMessageProcessor


logger = logging.getLogger(__name__)


class MASAPIIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API —Å MAS —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.mas_system: Optional[object] = None
        self.mas_manager: Optional[IMessageProcessor] = None
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API"""
        if self._initialized:
            return self.mas_manager
            
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Teams API
            use_teams = os.getenv("USE_TEAMS_API", "true").lower() == "true"
            
            if use_teams:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Teams manager –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    import importlib.util
                    spec = importlib.util.find_spec("tools.teams_groupchat_manager")
                    if spec is not None:
                        teams_module = importlib.import_module("tools.teams_groupchat_manager")
                        if hasattr(teams_module, 'TEAMS_API_AVAILABLE') and teams_module.TEAMS_API_AVAILABLE:
                            logger.info("üè¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º Teams-enhanced GroupChat Manager")
                            self.mas_manager = teams_module.TeamsGroupChatManager()
                        else:
                            logger.warning("‚ö†Ô∏è Teams API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
                            self.mas_manager = ComponentFactory.create("mas_manager")
                    else:
                        logger.warning("‚ö†Ô∏è Teams manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        self.mas_manager = ComponentFactory.create("mas_manager")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Teams manager: {e}")
                    self.mas_manager = ComponentFactory.create("mas_manager")
            else:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
                self.mas_manager = ComponentFactory.create("mas_manager")
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ initialize
            if hasattr(self.mas_manager, 'initialize'):
                await self.mas_manager.initialize()
            
            self._initialized = True
            logger.info("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è API")
            
            return self.mas_manager
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MAS –¥–ª—è API: {e}")
            raise
    
    async def process_message(self, message: str, user_id: str = "api_user") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MAS"""
        if not self._initialized or not self.mas_manager:
            await self.initialize()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            response = await self.mas_manager.process_message(message, user_id)
            return response or "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–∞–º–∏"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MAS: {e}")
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
    
    def get_agent_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self._initialized or not self.mas_manager:
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            return self.mas_manager.get_agent_status()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return {}
    
    def get_system_metrics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if not self._initialized or not self.mas_manager:
            return {}
        
        try:
            return self.mas_manager.get_system_metrics()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {}
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self.mas_manager, 'cleanup'):
                await self.mas_manager.cleanup()
            
            self._initialized = False
            logger.info("‚úÖ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
mas_integration = MASAPIIntegration()