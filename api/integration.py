"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π MAS —Å–∏—Å—Ç–µ–º–æ–π
"""

import logging
from typing import Optional

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from tools.smart_groupchat import SmartGroupChatManager


logger = logging.getLogger(__name__)


class MASAPIIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API —Å MAS —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.mas_system: Optional[object] = None
        self.mas_manager: Optional[SmartGroupChatManager] = None
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API"""
        if self._initialized:
            return self.mas_manager
            
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API...")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            from tools.smart_groupchat import SmartGroupChatManager
            self.mas_manager = SmartGroupChatManager()
            await self.mas_manager.initialize()
            
            self._initialized = True
            logger.info("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è API")
            
            return self.mas_manager
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MAS –¥–ª—è API: {e}")
            raise
    
    async def process_message(self, message: str, user_id: str = "api_user") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MAS"""
        if not self._initialized or not self.mas_manager:
            await self.initialize()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Communicator Agent
            response = await self.mas_manager.process_user_message(message)
            return response or "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–∞–º–∏"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MAS: {e}")
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
    
    def get_agent_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self._initialized or not self.mas_manager:
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            return self.mas_manager.get_agent_statistics()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return {}
    
    def get_system_metrics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if not self._initialized or not self.mas_manager:
            return {}
        
        try:
            return self.mas_manager.get_system_status()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {}
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.mas_system:
                await self.mas_system._cleanup()
            
            self._initialized = False
            logger.info("‚úÖ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
mas_integration = MASAPIIntegration()