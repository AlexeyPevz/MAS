"""
Root-MAS API Server
–ï–¥–∏–Ω—ã–π API –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: PWA, Telegram Bot, Mini App
"""

import os
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç—ã MAS —Å–∏—Å—Ç–µ–º—ã
from tools.smart_groupchat import SmartGroupChatManager
from tools.modern_telegram_bot import ModernTelegramBot
from config.config_loader import load_config
from api.integration import mas_integration


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = "api_user"
    metadata: Optional[Dict[str, Any]] = {}


class ChatResponse(BaseModel):
    response: str
    timestamp: datetime
    agent: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = {}


class AgentStatus(BaseModel):
    name: str
    status: str
    last_activity: Optional[datetime] = None
    message_count: int = 0


class SystemMetrics(BaseModel):
    total_messages: int
    active_agents: int
    uptime: str
    memory_usage: Optional[str] = None
    cpu_usage: Optional[float] = None


class ProjectInfo(BaseModel):
    id: str
    name: str
    description: str
    status: str
    created_at: datetime
    updated_at: datetime


# Global state
class APIState:
    def __init__(self):
        self.mas_manager: Optional[SmartGroupChatManager] = None
        self.telegram_bot: Optional[ModernTelegramBot] = None
        self.websocket_connections: List[WebSocket] = []
        self.start_time = datetime.now()
        self.message_history: List[Dict[str, Any]] = []


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
api_state = APIState()
logger = logging.getLogger(__name__)


# Lifecycle management
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º API"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Root-MAS API...")
    
    # Startup
    await initialize_mas_system()
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Root-MAS API...")
    await cleanup_resources()


# FastAPI app
app = FastAPI(
    title="Root-MAS API",
    description="–ï–¥–∏–Ω—ã–π API –¥–ª—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


async def initialize_mas_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MAS —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        api_state.mas_manager = await mas_integration.initialize()
        
        logger.info("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MAS: {e}")
        raise


async def cleanup_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for ws in api_state.websocket_connections:
            try:
                await ws.close()
            except:
                pass
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        if api_state.telegram_bot:
            await api_state.telegram_bot.shutdown()
        
        # –û—á–∏—Å—Ç–∫–∞ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await mas_integration.cleanup()
            
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def get_mas_manager():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MAS –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if not api_state.mas_manager:
        raise HTTPException(status_code=503, detail="MAS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return api_state.mas_manager


# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Root-MAS API",
        "version": "1.0.0",
        "status": "running",
        "uptime": str(datetime.now() - api_state.start_time)
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(),
        "components": {
            "mas_system": api_state.mas_manager is not None,
            "telegram_bot": api_state.telegram_bot is not None,
            "websockets": len(api_state.websocket_connections)
        }
    }


# =============================================================================
# CHAT API - –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å Communicator Agent
# =============================================================================

@app.post("/api/v1/chat/message", response_model=ChatResponse)
async def send_message(
    chat_msg: ChatMessage,
    mas_manager = Depends(get_mas_manager)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MAS —á–µ—Ä–µ–∑ Communicator Agent"""
    try:
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat_msg.message[:100]}...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ MAS
        if mas_manager:
            response = await mas_manager.process_user_message(chat_msg.message)
        else:
            # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ MAS –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            response = f"Echo: {chat_msg.message}"
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        chat_response = ChatResponse(
            response=response,
            timestamp=datetime.now(),
            agent="communicator",
            metadata={"user_id": chat_msg.user_id}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        api_state.message_history.append({
            "timestamp": chat_response.timestamp,
            "user_message": chat_msg.message,
            "agent_response": response,
            "user_id": chat_msg.user_id
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
        await broadcast_to_websockets({
            "type": "new_message",
            "data": chat_response.dict()
        })
        
        return chat_response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/chat/history")
async def get_chat_history(limit: int = 50, offset: int = 0):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        total = len(api_state.message_history)
        history = api_state.message_history[offset:offset + limit]
        
        return {
            "total": total,
            "limit": limit,
            "offset": offset,
            "messages": history
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# METRICS API - –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# =============================================================================

@app.get("/api/v1/metrics/dashboard", response_model=SystemMetrics)
async def get_dashboard_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        import psutil
        
        uptime = str(datetime.now() - api_state.start_time)
        memory = f"{psutil.virtual_memory().percent:.1f}%"
        cpu = psutil.cpu_percent(interval=1)
        
        return SystemMetrics(
            total_messages=len(api_state.message_history),
            active_agents=12 if api_state.mas_manager else 0,  # Placeholder
            uptime=uptime,
            memory_usage=memory,
            cpu_usage=cpu
        )
        
    except ImportError:
        # Fallback –µ—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        return SystemMetrics(
            total_messages=len(api_state.message_history),
            active_agents=12 if api_state.mas_manager else 0,
            uptime=str(datetime.now() - api_state.start_time)
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/agents/status")
async def get_agents_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        agents = [
            AgentStatus(name="meta", status="active", message_count=15),
            AgentStatus(name="communicator", status="active", message_count=32),
            AgentStatus(name="researcher", status="idle", message_count=8),
            AgentStatus(name="coordination", status="active", message_count=12),
        ]
        
        return {"agents": agents, "total": len(agents)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# PROJECTS API - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
# =============================================================================

@app.get("/api/v1/projects")
async def get_projects():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        projects = [
            ProjectInfo(
                id="proj_1",
                name="Root-MAS Development",
                description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                status="active",
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
        ]
        
        return {"projects": projects, "total": len(projects)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# LOGS API - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
# =============================================================================

@app.get("/api/v1/logs")
async def get_logs(level: str = "INFO", limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤
        logs = [
            {
                "timestamp": datetime.now(),
                "level": "INFO",
                "message": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "component": "api"
            }
        ]
        
        return {"logs": logs, "total": len(logs)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# WEBSOCKET –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# =============================================================================

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    await websocket.accept()
    api_state.websocket_connections.append(websocket)
    
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            logger.info(f"üîå WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
            
            # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            if data == "ping":
                await websocket.send_text("pong")
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
    finally:
        if websocket in api_state.websocket_connections:
            api_state.websocket_connections.remove(websocket)


async def broadcast_to_websockets(message: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if not api_state.websocket_connections:
        return
        
    import json
    message_text = json.dumps(message, default=str)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    disconnected = []
    
    for ws in api_state.websocket_connections:
        try:
            await ws.send_text(message_text)
        except:
            disconnected.append(ws)
    
    # –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for ws in disconnected:
        api_state.websocket_connections.remove(ws)


# =============================================================================
# AUTOGEN STUDIO PROXY - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Studio
# =============================================================================

@app.get("/api/v1/studio/logs")
async def get_studio_logs():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è AutoGen Studio –ª–æ–≥–æ–≤"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ AutoGen Studio
        # –∏–ª–∏ —á–∏—Ç–∞—Ç—å –ª–æ–≥–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–æ–≤
        return {"message": "Studio logs integration - TODO"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Studio –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "api.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )