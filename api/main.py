"""
Root-MAS API Server
–ï–¥–∏–Ω—ã–π API –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: PWA, Telegram Bot, Mini App
"""

import os
import asyncio
import logging
import time
import json
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
from contextlib import asynccontextmanager
from pathlib import Path

import httpx

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, PlainTextResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç—ã MAS —Å–∏—Å—Ç–µ–º—ã
from tools.smart_groupchat import SmartGroupChatManager
from tools.modern_telegram_bot import ModernTelegramBot
from config.config_loader import load_config
from api.integration import mas_integration
from tools import studio_logger
from api.security import rate_limit_dependency, require_permission, Role

# Import federation
try:
    from tools.federated_learning import federation_hub
    FEDERATION_ENABLED = True
except ImportError:
    FEDERATION_ENABLED = False


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = "api_user"
    metadata: Optional[Dict[str, Any]] = {}


class ChatResponse(BaseModel):
    response: str
    timestamp: float
    agent: Optional[str] = None
    flow_id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = {}


class AgentStatus(BaseModel):
    name: str
    status: str
    last_activity: Optional[datetime] = None
    message_count: int = 0


class SystemMetrics(BaseModel):
    total_messages: int
    active_agents: int
    uptime: str
    memory_usage: Optional[str] = None
    cpu_usage: Optional[float] = None


class ProjectInfo(BaseModel):
    id: str
    name: str
    description: str
    status: str
    created_at: datetime
    updated_at: datetime


# –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
class AgentThought(BaseModel):
    agent_id: str
    agent_name: str
    message: str
    thought_type: str  # "receiving", "thinking", "responding", "forwarding"
    timestamp: float
    duration_ms: Optional[int] = None
    target_agent: Optional[str] = None

class AgentProfile(BaseModel):
    agent_id: str
    name: str
    role: str
    avatar_url: str
    description: str
    capabilities: List[str]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤
CONFIG = load_config()
AGENTS_CONFIG = CONFIG.get("agents", {})
AGENT_PROFILES = [
    AgentProfile(
        agent_id=name,
        name=cfg.get("role", name),
        role=cfg.get("role", ""),
        avatar_url=cfg.get("avatar_url", ""),
        description=cfg.get("description", ""),
        capabilities=cfg.get("capabilities", []),
    )
    for name, cfg in AGENTS_CONFIG.items()
]

class MessageFlow(BaseModel):
    flow_id: str
    user_message: str
    current_agent: str
    flow_stage: str  # "user_to_communicator", "communicator_thinking", "group_chat", "agent_processing", "response_generation"
    thoughts: List[AgentThought]
    timestamp: float

class ThoughtVisualizationEvent(BaseModel):
    event_type: str  # "thought_start", "thought_update", "thought_complete", "message_flow"
    flow_id: str
    data: Dict[str, Any]

# –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
class VisualizationWebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.message_flows: Dict[str, MessageFlow] = {}
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
    
    async def broadcast_thought_event(self, event: ThoughtVisualizationEvent):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.active_connections:
            event_data = event.dict()
            logger.info(f"üß† Broadcasting thought event: {event.event_type} for flow {event.flow_id}")
            
            disconnected = []
            for connection in self.active_connections:
                try:
                    await connection.send_text(json.dumps(event_data))
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")
                    disconnected.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for conn in disconnected:
                self.disconnect(conn)
    
    async def start_message_flow(self, user_message: str, user_id: str) -> str:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        flow_id = f"flow_{int(time.time() * 1000)}_{user_id}"
        
        message_flow = MessageFlow(
            flow_id=flow_id,
            user_message=user_message,
            current_agent="communicator",
            flow_stage="user_to_communicator",
            thoughts=[],
            timestamp=time.time()
        )
        
        self.message_flows[flow_id] = message_flow
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –ø–æ—Ç–æ–∫–∞
        await self.broadcast_thought_event(ThoughtVisualizationEvent(
            event_type="message_flow_start",
            flow_id=flow_id,
            data={
                "user_message": user_message,
                "user_id": user_id,
                "timestamp": time.time()
            }
        ))
        
        return flow_id
    
    async def add_agent_thought(self, flow_id: str, thought: AgentThought):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ—Ç–æ–∫"""
        if flow_id in self.message_flows:
            self.message_flows[flow_id].thoughts.append(thought)
            self.message_flows[flow_id].current_agent = thought.agent_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–π –º—ã—Å–ª–∏
            await self.broadcast_thought_event(ThoughtVisualizationEvent(
                event_type="agent_thought",
                flow_id=flow_id,
                data=thought.dict()
            ))
    
    async def update_flow_stage(self, flow_id: str, new_stage: str, current_agent: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞"""
        if flow_id in self.message_flows:
            self.message_flows[flow_id].flow_stage = new_stage
            if current_agent:
                self.message_flows[flow_id].current_agent = current_agent
            
            await self.broadcast_thought_event(ThoughtVisualizationEvent(
                event_type="flow_stage_update",
                flow_id=flow_id,
                data={
                    "new_stage": new_stage,
                    "current_agent": current_agent
                }
            ))
    
    async def complete_message_flow(self, flow_id: str, final_response: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if flow_id in self.message_flows:
            await self.broadcast_thought_event(ThoughtVisualizationEvent(
                event_type="message_flow_complete",
                flow_id=flow_id,
                data={
                    "final_response": final_response,
                    "total_thoughts": len(self.message_flows[flow_id].thoughts),
                    "duration_ms": int((time.time() - self.message_flows[flow_id].timestamp) * 1000)
                }
            ))
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Ç–æ–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            if len(self.message_flows) > 10:
                oldest_flow = min(self.message_flows.keys(), 
                                key=lambda k: self.message_flows[k].timestamp)
                del self.message_flows[oldest_flow]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
visualization_manager = VisualizationWebSocketManager()


# Global state
class APIState:
    def __init__(self):
        self.mas_manager: Optional[SmartGroupChatManager] = None
        self.telegram_bot: Optional[ModernTelegramBot] = None
        self.websocket_connections: List[WebSocket] = []
        self.start_time = datetime.now(timezone.utc)
        self.message_history: List[Dict[str, Any]] = []


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
api_state = APIState()
logger = logging.getLogger(__name__)


# Lifecycle management
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º API"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Root-MAS API...")
    
    # Startup
    await initialize_mas_system()
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Root-MAS API...")
    await cleanup_resources()


# FastAPI app
app = FastAPI(
    title="Root-MAS API",
    description="–ï–¥–∏–Ω—ã–π API –¥–ª—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—É—Ç—å –∫ PWA —Å—Ç–∞—Ç–∏–∫–µ
pwa_path = Path(__file__).resolve().parent.parent / "pwa"
if pwa_path.exists():
    app.mount("/pwa", StaticFiles(directory=str(pwa_path), html=True), name="pwa")
    from fastapi.responses import RedirectResponse
    @app.get("/app", include_in_schema=False)
    async def redirect_to_pwa():
        return RedirectResponse(url="/pwa/")


async def initialize_mas_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAS —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MAS —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        api_state.mas_manager = await mas_integration.initialize()
        
        logger.info("‚úÖ MAS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MAS: {e}")
        raise


async def cleanup_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        for ws in api_state.websocket_connections:
            try:
                await ws.close()
            except:
                pass
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        if api_state.telegram_bot:
            await api_state.telegram_bot.shutdown()
        
        # –û—á–∏—Å—Ç–∫–∞ MAS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await mas_integration.cleanup()
            
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def get_mas_manager():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MAS –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if not api_state.mas_manager:
        raise HTTPException(status_code=503, detail="MAS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return api_state.mas_manager


# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Root-MAS API",
        "version": "1.0.0",
        "status": "running",
        "uptime": str(datetime.now(timezone.utc) - api_state.start_time)
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(timezone.utc),
        "components": {
            "mas_system": api_state.mas_manager is not None,
            "telegram_bot": api_state.telegram_bot is not None,
            "websockets": len(api_state.websocket_connections)
        }
    }


# =============================================================================
# VOICE API - –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
# =============================================================================

from tools.yandex_speechkit import speechkit, process_voice_message, synthesize_response

@app.post("/api/v1/voice/stt")
async def speech_to_text(audio_file: bytes):
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"""
    try:
        if not speechkit.is_configured():
            raise HTTPException(status_code=503, detail="SpeechKit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        text = await speechkit.speech_to_text(audio_file)
        
        if text:
            return {"text": text, "status": "success"}
        else:
            return {"text": "", "status": "empty", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ STT: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/voice/tts")
async def text_to_speech(request: dict):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if not speechkit.is_configured():
            raise HTTPException(status_code=503, detail="SpeechKit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        text = request.get("text", "")
        if not text:
            raise HTTPException(status_code=400, detail="–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        audio_data = await speechkit.text_to_speech(text)
        
        if audio_data:
            from fastapi.responses import Response
            return Response(
                content=audio_data,
                media_type="audio/ogg",
                headers={"Content-Disposition": "attachment; filename=speech.ogg"}
            )
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/v1/voice/chat", response_model=ChatResponse)
async def voice_chat(audio_file: bytes, user_id: str = "voice_user"):
    """–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç: STT -> Chat -> TTS"""
    try:
        # 1. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        text = await process_voice_message(audio_file)
        if not text or text.startswith("‚ùå") or text.startswith("üîß"):
            raise HTTPException(status_code=400, detail=text or "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MAS
        chat_msg = ChatMessage(message=text, user_id=user_id)
        chat_response = await send_message(chat_msg)
        
        # 3. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        audio_data = await synthesize_response(chat_response.response)
        
        # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞—É–¥–∏–æ
        chat_response.metadata = chat_response.metadata or {}
        chat_response.metadata["has_audio"] = audio_data is not None
        chat_response.metadata["recognized_text"] = text
        
        return chat_response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ voice chat: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# CHAT API - –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å Communicator Agent
# =============================================================================

@app.post("/api/v1/chat/message", response_model=ChatResponse)
async def send_message_with_visualization(message: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        flow_id = await visualization_manager.start_message_flow(
            message.message, message.user_id
        )
        
        # –°–∏–º—É–ª—è—Ü–∏—è –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
        await simulate_agent_thinking(flow_id, message.message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MAS
        response_text = await mas_integration.process_message(message.message, message.user_id)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        await visualization_manager.complete_message_flow(flow_id, response_text)
        
        return ChatResponse(
            response=response_text,
            agent="communicator",
            timestamp=time.time(),
            flow_id=flow_id
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –§—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
async def simulate_agent_thinking(flow_id: str, user_message: str):
    """–°–∏–º—É–ª—è—Ü–∏—è –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø–∞–¥–∞–µ—Ç –∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä—É
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="communicator",
        agent_name="–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä", 
        message=f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'",
        thought_type="receiving",
        timestamp=time.time()
    ))
    
    await asyncio.sleep(0.5)
    
    # 2. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –¥—É–º–∞–µ—Ç
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="communicator",
        agent_name="–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        message="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ –∞–≥–µ–Ω—Ç–æ–≤...",
        thought_type="thinking", 
        timestamp=time.time()
    ))
    
    await asyncio.sleep(1.0)
    
    # 3. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –≥—Ä—É–ø–ø-—á–∞—Ç
    await visualization_manager.update_flow_stage(flow_id, "group_chat", "meta_agent")
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="communicator", 
        agent_name="–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        message="–ü–µ—Ä–µ–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ç–∞-–∞–≥–µ–Ω—Ç—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á",
        thought_type="forwarding",
        timestamp=time.time(),
        target_agent="meta_agent"
    ))
    
    await asyncio.sleep(0.5)
    
    # 4. –ú–µ—Ç–∞-–∞–≥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="meta_agent",
        agent_name="–ú–µ—Ç–∞-–ê–≥–µ–Ω—Ç",
        message="–ü–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É –æ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å...",
        thought_type="receiving", 
        timestamp=time.time()
    ))
    
    await asyncio.sleep(1.0)
    
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="meta_agent",
        agent_name="–ú–µ—Ç–∞-–ê–≥–µ–Ω—Ç", 
        message="–û–ø—Ä–µ–¥–µ–ª—è—é, –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
        thought_type="thinking",
        timestamp=time.time()
    ))
    
    await asyncio.sleep(1.5)
    
    # 5. –ú–µ—Ç–∞-–∞–≥–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏
    await visualization_manager.update_flow_stage(flow_id, "agent_processing")
    
    selected_agents = ["researcher", "data_analyst", "creative_writer"]
    for agent_id in selected_agents:
        agent_name = next(p.name for p in AGENT_PROFILES if p.agent_id == agent_id)
        
        await visualization_manager.add_agent_thought(flow_id, AgentThought(
            agent_id="meta_agent",
            agent_name="–ú–µ—Ç–∞-–ê–≥–µ–Ω—Ç",
            message=f"–ù–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É '{agent_name}'",
            thought_type="forwarding",
            timestamp=time.time(),
            target_agent=agent_id
        ))
        
        await asyncio.sleep(0.3)
        
        # –ê–≥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        await visualization_manager.add_agent_thought(flow_id, AgentThought(
            agent_id=agent_id,
            agent_name=agent_name,
            message=f"–ü–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É –æ—Ç –º–µ—Ç–∞-–∞–≥–µ–Ω—Ç–∞. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            thought_type="receiving",
            timestamp=time.time()
        ))
        
        await asyncio.sleep(0.8)
        
        await visualization_manager.add_agent_thought(flow_id, AgentThought(
            agent_id=agent_id,
            agent_name=agent_name,
            message=f"–í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤...",
            thought_type="thinking",
            timestamp=time.time()
        ))
        
        await asyncio.sleep(1.2)
        
        await visualization_manager.add_agent_thought(flow_id, AgentThought(
            agent_id=agent_id,
            agent_name=agent_name,
            message="–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –º–µ—Ç–∞-–∞–≥–µ–Ω—Ç—É",
            thought_type="responding",
            timestamp=time.time(),
            target_agent="meta_agent"
        ))
    
    await asyncio.sleep(1.0)
    
    # 6. –ú–µ—Ç–∞-–∞–≥–µ–Ω—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã
    await visualization_manager.update_flow_stage(flow_id, "response_generation", "meta_agent")
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="meta_agent",
        agent_name="–ú–µ—Ç–∞-–ê–≥–µ–Ω—Ç",
        message="–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...",
        thought_type="thinking",
        timestamp=time.time()
    ))
    
    await asyncio.sleep(1.5)
    
    # 7. –ú–µ—Ç–∞-–∞–≥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä—É
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="meta_agent",
        agent_name="–ú–µ—Ç–∞-–ê–≥–µ–Ω—Ç", 
        message="–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä—É",
        thought_type="responding",
        timestamp=time.time(),
        target_agent="communicator"
    ))
    
    await asyncio.sleep(0.5)
    
    # 8. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
    await visualization_manager.add_agent_thought(flow_id, AgentThought(
        agent_id="communicator",
        agent_name="–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        message="–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã. –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        thought_type="thinking", 
        timestamp=time.time()
    ))
    
    await asyncio.sleep(0.8)


@app.get("/api/v1/chat/history")
async def get_chat_history(limit: int = 50, offset: int = 0):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        total = len(api_state.message_history)
        history = api_state.message_history[offset:offset + limit]
        
        return {
            "total": total,
            "limit": limit,
            "offset": offset,
            "messages": history
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# METRICS API - –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# =============================================================================

@app.get("/api/v1/metrics/dashboard", response_model=SystemMetrics)
async def get_dashboard_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        import psutil
        
        uptime = str(datetime.now(timezone.utc) - api_state.start_time)
        memory = f"{psutil.virtual_memory().percent:.1f}%"
        cpu = psutil.cpu_percent(interval=1)
        
        return SystemMetrics(
            total_messages=len(api_state.message_history),
            active_agents=12 if api_state.mas_manager else 0,  # Placeholder
            uptime=uptime,
            memory_usage=memory,
            cpu_usage=cpu
        )
        
    except ImportError:
        # Fallback –µ—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        return SystemMetrics(
            total_messages=len(api_state.message_history),
            active_agents=12 if api_state.mas_manager else 0,
            uptime=str(datetime.now(timezone.utc) - api_state.start_time)
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/metrics", include_in_schema=False)
async def prometheus_metrics() -> PlainTextResponse:
    """–≠–∫—Å–ø–æ—Ä—Ç Prometheus –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
    try:
        from prometheus_client import REGISTRY, generate_latest, CONTENT_TYPE_LATEST  # type: ignore
    except Exception:
        raise HTTPException(status_code=404, detail="prometheus_client not installed")
    try:
        data = generate_latest(REGISTRY)
        return PlainTextResponse(content=data.decode("utf-8"), media_type=CONTENT_TYPE_LATEST)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/agents/status")
async def get_agents_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        agents = [
            AgentStatus(name="meta", status="active", message_count=15),
            AgentStatus(name="communicator", status="active", message_count=32),
            AgentStatus(name="researcher", status="idle", message_count=8),
            AgentStatus(name="coordination", status="active", message_count=12),
        ]
        
        return {"agents": agents, "total": len(agents)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# PROJECTS API - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
# =============================================================================

@app.get("/api/v1/projects")
async def get_projects():
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        projects = [
            ProjectInfo(
                id="proj_1",
                name="Root-MAS Development",
                description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                status="active",
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc)
            )
        ]
        
        return {"projects": projects, "total": len(projects)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# LOGS API - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
# =============================================================================

@app.get("/api/v1/logs")
async def get_logs(level: str = "INFO", limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –ø–æ—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤
        logs = [
            {
                "timestamp": datetime.now(timezone.utc),
                "level": "INFO",
                "message": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "component": "api"
            }
        ]
        
        return {"logs": logs, "total": len(logs)}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =============================================================================
# WEBSOCKET –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# =============================================================================

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    await websocket.accept()
    api_state.websocket_connections.append(websocket)
    
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            logger.info(f"üîå WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
            
            # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            if data == "ping":
                await websocket.send_text("pong")
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
    finally:
        if websocket in api_state.websocket_connections:
            api_state.websocket_connections.remove(websocket)


async def broadcast_to_websockets(message: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if not api_state.websocket_connections:
        return
        
    import json
    message_text = json.dumps(message, default=str)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    disconnected = []
    
    for ws in api_state.websocket_connections:
        try:
            await ws.send_text(message_text)
        except:
            disconnected.append(ws)
    
    # –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for ws in disconnected:
        api_state.websocket_connections.remove(ws)


# =============================================================================
# AUTOGEN STUDIO PROXY - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Studio
# =============================================================================

@app.get("/api/v1/studio/logs")
async def get_studio_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ AutoGen Studio."""
    try:
        studio_url = os.getenv("AUTOGEN_STUDIO_URL")

        if studio_url:
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    resp = await client.get(f"{studio_url}/api/v1/logs")
                    resp.raise_for_status()
                    return JSONResponse(status_code=resp.status_code, content=resp.json())
            except Exception as proxy_err:
                logger.error(f"‚ùå Failed to proxy Studio logs: {proxy_err}")

        log_path = studio_logger.LOG_PATH
        if not log_path.exists():
            raise HTTPException(status_code=404, detail="Studio log file not found")

        logs: List[Dict[str, Any]] = []
        with log_path.open("r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                try:
                    logs.append(json.loads(line))
                except json.JSONDecodeError:
                    logger.error(f"Invalid log line encountered: {line}")

        return JSONResponse(content=logs)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Studio –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="Failed to retrieve Studio logs")


# –ù–æ–≤—ã–µ endpoints –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

@app.get("/api/v1/agents/profiles", response_model=List[AgentProfile])
async def get_agent_profiles():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    return AGENT_PROFILES

@app.get("/api/v1/visualization/flows")
async def get_active_flows():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return list(visualization_manager.message_flows.values())

@app.websocket("/ws/visualization")
async def visualization_websocket(websocket: WebSocket):
    """WebSocket –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    await visualization_manager.connect(websocket)
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (ping/pong, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)
            data = await websocket.receive_text()
            message = json.loads(data)
            
            if message.get("type") == "ping":
                await websocket.send_text(json.dumps({"type": "pong"}))
            elif message.get("type") == "get_agent_profiles":
                await websocket.send_text(json.dumps({
                    "type": "agent_profiles", 
                    "data": [profile.dict() for profile in AGENT_PROFILES]
                }))
    except WebSocketDisconnect:
        visualization_manager.disconnect(websocket)


# Add global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Global exception handler with proper logging"""
    logger.error(f"Unhandled exception: {exc}", exc_info=True)
    
    # Don't expose internal errors in production
    if os.getenv('DEBUG', '').lower() == 'true':
        detail = str(exc)
    else:
        detail = "Internal server error"
    
    return JSONResponse(
        status_code=500,
        content={"detail": detail, "type": type(exc).__name__}
    )


# Federation endpoints
if FEDERATION_ENABLED:
    @app.get("/api/v1/federation/status",
             dependencies=[Depends(rate_limit_dependency)])
    async def get_federation_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏"""
        return federation_hub.get_federation_status()
    
    @app.post("/api/v1/federation/join",
              dependencies=[Depends(rate_limit_dependency)])
    async def join_federation(hub_endpoint: str, specialization: List[str]):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏"""
        success = await federation_hub.join_federation(hub_endpoint, specialization)
        return {"success": success}
    
    @app.post("/api/v1/federation/sync",
              dependencies=[Depends(rate_limit_dependency)])
    async def sync_federation():
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ñ–µ–¥–µ—Ä–∞—Ü–∏–µ–π"""
        stats = await federation_hub.sync_with_federation()
        return stats
    
    @app.post("/federation/receive_knowledge")
    async def receive_knowledge(packet: Dict[str, Any]):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞"""
        # Store in cache
        federation_hub.knowledge_cache[packet["packet_id"]] = packet
        return {"status": "received"}
    
    @app.post("/federation/request_knowledge")
    async def handle_knowledge_request(request: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∑–Ω–∞–Ω–∏–π –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞"""
        # Prepare knowledge packets based on request
        packets = federation_hub.prepare_knowledge_for_sharing(
            request.get("knowledge_domain", "general")
        )
        return [p.__dict__ for p in packets[:10]]  # Limit response


if __name__ == "__main__":
    import uvicorn
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "api.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )