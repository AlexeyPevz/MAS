#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ AutoGen v0.4
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from agents.core_agents import create_agents
from config.config_loader import load_config


def test_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("=== –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ ===")
    try:
        config = load_config()
        agents_config = config.get("agents", {})
        
        agents = create_agents(agents_config)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
        for name, agent in agents.items():
            print(f"  - {name}: {type(agent).__name__}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False


def test_generate_reply():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ generate_reply"""
    print("\n=== –¢–µ—Å—Ç 2: –ú–µ—Ç–æ–¥ generate_reply ===")
    try:
        from agents.base import BaseAgent
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        agent = BaseAgent("test_agent", model="gpt-3.5-turbo", tier="cheap")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = [{"content": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "name": "user"}]
        
        # –í—ã–∑—ã–≤–∞–µ–º generate_reply (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        response = agent.generate_reply(messages)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:50]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ generate_reply: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_async_interaction():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    print("\n=== –¢–µ—Å—Ç 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ===")
    try:
        from agents.base import BaseAgent
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = BaseAgent("async_test", model="gpt-3.5-turbo", tier="cheap")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = [{"content": "–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞", "name": "user"}]
        
        # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        response = await agent.generate_reply_async(messages)
        print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response[:50]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ async –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
        return False


def test_smart_groupchat():
    """–¢–µ—Å—Ç SmartGroupChatManager"""
    print("\n=== –¢–µ—Å—Ç 4: SmartGroupChatManager ===")
    try:
        from tools.smart_groupchat import SmartGroupChatManager
        
        manager = SmartGroupChatManager()
        print("‚úÖ SmartGroupChatManager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ manager –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        asyncio.run(manager.initialize())
        print("‚úÖ Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SmartGroupChatManager: {e}")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ AutoGen v0.4\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ö†Ô∏è  OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    results = []
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", test_agent_creation()))
    
    # –¢–µ—Å—Ç 2: generate_reply
    results.append(("generate_reply", test_generate_reply()))
    
    # –¢–µ—Å—Ç 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    result = await test_async_interaction()
    results.append(("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", result))
    
    # –¢–µ—Å—Ç 4: SmartGroupChatManager
    results.append(("SmartGroupChatManager", test_smart_groupchat()))
    
    # –ò—Ç–æ–≥–∏
    print("\n=== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}, –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")


if __name__ == "__main__":
    asyncio.run(main())