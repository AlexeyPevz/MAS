"""
–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è real-time –æ—Ç–≤–µ—Ç–æ–≤ –≤ Root-MAS
"""
import asyncio
from typing import AsyncIterator, Dict, Any
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.ui import Console
from autogen_agentchat.messages import TextMessage, StopMessage
from autogen_core import CancellationToken
from fastapi import FastAPI, WebSocket
from fastapi.responses import StreamingResponse
import json

class StreamingAgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.agents = {}
        self.setup_agents()
    
    def setup_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming"""
        from autogen_ext.models.openai import OpenAIChatCompletionClient
        
        # –ö–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming
        model_client = OpenAIChatCompletionClient(
            model="gpt-4o-mini",
            api_key="your-key",
            base_url="https://openrouter.ai/api/v1",
            # –í–∞–∂–Ω–æ: –≤–∫–ª—é—á–∞–µ–º streaming
            stream=True
        )
        
        self.agents["assistant"] = AssistantAgent(
            name="assistant",
            model_client=model_client,
            system_message="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
        )
    
    async def stream_response(
        self, 
        message: str, 
        user_id: str
    ) -> AsyncIterator[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è streaming
        team = RoundRobinGroupChat(
            [self.agents["assistant"]], 
            max_turns=1
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º streaming
        stream = team.run_stream(task=message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
        async for message in stream:
            if hasattr(message, 'content'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                yield message.content
            
            # –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if hasattr(message, 'metadata'):
                yield f"\n[META]: {json.dumps(message.metadata)}\n"

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å streaming
app = FastAPI()
streaming_manager = StreamingAgentManager()

@app.get("/api/v1/chat/stream")
async def stream_chat(message: str, user_id: str):
    """Endpoint –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    async def generate():
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è SSE (Server-Sent Events)"""
        async for chunk in streaming_manager.stream_response(message, user_id):
            # –§–æ—Ä–º–∞—Ç SSE
            yield f"data: {json.dumps({'chunk': chunk})}\n\n"
        
        # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        yield f"data: {json.dumps({'done': True})}\n\n"
    
    return StreamingResponse(
        generate(),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "X-Accel-Buffering": "no",  # –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é nginx
        }
    )

@app.websocket("/ws/stream")
async def websocket_stream(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è streaming"""
    await websocket.accept()
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data = await websocket.receive_json()
            message = data.get("message", "")
            user_id = data.get("user_id", "")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await websocket.send_json({
                "type": "start",
                "message_id": data.get("message_id")
            })
            
            # –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç
            async for chunk in streaming_manager.stream_response(message, user_id):
                await websocket.send_json({
                    "type": "chunk",
                    "content": chunk,
                    "message_id": data.get("message_id")
                })
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                await asyncio.sleep(0.01)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await websocket.send_json({
                "type": "end",
                "message_id": data.get("message_id")
            })
            
    except Exception as e:
        await websocket.close(code=1000, reason=str(e))

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ
from telegram import Update
from telegram.ext import ContextTypes

async def stream_to_telegram(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE,
    message: str
):
    """–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    chat_id = update.effective_chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await context.bot.send_message(
        chat_id=chat_id,
        text="üí≠ –î—É–º–∞—é..."
    )
    
    # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    buffer = ""
    last_update_time = asyncio.get_event_loop().time()
    
    async for chunk in streaming_manager.stream_response(
        message, 
        str(chat_id)
    ):
        buffer += chunk
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ 100 —Å–∏–º–≤–æ–ª–æ–≤
        current_time = asyncio.get_event_loop().time()
        if (current_time - last_update_time > 0.5 or 
            len(buffer) > 100):
            
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=sent_message.message_id,
                    text=buffer + "‚ñå"  # –ö—É—Ä—Å–æ—Ä –ø–µ—á–∞—Ç–∏
                )
                last_update_time = current_time
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ rate limit
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=sent_message.message_id,
        text=buffer
    )

# –ü—Ä–∏–º–µ—Ä —Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º streaming
class InterruptibleStreamingManager(StreamingAgentManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.cancellation_tokens: Dict[str, CancellationToken] = {}
    
    async def stream_with_interruption(
        self, 
        message: str, 
        session_id: str
    ) -> AsyncIterator[str]:
        """Streaming —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
        token = CancellationToken()
        self.cancellation_tokens[session_id] = token
        
        try:
            team = RoundRobinGroupChat(
                [self.agents["assistant"]], 
                max_turns=1
            )
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ run_stream
            stream = team.run_stream(
                task=message,
                cancellation_token=token
            )
            
            async for chunk in stream:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
                if token.is_cancelled():
                    yield "\n[–ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú]"
                    break
                    
                yield chunk.content if hasattr(chunk, 'content') else str(chunk)
                
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
            self.cancellation_tokens.pop(session_id, None)
    
    def interrupt_session(self, session_id: str):
        """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        if session_id in self.cancellation_tokens:
            self.cancellation_tokens[session_id].cancel()
            return True
        return False