#!/usr/bin/env python3
"""
gemini_demo.py
==============

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Gemini CLI –≤ MAC —Å–∏—Å—Ç–µ–º–µ.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –∫–∞–∫ –∞–≥–µ–Ω—Ç–∞.
"""

import asyncio
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
import sys
sys.path.append(str(Path(__file__).parent.parent))

from tools.gemini_cli import get_gemini_cli
from tools.gemini_tool import create_gemini_tools
from agents.gemini_assistant import create_gemini_assistant
from tools.logging_setup import setup_logging


async def demo_direct_cli():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini CLI."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini CLI ===\n")
    
    gemini = get_gemini_cli()
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    print("1. –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini:")
    result = await gemini.execute("Explain what is a Multi-Agent System in 3 sentences")
    if result["success"]:
        print(f"–û—Ç–≤–µ—Ç: {result['response'][:200]}...")
    else:
        print(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    print("\n2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã:")
    if Path("run_system.py").exists():
        result = await gemini.analyze_code("run_system.py", "general")
        if result["success"]:
            print(f"–ê–Ω–∞–ª–∏–∑: {result['response'][:300]}...")
    
    # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å Google Search
    print("\n3. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º—ã:")
    result = await gemini.research("Latest developments in Multi-Agent Systems 2025")
    if result["success"]:
        print(f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {result['response'][:300]}...")


def demo_as_tool():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Gemini –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ===\n")
    
    tools = create_gemini_tools()
    
    # –ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º
    print("1. –ü–æ–º–æ—â—å —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞:")
    result = tools["gemini_code_assist"](
        "Write a Python function to manage agent communication in a multi-agent system"
    )
    print(f"–ö–æ–¥: {result[:400]}...")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤:")
    if Path("tools/gemini_cli.py").exists():
        result = tools["gemini_generate_tests"]("tools/gemini_cli.py")
        print(f"–¢–µ—Å—Ç—ã: {result[:400]}...")
    
    # –û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏
    print("\n3. –ü–æ–º–æ—â—å —Å –æ—Ç–ª–∞–¥–∫–æ–π:")
    error = "AttributeError: 'NoneType' object has no attribute 'execute'"
    result = tools["gemini_debug_error"](error, ["tools/gemini_cli.py"])
    print(f"–†–µ—à–µ–Ω–∏–µ: {result[:400]}...")


async def demo_as_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ Gemini."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Gemini Assistant –∫–∞–∫ –∞–≥–µ–Ω—Ç–∞ ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    gemini_agent = create_gemini_assistant()
    
    print(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {gemini_agent.name}")
    print(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {gemini_agent.system_message[:200]}...")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ AutoGen GroupChat
    # –ó–¥–µ—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞:")
    from agents.gemini_assistant import GEMINI_ASSISTANT_CONFIG
    for capability in GEMINI_ASSISTANT_CONFIG["capabilities"]:
        print(f"  - {capability}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Gemini CLI –≤ MAC —Å–∏—Å—Ç–µ–º—É")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Gemini CLI
    import subprocess
    try:
        result = subprocess.run(["gemini", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Gemini CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        else:
            print("‚ùå Gemini CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g @google/gemini-cli")
            return
    except FileNotFoundError:
        print("‚ùå Gemini CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g @google/gemini-cli")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_direct_cli())
    demo_as_tool()
    asyncio.run(demo_as_agent())
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GEMINI_API_KEY –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç")
    print("2. –î–æ–±–∞–≤—å—Ç–µ Gemini tools –≤ –Ω—É–∂–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã")
    print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Gemini Assistant")


if __name__ == "__main__":
    main()