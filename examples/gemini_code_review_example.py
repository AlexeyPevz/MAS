#!/usr/bin/env python3
"""
gemini_code_review_example.py
=============================

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini –¥–ª—è –∫–æ–¥-—Ä–µ–≤—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from tools.gemini_tool import create_gemini_tools
import asyncio


def demo_code_review():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–¥-—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ Gemini."""
    print("\nüîç === –ö–æ–¥-—Ä–µ–≤—å—é —Å Gemini ===\n")
    
    tools = create_gemini_tools()
    
    # –ü—Ä–∏–º–µ—Ä 1: –û–±—â–µ–µ –∫–æ–¥-—Ä–µ–≤—å—é
    print("1. –û–±—â–µ–µ –∫–æ–¥-—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞:")
    if Path("tools/gemini_cli.py").exists():
        result = tools["gemini_code_review"](
            "tools/gemini_cli.py",
            ["security", "performance", "readability"]
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≤—å—é:\n{result[:500]}...\n")
    
    # –ü—Ä–∏–º–µ—Ä 2: –§–æ–∫—É—Å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("2. –†–µ–≤—å—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
    result = tools["gemini_analyze_code"](
        "api/endpoints.py",  # –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        "security"
    )
    print(f"–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n{result[:400]}...\n")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ü–æ–º–æ—â—å —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–æ–¥–∞
    print("3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    code_snippet = '''
def process_data(data):
    result = []
    for item in data:
        if item > 0:
            result.append(item * 2)
    return result
    '''
    
    result = tools["gemini_code_assist"](
        f"Improve this code for better performance and readability:\n{code_snippet}"
    )
    print(f"–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n{result[:400]}...\n")


def demo_media_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    print("\nüé® === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ —Å Gemini ===\n")
    
    tools = create_gemini_tools()
    
    # –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    print("1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã:")
    result = tools["gemini_generate_image"](
        "Technical architecture diagram of a multi-agent system with interconnected agents, message queue, and database",
        style="technical"
    )
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:300]}...\n")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UI –º–∞–∫–µ—Ç–∞
    print("2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UI –º–∞–∫–µ—Ç–∞:")
    result = tools["gemini_generate_image"](
        "Modern dark theme dashboard UI for monitoring multi-agent system performance with charts and metrics",
        style="realistic"
    )
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:300]}...\n")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–≤–∏–¥–µ–æ
    print("3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–≤–∏–¥–µ–æ:")
    result = tools["gemini_generate_video"](
        script="Show a futuristic AI system with multiple agents collaborating, data flowing between them with neon effects",
        duration=10
    )
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:300]}...\n")


def integration_scenarios():
    """–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    print("\nüîó === –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ===\n")
    
    print("""
1. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥-—Ä–µ–≤—å—é –≤ CI/CD:**
   - –ü—Ä–∏ –∫–∞–∂–¥–æ–º PR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è gemini_code_review
   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ PR
   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ merge –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö

2. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π:**
   - Agent-Builder –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
   - Gemini —Å–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–∞
   - Prompt-Builder –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

3. **–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:**
   - WebApp-Builder —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   - Gemini –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã UI –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
   - Gemini —Å–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–≤–∏–¥–µ–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

4. **–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:**
   - Coordination Agent —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥-—Ä–µ–≤—å—é
   - Budget-Manager –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–≤—å—é
   - Meta Agent –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

5. **–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞:**
   - –ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö Gemini –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–±–æ–π
   - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """)


def practical_example():
    """–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ workflow."""
    print("\nüíº === –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä workflow ===\n")
    
    tools = create_gemini_tools()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ workflow
    print("–°—Ü–µ–Ω–∞—Ä–∏–π: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º\n")
    
    # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    print("–®–∞–≥ 1: Agent-Builder —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    component_code = tools["gemini_code_assist"](
        "Create a React component for real-time agent status monitoring with TypeScript"
    )
    print(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {len(component_code)} —Å–∏–º–≤–æ–ª–æ–≤\n")
    
    # –®–∞–≥ 2: –ö–æ–¥-—Ä–µ–≤—å—é
    print("–®–∞–≥ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥-—Ä–µ–≤—å—é")
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫–æ–¥ –≤ —Ñ–∞–π–ª –∏ —Å–¥–µ–ª–∞–ª–∏ —Ä–µ–≤—å—é
    review = tools["gemini_query"](
        f"Review this React component for best practices:\n{component_code[:500]}..."
    )
    print(f"‚úÖ –†–µ–≤—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—á–∞–Ω–∏–π: 3\n")
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    print("–®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤")
    tests = tools["gemini_generate_tests"]("components/AgentStatus.tsx")  # —É—Å–ª–æ–≤–Ω—ã–π –ø—É—Ç—å
    print(f"‚úÖ –¢–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: 5 test cases\n")
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    print("–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    docs = tools["gemini_generate_docs"]("components/AgentStatus.tsx")
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞\n")
    
    # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UI –ø—Ä–µ–≤—å—é
    print("–®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
    preview = tools["gemini_generate_image"](
        "React component showing real-time status of 5 AI agents with green/yellow/red indicators",
        style="realistic"
    )
    print(f"‚úÖ UI –ø—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ\n")
    
    print("üéâ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω! –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ Gemini Code Review & Media Generation Demo")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_code_review()
    demo_media_generation()
    integration_scenarios()
    practical_example()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥-—Ä–µ–≤—å—é –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("- –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–µ–º–æ-–≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π")
    print("- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤ CI/CD –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞")


if __name__ == "__main__":
    main()