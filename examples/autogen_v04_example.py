"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö API AutoGen v0.4
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import os
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import TextMentionTermination, MaxMessageTermination
from autogen_agentchat.messages import TextMessage
from autogen_agentchat.ui import Console
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_core import CancellationToken


async def basic_agent_example():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print("=== –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏ (–∑–∞–º–µ–Ω–∞ llm_config)
    model_client = OpenAIChatCompletionClient(
        model="gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY", "mock-key"),
        base_url="https://openrouter.ai/api/v1",
        temperature=0.7,
        max_tokens=2000
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º API
    assistant = AssistantAgent(
        name="assistant",
        system_message="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        model_client=model_client,
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ on_messages
    cancellation_token = CancellationToken()
    response = await assistant.on_messages(
        [TextMessage(content="–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö AutoGen v0.4", source="user")],
        cancellation_token
    )
    
    print(f"–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {response.chat_message.content}")
    await model_client.close()


async def team_collaboration_example():
    """–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏
    model_client = OpenAIChatCompletionClient(
        model="gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY", "mock-key"),
        base_url="https://openrouter.ai/api/v1"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    writer = AssistantAgent(
        name="writer",
        description="–ü–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –∏—Å—Ç–æ—Ä–∏–∏",
        system_message="–¢—ã —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        model_client=model_client,
    )
    
    critic = AssistantAgent(
        name="critic",
        description="–ö—Ä–∏—Ç–∏–∫, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –∏—Å—Ç–æ—Ä–∏–∏",
        system_message="–¢—ã –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫—Ä–∏—Ç–∏–∫. –î–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Ö–æ—Ä–æ—à–∞—è, —Å–∫–∞–∂–∏ '–û–î–û–ë–†–ï–ù–û'.",
        model_client=model_client,
    )
    
    # –£—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    termination = TextMentionTermination("–û–î–û–ë–†–ï–ù–û") | MaxMessageTermination(6)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å –Ω–æ–≤—ã–º API
    team = RoundRobinGroupChat(
        [writer, critic],
        termination_condition=termination,
        max_turns=6
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    task = "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –æ —Ä–æ–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—É—á–∏–ª—Å—è –º–µ—á—Ç–∞—Ç—å"
    result = await team.run(task=task)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(result.messages)}")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {result.messages[-1].content}")
    
    await model_client.close()


async def tool_use_example():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ v0.4"""
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    def get_weather(city: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"""
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: 20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ"
    
    def calculate(expression: str) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            import ast
            result = ast.literal_eval(expression)
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        except Exception:
            return "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏
    model_client = OpenAIChatCompletionClient(
        model="gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY", "mock-key"),
        base_url="https://openrouter.ai/api/v1"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω UserProxy!)
    assistant = AssistantAgent(
        name="assistant",
        system_message="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —É–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
        model_client=model_client,
        tools=[get_weather, calculate],  # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        reflect_on_tool_use=True  # –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    messages = [
        TextMessage(content="–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?", source="user"),
        TextMessage(content="–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 123 * 456?", source="user")
    ]
    
    for msg in messages:
        response = await assistant.on_messages([msg], CancellationToken())
        print(f"\n–í–æ–ø—Ä–æ—Å: {msg.content}")
        print(f"–û—Ç–≤–µ—Ç: {response.chat_message.content}")
    
    await model_client.close()


async def streaming_example():
    """–ü—Ä–∏–º–µ—Ä –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\n=== –ü—Ä–∏–º–µ—Ä 4: –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")
    
    model_client = OpenAIChatCompletionClient(
        model="gpt-4o-mini",
        api_key=os.getenv("OPENROUTER_API_KEY", "mock-key"),
        base_url="https://openrouter.ai/api/v1"
    )
    
    assistant = AssistantAgent(
        name="assistant",
        system_message="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.",
        model_client=model_client,
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    team = RoundRobinGroupChat([assistant], max_turns=1)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_stream –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    stream = team.run_stream(task="–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    
    # Console –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Ç–æ–∫
    await Console(stream)
    
    await model_client.close()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AutoGen v0.4\n")
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        await basic_agent_example()
        
        # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        await team_collaboration_example()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        await tool_use_example()
        
        # –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        await streaming_example()
        
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main())