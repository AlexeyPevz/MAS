"""
Yandex SpeechKit Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex SpeechKit –¥–ª—è STT –∏ TTS
"""

import os
import asyncio
import aiohttp
import base64
import logging
from typing import Optional, Union
from pathlib import Path


logger = logging.getLogger(__name__)


class YandexSpeechKit:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex SpeechKit"""
    
    def __init__(self):
        self.api_key = os.getenv('YANDEX_API_KEY')
        self.folder_id = os.getenv('YANDEX_FOLDER_ID')
        
        # URLs –¥–ª—è API
        self.stt_url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
        self.tts_url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
        
        if not self.api_key or not self.folder_id:
            logger.info("‚ÑπÔ∏è Yandex SpeechKit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–±–∞–≤—å—Ç–µ YANDEX_API_KEY –∏ YANDEX_FOLDER_ID –≤ .env")
    
    async def speech_to_text(
        self, 
        audio_data: bytes, 
        language: str = "ru-RU",
        format: str = "oggopus"
    ) -> Optional[str]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
        
        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–π—Ç–∞—Ö
            language: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (ru-RU, en-US, etc.)
            format: –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ (oggopus, lpcm, mp3)
        
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.api_key:
            logger.error("‚ùå Yandex API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        try:
            headers = {
                'Authorization': f'Api-Key {self.api_key}',
            }
            
            data = {
                'config': {
                    'specification': {
                        'languageCode': language,
                        'model': 'general',
                        'profanityFilter': False,
                        'literature_text': False,
                        'audioFormat': format,
                        'sampleRateHertz': 48000,
                    }
                },
                'audio': {
                    'content': base64.b64encode(audio_data).decode('utf-8')
                }
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.stt_url,
                    headers=headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        if 'result' in result and 'chunks' in result['result']:
                            chunks = result['result']['chunks']
                            if chunks and 'alternatives' in chunks[0]:
                                alternatives = chunks[0]['alternatives']
                                if alternatives and 'text' in alternatives[0]:
                                    text = alternatives[0]['text']
                                    logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                                    return text
                        
                        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                        return None
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå SpeechKit STT error {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
    
    async def text_to_speech(
        self, 
        text: str, 
        voice: str = "alena",
        language: str = "ru-RU",
        format: str = "oggopus"
    ) -> Optional[bytes]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            voice: –ì–æ–ª–æ—Å (alena, jane, oksana, omazh, zahar, ermil)
            language: –Ø–∑—ã–∫ (ru-RU, en-US, etc.)
            format: –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ (oggopus, lpcm, mp3)
        
        Returns:
            –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–π—Ç–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.api_key:
            logger.error("‚ùå Yandex API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        try:
            headers = {
                'Authorization': f'Api-Key {self.api_key}',
            }
            
            data = {
                'text': text,
                'lang': language,
                'voice': voice,
                'format': format,
                'sampleRateHertz': 48000,
                'folderId': self.folder_id
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.tts_url,
                    headers=headers,
                    data=data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        audio_data = await response.read()
                        logger.info(f"üîä –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω –≥–æ–ª–æ—Å –¥–ª—è: {text[:50]}...")
                        return audio_data
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå SpeechKit TTS error {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return None
    
    async def save_audio_file(self, audio_data: bytes, filename: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(filename).parent.mkdir(parents=True, exist_ok=True)
            
            with open(filename, 'wb') as f:
                f.write(audio_data)
            
            logger.info(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SpeechKit"""
        return bool(self.api_key and self.folder_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
speechkit = YandexSpeechKit()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞
async def process_voice_message(audio_data: bytes) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
    if not speechkit.is_configured():
        return "üîß SpeechKit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        text = await speechkit.speech_to_text(audio_data, format="ogg")
        
        if text:
            return text
        else:
            return "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


async def synthesize_response(text: str) -> Optional[bytes]:
    """–°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    if not speechkit.is_configured():
        return None
    
    try:
        audio_data = await speechkit.text_to_speech(text)
        return audio_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_speechkit():
    """–¢–µ—Å—Ç SpeechKit"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex SpeechKit...")
    
    if not speechkit.is_configured():
        print("‚ùå SpeechKit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export YANDEX_API_KEY='your-api-key'")
        print("export YANDEX_FOLDER_ID='your-folder-id'")
        return
    
    # –¢–µ—Å—Ç TTS
    print("üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...")
    audio_data = await speechkit.text_to_speech("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞.")
    
    if audio_data:
        print(f"‚úÖ TTS —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {len(audio_data)} –±–∞–π—Ç")
        await speechkit.save_audio_file(audio_data, "test_output.ogg")
    else:
        print("‚ùå TTS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    asyncio.run(test_speechkit())