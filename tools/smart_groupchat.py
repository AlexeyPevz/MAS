"""
Smart GroupChat Manager
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π LLM –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π
"""
import os
import json
import asyncio
import logging
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass
from datetime import datetime, timezone
from pathlib import Path

# AutoGen v0.4+ is used via autogen-agentchat in agent implementations.
# No direct imports from legacy autogen here.

# Import quality metrics
from .quality_metrics import quality_metrics, TaskResult


@dataclass
class Message:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    sender: str
    recipient: Optional[str]
    content: str
    timestamp: datetime
    message_type: str = "text"  # text, task, result, error
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


class SmartGroupChatManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""
    
    def __init__(self, agents: Dict[str, Any] = None, routing: Dict[str, List[str]] = None):
        self.agents = agents or {}
        self.routing = routing or {}
        self.conversation_history: List[Message] = []
        self.active_tasks: Dict[str, Dict] = {}
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        self.max_conversation_length = 50
        self.max_retries = 3
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        if self._initialized:
            return
        
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartGroupChatManager...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
        if not self.agents:
            from config.config_loader import load_config
            from agents.core_agents import AGENT_CLASSES
            
            config = load_config()
            agents_config = config.get('agents', {})
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tier'–æ–≤
            tiers_config = config.get('llm_tiers', {})
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
            for agent_name, agent_info in agents_config.items():
                if agent_name in AGENT_CLASSES:
                    agent_class = AGENT_CLASSES[agent_name]
                    tier = agent_info.get('default_tier', 'cheap')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ tier'–∞
                    tier_info = tiers_config.get('tiers', {}).get(tier, [])
                    if tier_info and isinstance(tier_info, list) and len(tier_info) > 0:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ tier'–∞
                        model_info = tier_info[0]
                        provider = model_info.get('provider', 'openrouter')
                        model_name = model_info.get('name', 'gpt-3.5-turbo')
                        model = f"{provider}/{model_name}" if provider != 'openai' else model_name
                    else:
                        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                        model = 'openrouter/gpt-3.5-turbo'
                    
                    self.agents[agent_name] = agent_class(model=model, tier=tier)
                    self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {agent_name} (–º–æ–¥–µ–ª—å: {model}, tier: {tier})")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞
        if not self.routing:
            self.routing = {
                "communicator": ["meta"],
                "meta": ["coordination", "researcher", "model_selector"],
                "coordination": ["agent_builder", "instance_factory"],
                "researcher": ["fact_checker", "multi_tool"],
                "model_selector": ["prompt_builder"],
                "workflow_builder": ["instance_factory"],
                "webapp_builder": ["instance_factory"],
            }
        
        self._initialized = True
        self.logger.info("‚úÖ SmartGroupChatManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def process_user_message(self, content: str, user_id: str = "user") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {content[:100]}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = Message(
            sender=user_id,
            recipient="communicator",
            content=content,
            timestamp=datetime.now(timezone.utc),
            message_type="text"
        )
        
        self.conversation_history.append(user_message)
        self._trim_history()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å Communicator –∞–≥–µ–Ω—Ç–∞
        try:
            response = await self._route_message_to_agent("communicator", user_message)
            return response
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    
    async def _route_message_to_agent(self, agent_name: str, message: Message):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫"""
        if agent_name not in self.agents:
            self.logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        agent = self.agents[agent_name]
        start_time = asyncio.get_event_loop().time()
        task_id = f"{agent_name}_{int(start_time)}"
        
        try:
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É {agent_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            context = self._build_context_for_agent(agent_name, message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ (async‚Äë–ø—É—Ç—å –¥–ª—è v0.4+)
            if hasattr(agent, 'generate_reply_async') and asyncio.iscoroutinefunction(getattr(agent, 'generate_reply_async')):
                try:
                    response_obj = await agent.generate_reply_async(
                        messages=context,
                        sender=None
                    )
                    response = response_obj.chat_message.content if hasattr(response_obj, 'chat_message') else str(response_obj)
                    
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None
                    if not response:
                        response = f"[{agent_name}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if hasattr(agent, 'remember'):
                        agent.remember(f"last_interaction_{message.sender}", message.content)
                        agent.remember(f"last_response_{agent_name}", response)
                except Exception as e:
                    self.logger.error(f"‚ùå LLM –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ {agent_name} failed: {e}")
                    if "on_messages" in str(e) or "autogen" in str(e).lower():
                        self.logger.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å AutoGen v0.4 API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    response = self._generate_fallback_response(agent_name, message.content)
            elif hasattr(agent, 'generate_reply') and callable(getattr(agent, 'generate_reply')):
                # –õ–µ–≥–∞—Å–∏‚Äë–ø—É—Ç—å: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                loop = asyncio.get_running_loop()
                response = await loop.run_in_executor(
                    None,
                    lambda: agent.generate_reply(messages=context, sender=None)
                )
                if not response:
                    response = f"[{agent_name}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
            else:
                # Fallback –¥–ª—è mock –∞–≥–µ–Ω—Ç–æ–≤
                response = self._generate_fallback_response(agent_name, message.content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            response_msg = Message(
                sender=agent_name,
                recipient=message.sender,
                content=response,
                timestamp=datetime.now(timezone.utc),
                message_type="text"
            )
            
            self.conversation_history.append(response_msg)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            self._trim_history()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            next_agents = self.routing.get(agent_name, [])
            
            # Calculate metrics
            end_time = asyncio.get_event_loop().time()
            response_time = end_time - start_time
            
            # Extract confidence if available
            confidence = 0.75  # Default
            if isinstance(response, dict) and 'confidence' in response:
                confidence = response['confidence']
                actual_response = response['response']
            else:
                actual_response = response
            
            # Check if we should get optimized model suggestion
            if hasattr(agent, 'task_type'):
                optimization = quality_metrics.suggest_model_optimization(
                    agent_name, 
                    agent.task_type
                )
                if optimization.get('suggestion') != "Use default tier":
                    self.logger.info(f"üí° Model optimization suggestion for {agent_name}: {optimization['suggestion']}")
            
            # Record success
            quality_metrics.record_task_result(TaskResult(
                task_id=task_id,
                agent_name=agent_name,
                task_type=message.message_type,
                status="success",
                confidence=confidence,
                response_time=response_time,
                model_used=agent.model if hasattr(agent, "model") else "unknown",
                tier_used=agent.tier if hasattr(agent, "tier") else "standard",
                token_cost=response_time * 0.0001  # Placeholder calculation
            ))
            
            self.logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # Continue routing if needed
            if self._should_continue_routing(agent_name, actual_response):
                await self._process_routing_chain(next_agents, response_msg)
            
            return actual_response
            
        except Exception as e:
            # Record failure
            end_time = asyncio.get_event_loop().time()
            
            quality_metrics.record_task_result(TaskResult(
                task_id=task_id,
                agent_name=agent_name,
                task_type=message.message_type,
                status="failure",
                confidence=0.0,
                response_time=end_time - start_time,
                model_used=agent.model if hasattr(agent, "model") else "unknown",
                tier_used=agent.tier if hasattr(agent, "tier") else "standard",
                token_cost=0.0,
                error=type(e).__name__
            ))
            
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≥–µ–Ω—Ç–æ–º {agent_name}: {e}")
            raise
    
    def _build_context_for_agent(self, agent_name: str, message: Message) -> List[Dict]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = self.conversation_history[-10:]
        
        context = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        agent = self.agents[agent_name]
        if hasattr(agent, 'system_message') and agent.system_message:
            context.append({
                "role": "system",
                "content": agent.system_message
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        for msg in recent_messages:
            role = "user" if msg.sender == "user" else "assistant"
            context.append({
                "role": role,
                "content": f"[{msg.sender}]: {msg.content}"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.append({
            "role": "user",
            "content": f"[{message.sender}]: {message.content}"
        })
        
        return context
    
    async def _process_routing_chain(self, next_agents: List[str], message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        for next_agent in next_agents:
            if next_agent in self.agents:
                try:
                    await self._route_message_to_agent(next_agent, message)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ {next_agent}: {e}")
    
    def _should_continue_routing(self, agent_name: str, response: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ - –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        recent_messages = self.conversation_history[-20:]  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        agent_count = sum(1 for msg in recent_messages if msg.sender == agent_name)
        
        if agent_count >= 3:
            self.logger.warning(f"üîÑ –ê–≥–µ–Ω—Ç {agent_name} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è {agent_count} —Ä–∞–∑, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Ü–µ–ø–æ—á–∫–∏ - –Ω–µ –±–æ–ª–µ–µ 10 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ–¥—Ä—è–¥
        if len(recent_messages) >= 10:
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        stop_phrases = [
            "–∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "–≥–æ—Ç–æ–≤–æ", 
            "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            "–æ—à–∏–±–∫–∞",
            "–Ω–µ –º–æ–≥—É",
            "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        ]
        
        response_lower = response.lower()
        for phrase in stop_phrases:
            if phrase in response_lower:
                return False
        
        return True
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        return {
            "total_messages": len(self.conversation_history),
            "active_agents": list(set(msg.sender for msg in self.conversation_history)),
            "last_activity": self.conversation_history[-1].timestamp if self.conversation_history else None,
            "active_tasks": len(self.active_tasks)
        }
    
    def get_agent_statistics(self) -> Dict[str, int]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        stats = {}
        for msg in self.conversation_history:
            if msg.sender not in stats:
                stats[msg.sender] = 0
            stats[msg.sender] += 1
        return stats
    
    async def create_task(self, task_description: str, assigned_agent: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        task_id = f"task_{len(self.active_tasks) + 1}"
        
        task = {
            "id": task_id,
            "description": task_description,
            "assigned_agent": assigned_agent,
            "status": "pending",
            "created_at": datetime.now(timezone.utc),
            "result": None
        }
        
        self.active_tasks[task_id] = task
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
        task_message = Message(
            sender="system",
            recipient=assigned_agent,
            content=f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_description}",
            timestamp=datetime.now(timezone.utc),
            message_type="task",
            metadata={"task_id": task_id}
        )
        
        await self._route_message_to_agent(assigned_agent, task_message)
        
        return task_id
    
    def _generate_fallback_response(self, agent_name: str, message_content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        responses = {
            "meta": f"üéØ [Meta] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É: '{message_content[:50]}...' - —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "coordination": f"üìã [Coordination] –ü—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏",
            "researcher": f"üîç [Researcher] –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{message_content[:30]}...'",
            "fact_checker": f"‚úÖ [Fact-Checker] –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "prompt_builder": f"üìù [Prompt-Builder] –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤", 
            "communicator": f"üí¨ [Communicator] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        }
        
        default_response = f"ü§ñ [{agent_name}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_content[:50]}..."
        return responses.get(agent_name, default_response)

    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "agents_count": len(self.agents),
            "routing_rules": len(self.routing),
            "conversation_length": len(self.conversation_history),
            "active_tasks": len(self.active_tasks),
            "system_health": "healthy",
            "uptime": datetime.now(timezone.utc).isoformat()
        }

    def _trim_history(self) -> None:
        """–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–æ 2√ómax_conversation_length."""
        limit = max(0, self.max_conversation_length * 2)
        if limit and len(self.conversation_history) > limit:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit —Å–æ–æ–±—â–µ–Ω–∏–π
            self.conversation_history = self.conversation_history[-limit:]

    def receive(self, event: dict, sender: str | None = None) -> None:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ callback_matrix.

        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è: {"event": "EVENT_NAME", "args": [..], "kwargs": {...}}
        """
        try:
            name = event.get("event") if isinstance(event, dict) else None
            if not name:
                self.logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s", event)
                return
            args = event.get("args", [])
            kwargs = event.get("kwargs", {})
            from tools.callback_matrix import handle_event
            handle_event(name, *args, **kwargs)
        except Exception as exc:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è %s –æ—Ç %s: %s", event, sender, exc)


class ConversationLogger:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, log_file: str = "conversations.log"):
        self.log_file = log_file
        self.logger = logging.getLogger("conversation")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        handler = logging.FileHandler(log_file, encoding='utf-8')
        formatter = logging.Formatter('%(asctime)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
    
    def log_message(self, message: Message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        log_entry = {
            "timestamp": message.timestamp.isoformat(),
            "sender": message.sender,
            "recipient": message.recipient,
            "content": message.content,
            "type": message.message_type,
            "metadata": message.metadata
        }
        
        self.logger.info(json.dumps(log_entry, ensure_ascii=False))


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
async def create_smart_groupchat(agents: Dict[str, Any], routing: Dict[str, List[str]]) -> SmartGroupChatManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    return SmartGroupChatManager(agents, routing)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart GroupChat Manager")
    
    # –°–æ–∑–¥–∞–µ–º mock –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockAgent:
        def __init__(self, name):
            self.name = name
            self.system_message = f"–í—ã - {name} –∞–≥–µ–Ω—Ç."
        
        async def generate_reply_async(self, messages=None, sender=None, config=None):
            await asyncio.sleep(0)
            return f"[{self.name}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages) if messages else 0} —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        # –õ–µ–≥–∞—Å–∏-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        def generate_reply(self, messages=None, sender=None):
            return f"[{self.name}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages) if messages else 0} —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    test_agents = {
        "communicator": MockAgent("Communicator"),
        "meta": MockAgent("Meta"),
        "coordination": MockAgent("Coordination")
    }
    
    test_routing = {
        "communicator": ["meta"],
        "meta": ["coordination"]
    }
    
    async def test_conversation():
        manager = SmartGroupChatManager(test_agents, test_routing)
        
        response = await manager.process_user_message("–ü—Ä–∏–≤–µ—Ç, —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞")
        print(f"–û—Ç–≤–µ—Ç: {response}")
        
        status = manager.get_system_status()
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_conversation())