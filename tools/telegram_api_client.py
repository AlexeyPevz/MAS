"""
Telegram Bot API Client
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram –±–æ—Ç–∞ –∫ Root-MAS API
"""

import aiohttp
import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime


logger = logging.getLogger(__name__)


class TelegramAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Root-MAS API –∏–∑ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url.rstrip("/")
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self.start()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.stop()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.session:
            self.session = aiohttp.ClientSession()
            logger.info(f"üîó Telegram API –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.api_base_url}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.session:
            await self.session.close()
            self.session = None
            logger.info("üîó Telegram API –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def send_message(self, message: str, user_id: str = "telegram_user") -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MAS —á–µ—Ä–µ–∑ API"""
        if not self.session:
            await self.start()
        
        try:
            payload = {
                "message": message,
                "user_id": user_id,
                "metadata": {
                    "source": "telegram",
                    "timestamp": datetime.now().isoformat()
                }
            }
            
            async with self.session.post(
                f"{self.api_base_url}/api/v1/chat/message",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    return data.get("response", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status}"
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
            return "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return "üîå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def get_chat_history(self, limit: int = 10) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        if not self.session:
            await self.start()
        
        try:
            async with self.session.get(
                f"{self.api_base_url}/api/v1/chat/history",
                params={"limit": limit},
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status}")
                    return {"messages": [], "total": 0}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return {"messages": [], "total": 0}
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.session:
            await self.start()
        
        try:
            async with self.session.get(
                f"{self.api_base_url}/api/v1/metrics/dashboard",
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                
                if response.status == 200:
                    return await response.json()
                else:
                    return {"status": "error", "message": f"HTTP {response.status}"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def get_agents_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self.session:
            await self.start()
        
        try:
            async with self.session.get(
                f"{self.api_base_url}/api/v1/agents/status",
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                
                if response.status == 200:
                    return await response.json()
                else:
                    return {"agents": [], "total": 0}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return {"agents": [], "total": 0}
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        if not self.session:
            await self.start()
        
        try:
            async with self.session.get(
                f"{self.api_base_url}/health",
                timeout=aiohttp.ClientTimeout(total=3)
            ) as response:
                return response.status == 200
                
        except Exception:
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è callback –¥–ª—è Telegram –±–æ—Ç–∞
def create_api_callback(api_base_url: str = "http://localhost:8000"):
    """–°–æ–∑–¥–∞–µ—Ç callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    api_client = TelegramAPIClient(api_base_url)
    
    async def telegram_callback(message: str, user_id: str = "telegram_user") -> str:
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
            if not await api_client.health_check():
                return "üîß –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API
            response = await api_client.send_message(message, user_id)
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ telegram callback: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    return telegram_callback, api_client


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_api_client():
    """–¢–µ—Å—Ç API –∫–ª–∏–µ–Ω—Ç–∞"""
    async with TelegramAPIClient() as client:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health = await client.health_check()
        print(f"Health check: {health}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response = await client.send_message("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!")
        print(f"Response: {response}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = await client.get_system_status()
        print(f"System status: {status}")


if __name__ == "__main__":
    asyncio.run(test_api_client())