"""
Modern Telegram Bot Integration
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å MAS —Å–∏—Å—Ç–µ–º–æ–π
"""
import asyncio
import os
import logging
from typing import Callable, Optional, Any, Dict
from datetime import datetime
from zoneinfo import ZoneInfo

# Telegram imports —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from telegram import Update, Bot
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è telegram
    class Update:
        pass
    class ContextTypes:
        DEFAULT_TYPE = Any


class ModernTelegramBot:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MAS"""
    
    def __init__(
        self, 
        token: str, 
        mas_callback: Callable[[str], str],
        enable_voice: bool = False
    ):
        if not TELEGRAM_AVAILABLE:
            raise RuntimeError(
                "‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot>=20.0"
            )
        
        self.token = token
        self.mas_callback = mas_callback
        self.enable_voice = enable_voice
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            from config.config_loader import load_config
            config = load_config()
            proactive_config = config.get('proactive_mode', {})
            personalization = proactive_config.get('personalization', {})
            tz_str = personalization.get('timezone', 'UTC')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UTC+3 –≤ Europe/Moscow –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ
            if tz_str == 'UTC+3':
                self.timezone = ZoneInfo('Europe/Moscow')
            elif tz_str.startswith('UTC'):
                # –î–ª—è –¥—Ä—É–≥–∏—Ö UTC —Å–º–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.timezone = ZoneInfo('UTC')
            else:
                self.timezone = ZoneInfo(tz_str)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC")
            self.timezone = ZoneInfo('UTC')
        
        # –°–æ–∑–¥–∞–µ–º Application
        self.application = Application.builder().token(token).build()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "messages_received": 0,
            "messages_sent": 0,
            "errors": 0,
            "start_time": datetime.now(self.timezone)
        }
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text)
        )
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
        if self.enable_voice:
            self.application.add_handler(
                MessageHandler(filters.VOICE, self.handle_voice)
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAS System!

–Ø ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —á–µ—Ä–µ–∑ 12 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤!
        """
        
        await update.message.reply_text(welcome_message.strip())
        self.stats["messages_sent"] += 1
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ MAS System Bot

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á

ü§ñ –ê–≥–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ Meta ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ Researcher ‚Äî –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ Fact-Checker ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ Coordination ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ò –µ—â–µ 8 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤!

üí¨ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
‚Ä¢ "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –ò–ò"
‚Ä¢ "–ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"

üìä –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start ‚Äî –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        """
        
        await update.message.reply_text(help_message.strip())
        self.stats["messages_sent"] += 1
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        uptime = datetime.now(self.timezone) - self.stats["start_time"]
        
        status_message = f"""
üìä –°—Ç–∞—Ç—É—Å MAS System

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}
üì® –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {self.stats['messages_received']}
üì§ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['messages_sent']}
‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}

ü§ñ –°–∏—Å—Ç–µ–º–∞: –ê–∫—Ç–∏–≤–Ω–∞
üîó –ê–≥–µ–Ω—Ç—ã: 12 –∞–∫—Ç–∏–≤–Ω—ã—Ö
üß† LLM: OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        """
        
        await update.message.reply_text(status_message.strip())
        self.stats["messages_sent"] += 1
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
        
        user_text = update.message.text
        user_id = update.effective_user.id
        
        self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:100]}...")
        self.stats["messages_received"] += 1
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, 
                action="typing"
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ MAS
            response = await self._process_with_mas(user_text, str(user_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if response:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(response) > 4096:
                    chunks = [response[i:i+4096] for i in range(0, len(response), 4096)]
                    for chunk in chunks:
                        await update.message.reply_text(chunk)
                        self.stats["messages_sent"] += 1
                else:
                    await update.message.reply_text(response)
                    self.stats["messages_sent"] += 1
            else:
                await update.message.reply_text("ü§î –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã")
                self.stats["messages_sent"] += 1
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats["errors"] += 1
            
            await update.message.reply_text(
                f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{str(e)[:200]}..."
            )
            self.stats["messages_sent"] += 1
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n"
            "–ü–æ–∫–∞ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º! üòä"
        )
        self.stats["messages_sent"] += 1
    
    async def _process_with_mas(self, message: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MAS —Å–∏—Å—Ç–µ–º—É"""
        try:
            # –ï—Å–ª–∏ callback –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            if asyncio.iscoroutinefunction(self.mas_callback):
                response = await self.mas_callback(message)
            else:
                # –ï—Å–ª–∏ callback —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ executor —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º event loop
                loop = asyncio.get_running_loop()
                response = await loop.run_in_executor(
                    None, self.mas_callback, message
                )
            
            return response
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ MAS callback: {e}")
            return f"üõ†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"‚ùå Telegram bot error: {context.error}")
        self.stats["errors"] += 1
    
    async def send_message(self, chat_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è callbacks)"""
        try:
            await self.application.bot.send_message(chat_id=chat_id, text=text)
            self.stats["messages_sent"] += 1
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats["errors"] += 1
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.application.updater.start_polling()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # Graceful shutdown
            await self.shutdown()
    
    async def shutdown(self):
        """Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...")
            
            if hasattr(self.application, 'updater') and self.application.updater.running:
                await self.application.updater.stop()
            
            if hasattr(self.application, 'stop'):
                await self.application.stop()
                
            if hasattr(self.application, 'shutdown'):
                await self.application.shutdown()
                
            self.logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        return {
            **self.stats,
            "uptime": str(datetime.now(self.timezone) - self.stats["start_time"])
        }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
async def start_telegram_integration(token: str, mas_callback: Callable[[str], str]) -> ModernTelegramBot:
    """–ó–∞–ø—É—Å–∫ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    if not TELEGRAM_AVAILABLE:
        raise RuntimeError("‚ùå python-telegram-bot –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    bot = ModernTelegramBot(token, mas_callback, enable_voice=False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(bot.run())
    
    return bot


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    async def test_callback(message: str) -> str:
        return f"[TEST] –ü–æ–ª—É—á–µ–Ω–æ: {message}"
    
    async def main():
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        bot = ModernTelegramBot(token, test_callback)
        await bot.run()
    
    asyncio.run(main())