#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã MAS
"""

import argparse
import os
from pathlib import Path


def get_project_root() -> Path:
    """–ù–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞"""
    current = Path(__file__).resolve()
    while current.parent != current:
        if (current / ".env.example").exists():
            return current
        current = current.parent
    return Path.cwd()


def update_env_file(goal: str, env_file: Path = None) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å MAS_GOAL –≤ .env —Ñ–∞–π–ª–µ"""
    if env_file is None:
        env_file = get_project_root() / ".env"
    
    if not env_file.exists():
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
    content = env_file.read_text()
    lines = content.split('\n')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º MAS_GOAL
    mas_goal_updated = False
    for i, line in enumerate(lines):
        if line.startswith('MAS_GOAL='):
            lines[i] = f'MAS_GOAL={goal}'
            mas_goal_updated = True
            break
    
    if not mas_goal_updated:
        lines.append(f'MAS_GOAL={goal}')
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    env_file.write_text('\n'.join(lines))
    print(f"‚úÖ MAS_GOAL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ {env_file}")


def main():
    parser = argparse.ArgumentParser(description="–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã MAS")
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    parser.add_argument('--proactive', action='store_true', 
                       help='–†–µ–∂–∏–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞')
    parser.add_argument('--test', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (echo)')
    parser.add_argument('--coding', action='store_true', 
                       help='–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é')
    parser.add_argument('--productivity', action='store_true', 
                       help='–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–ª—å
    parser.add_argument('--custom', type=str, 
                       help='–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–ª—å –¥–ª—è MAS')
    
    # –§–∞–π–ª .env
    parser.add_argument('--env-file', type=Path, 
                       help='–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)')
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
    parser.add_argument('--show', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å')
    
    args = parser.parse_args()
    
    env_file = args.env_file or get_project_root() / ".env"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
    if args.show:
        if env_file.exists():
            content = env_file.read_text()
            for line in content.split('\n'):
                if line.startswith('MAS_GOAL='):
                    current_goal = line.split('=', 1)[1]
                    print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {current_goal}")
                    return
            print("MAS_GOAL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        else:
            print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å
    goal = None
    
    if args.proactive:
        goal = "act as a proactive AI assistant helping with any questions and tasks"
        print("ü§ñ –†–µ–∂–∏–º: –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    elif args.test:
        goal = "echo"
        print("üîß –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π")
    elif args.coding:
        goal = "be my coding assistant and help with development tasks"
        print("üíª –†–µ–∂–∏–º: –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
    elif args.productivity:
        goal = "act as my personal productivity assistant"
        print("üìä –†–µ–∂–∏–º: –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    elif args.custom:
        goal = args.custom
        print(f"üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–µ–∂–∏–º: {goal}")
    else:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
        print("  --proactive     –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        print("  --test          –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        print("  --coding        –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
        print("  --productivity  –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("  --custom '—Ü–µ–ª—å' –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ü–µ–ª—å")
        print("  --show          –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å")
        return
    
    # –û–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª
    update_env_file(goal, env_file)
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    if os.path.exists("deploy/deploy.sh"):
        print("  sudo ./deploy/deploy.sh restart")
    else:
        print("  docker-compose restart")
    print("  –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")


if __name__ == "__main__":
    main()