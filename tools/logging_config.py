"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞ –ª–æ–≥–∞–º–∏
"""

import os
import logging
import logging.handlers
from pathlib import Path
from typing import Optional


def setup_logging(
    log_level: str = "INFO",
    log_dir: str = "logs",
    max_file_size: int = 50 * 1024 * 1024,  # 50MB
    backup_count: int = 5,  # –î–µ—Ä–∂–∏–º 5 —Ñ–∞–π–ª–æ–≤ = –º–∞–∫—Å–∏–º—É–º 250MB
    enable_console: bool = True,
    enable_file: bool = True
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        max_file_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –≤ –±–∞–π—Ç–∞—Ö (50MB)
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (5 —Ñ–∞–π–ª–æ–≤)
        enable_console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        enable_file: –í–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    """
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_path = Path(log_dir)
    log_path.mkdir(parents=True, exist_ok=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ handlers
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    if enable_console:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(getattr(logging, log_level.upper()))
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π handler —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    if enable_file:
        file_handler = logging.handlers.RotatingFileHandler(
            filename=log_path / "system.log",
            maxBytes=max_file_size,
            backupCount=backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(getattr(logging, log_level.upper()))
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('openai').setLevel(logging.WARNING)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logging.getLogger('autogen').setLevel(logging.WARNING)  # AutoGen –æ—á–µ–Ω—å –±–æ–ª—Ç–ª–∏–≤—ã–π
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    
    logger.info(f"üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —É—Ä–æ–≤–µ–Ω—å {log_level}, —Ñ–∞–π–ª—ã –¥–æ {max_file_size//1024//1024}MB, {backup_count} –±—ç–∫–∞–ø–æ–≤")
    return logger


def setup_production_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã - –º–∏–Ω–∏–º—É–º –ª–æ–≥–æ–≤"""
    return setup_logging(
        log_level="WARNING",  # –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        max_file_size=10 * 1024 * 1024,  # 10MB –Ω–∞ —Ñ–∞–π–ª
        backup_count=3,  # –ú–∞–∫—Å–∏–º—É–º 30MB –ª–æ–≥–æ–≤
        enable_console=False  # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    )


def setup_development_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π"""
    return setup_logging(
        log_level="INFO",
        max_file_size=50 * 1024 * 1024,  # 50MB –Ω–∞ —Ñ–∞–π–ª
        backup_count=5,  # –ú–∞–∫—Å–∏–º—É–º 250MB –ª–æ–≥–æ–≤
        enable_console=True
    )


def cleanup_old_logs(log_dir: str = "logs", days_to_keep: int = 7):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    import time
    from datetime import datetime, timedelta
    
    log_path = Path(log_dir)
    if not log_path.exists():
        return
    
    cutoff_time = time.time() - (days_to_keep * 24 * 60 * 60)
    removed_count = 0
    removed_size = 0
    
    for log_file in log_path.glob("*.log*"):
        try:
            if log_file.stat().st_mtime < cutoff_time:
                file_size = log_file.stat().st_size
                log_file.unlink()
                removed_count += 1
                removed_size += file_size
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {log_file}: {e}")
    
    if removed_count > 0:
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {removed_size//1024//1024}MB")


def get_log_size(log_dir: str = "logs") -> tuple[int, int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤ (—Ñ–∞–π–ª–æ–≤, MB)"""
    log_path = Path(log_dir)
    if not log_path.exists():
        return 0, 0
    
    total_size = 0
    file_count = 0
    
    for log_file in log_path.glob("*.log*"):
        try:
            total_size += log_file.stat().st_size
            file_count += 1
        except:
            pass
    
    return file_count, total_size // 1024 // 1024


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def auto_setup_logging():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è
    log_level = os.getenv("LOG_LEVEL", "INFO")
    environment = os.getenv("ENVIRONMENT", "development")
    
    if environment == "production":
        setup_production_logging()
    else:
        setup_development_logging()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
def log_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤"""
    count, size_mb = get_log_size()
    
    if size_mb > 100:  # –ë–æ–ª—å—à–µ 100MB
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–≥–∏ –∑–∞–Ω–∏–º–∞—é—Ç {size_mb}MB ({count} —Ñ–∞–π–ª–æ–≤)")
        print("üßπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞: python -c 'from tools.logging_config import cleanup_old_logs; cleanup_old_logs()'")
    elif size_mb > 50:
        print(f"üìä –õ–æ–≥–∏: {size_mb}MB ({count} —Ñ–∞–π–ª–æ–≤)")
    
    return count, size_mb


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    logger = setup_development_logging()
    logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ INFO")
    logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ WARNING")
    logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ ERROR")
    
    print("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–æ–≤:")
    count, size_mb = log_monitor()
    
    print(f"üìÅ –§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {count}")
    print(f"üíæ –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {size_mb}MB")
    
    if size_mb > 10:
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤...")
        cleanup_old_logs(days_to_keep=3)
        count, size_mb = get_log_size()
        print(f"‚úÖ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {count} —Ñ–∞–π–ª–æ–≤, {size_mb}MB")