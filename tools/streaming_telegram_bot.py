"""
Streaming Telegram Bot
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ModernTelegramBot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
import logging
from typing import AsyncIterator, Optional, Callable, Any
from datetime import datetime
import time

from tools.modern_telegram_bot import ModernTelegramBot, TELEGRAM_AVAILABLE

if TELEGRAM_AVAILABLE:
    from telegram import Update
    from telegram.ext import ContextTypes
    from telegram.error import BadRequest, NetworkError


class StreamingTelegramBot(ModernTelegramBot):
    """Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(
        self,
        token: str,
        mas_callback: Callable[[str], str],
        enable_voice: bool = False,
        streaming_callback: Optional[Callable[[str, str], AsyncIterator[str]]] = None,
        streaming_delay: float = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    ):
        super().__init__(token, mas_callback, enable_voice)
        self.streaming_callback = streaming_callback
        self.streaming_delay = streaming_delay
        self.active_streams = {}  # chat_id -> message_id –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
        
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming"""
        if not update.message or not update.message.text:
            return
        
        user_text = update.message.text
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:100]}...")
        self.stats["messages_received"] += 1
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å streaming callback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.streaming_callback and asyncio.iscoroutinefunction(self.streaming_callback):
                await self._handle_streaming_response(
                    update, context, user_text, str(user_id)
                )
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await super().handle_text(update, context)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await update.message.reply_text(
                "üõ†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            self.stats["errors"] += 1
    
    async def _handle_streaming_response(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        user_text: str,
        user_id: str
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞"""
        chat_id = update.effective_chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await update.message.reply_text("üí≠ –î—É–º–∞—é...")
        message_id = sent_message.message_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        self.active_streams[chat_id] = message_id
        
        try:
            # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            buffer = ""
            last_update_time = time.time()
            update_counter = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
            async for chunk in self.streaming_callback(user_text, user_id):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ—Ä–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if chat_id not in self.active_streams or self.active_streams[chat_id] != message_id:
                    self.logger.info("Streaming –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                
                buffer += chunk
                current_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                if (current_time - last_update_time >= self.streaming_delay and 
                    len(buffer) > 10):  # –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –ø–µ—á–∞—Ç–∏
                        display_text = buffer + "‚ñå"
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        if len(display_text) > 4000:
                            display_text = display_text[:4000] + "...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]‚ñå"
                        
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=display_text
                        )
                        
                        last_update_time = current_time
                        update_counter += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        if update_counter % 5 == 0:
                            await context.bot.send_chat_action(
                                chat_id=chat_id,
                                action="typing"
                            )
                            
                    except BadRequest as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        if "message is not modified" not in str(e):
                            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    except NetworkError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                        pass
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞
            if buffer:
                try:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(buffer) > 4096:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=buffer[:4096]
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                        for i in range(4096, len(buffer), 4096):
                            chunk = buffer[i:i+4096]
                            await update.message.reply_text(chunk)
                            self.stats["messages_sent"] += 1
                    else:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=buffer
                        )
                    
                    self.stats["messages_sent"] += 1
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ streaming: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="üõ†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                )
            except:
                pass
                
            self.stats["errors"] += 1
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
            if chat_id in self.active_streams and self.active_streams[chat_id] == message_id:
                del self.active_streams[chat_id]
    
    async def handle_stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ streaming"""
        chat_id = update.effective_chat.id
        
        if chat_id in self.active_streams:
            del self.active_streams[chat_id]
            await update.message.reply_text("‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        super().setup_handlers()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        from telegram.ext import CommandHandler
        self.application.add_handler(
            CommandHandler("stop", self.handle_stop_command)
        )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è streaming callback –∏–∑ SmartGroupChatManager
def create_streaming_callback(groupchat_manager) -> Callable[[str, str], AsyncIterator[str]]:
    """–°–æ–∑–¥–∞–µ—Ç streaming callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å SmartGroupChatManager"""
    
    async def streaming_callback(message: str, user_id: str) -> AsyncIterator[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ï—Å–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ stream_response
            if hasattr(groupchat_manager, 'stream_response'):
                async for chunk in groupchat_manager.stream_response(message, user_id):
                    yield chunk
            else:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏
                response = await groupchat_manager.process_message(message, user_id)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º streaming, —Ä–∞–∑–±–∏–≤–∞—è –ø–æ —Å–ª–æ–≤–∞–º
                words = response.split()
                chunk = ""
                
                for i, word in enumerate(words):
                    chunk += word + " "
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–ª–æ–≤ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
                    if (i + 1) % 5 == 0 or i == len(words) - 1:
                        yield chunk
                        chunk = ""
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
                        
        except Exception as e:
            yield f"\n\n‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import os
    
    # –ü—Ä–∏–º–µ—Ä streaming callback
    async def example_streaming(message: str, user_id: str) -> AsyncIterator[str]:
        """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ streaming –æ—Ç–≤–µ—Ç–æ–≤"""
        response = f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message}'\n\n"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        parts = [
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å... ",
            "–ü–æ–¥–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... ",
            "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç... ",
            "\n\n–í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç:\n",
            "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. ",
            "–ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, ",
            "—Å–æ–∑–¥–∞–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç '–ø–µ—á–∞—Ç–∏' –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. ",
            "\n\n–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ! üòä"
        ]
        
        for part in parts:
            yield part
            await asyncio.sleep(0.5)
    
    async def main():
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming
        bot = StreamingTelegramBot(
            token=token,
            mas_callback=lambda msg: f"–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞: {msg}",
            streaming_callback=example_streaming,
            streaming_delay=0.3  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.3 —Å–µ–∫—É–Ω–¥—ã
        )
        
        await bot.run()
    
    asyncio.run(main())