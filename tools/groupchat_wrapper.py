"""
GroupChat Wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AutoGen
"""
from typing import Dict, List, Any
from pathlib import Path

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ autogen
try:
    from autogen.agentchat import ConversableAgent, GroupChat, GroupChatManager
except ImportError:
    try:
        # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è autogen
        from autogen_agentchat import ConversableAgent, GroupChat, GroupChatManager
    except ImportError:
        # Fallback - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        class ConversableAgent:
            def __init__(self, name, llm_config, system_message=""):
                self.name = name
                self.llm_config = llm_config
                self.system_message = system_message
            
            def generate_reply(self, messages=None, sender=None, config=None):
                return f"[{self.name}] Mock response"
        
        class GroupChat:
            def __init__(self, *args, **kwargs):
                pass
                
        class GroupChatManager:
            def __init__(self, *args, **kwargs):
                pass


class AgentWrapper(ConversableAgent):
    """Wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GroupChat"""
    
    def __init__(self, mas_agent, llm_config: Dict[str, Any]):
        super().__init__(
            name=mas_agent.name,
            llm_config=llm_config,
            system_message=getattr(mas_agent, 'system_message', f"–í—ã - {mas_agent.name} –∞–≥–µ–Ω—Ç.")
        )
        self._mas_agent = mas_agent
    
    def generate_reply(self, messages=None, sender=None, config=None):
        """–î–µ–ª–µ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É"""
        if hasattr(self._mas_agent, 'generate_reply'):
            return self._mas_agent.generate_reply(messages, sender, config)
        else:
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
            return super().generate_reply(messages, sender, config)


class SimpleGroupChatManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π GroupChat Manager –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, agents: Dict[str, Any], routing: Dict[str, List[str]]):
        self.agents = agents
        self.routing = routing
        self.messages = []
        
        # –°–æ–∑–¥–∞–µ–º LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.llm_config = {
            "config_list": [{
                "model": "gpt-4o-mini", 
                "api_key": "dummy",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ manual
                "base_url": "https://openrouter.ai/api/v1"
            }]
        }
        
        # –°–æ–∑–¥–∞–µ–º wrappers –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.wrapped_agents = {}
        for name, agent in agents.items():
            self.wrapped_agents[name] = AgentWrapper(agent, self.llm_config)
    
    def send_user_message(self, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å communicator –∞–≥–µ–Ω—Ç–∞
        if 'communicator' in self.agents:
            response = self._route_message('communicator', text)
            return response
        else:
            return "‚ùå Communicator –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def _route_message(self, from_agent: str, message: str, depth: int = 0) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        if depth > 5:  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é
            return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"
        
        print(f"  üì° {from_agent} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        next_agents = self.routing.get(from_agent, [])
        
        if not next_agents:
            return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {from_agent}"
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
        for next_agent in next_agents:
            if next_agent in self.agents:
                print(f"    ‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ {from_agent} ‚Üí {next_agent}")
                return self._route_message(next_agent, message, depth + 1)
        
        return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ –∞–≥–µ–Ω—Ç–µ {from_agent}"
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "agents_count": len(self.agents),
            "messages_count": len(self.messages),
            "routing_rules": len(self.routing),
            "agents": list(self.agents.keys())
        }