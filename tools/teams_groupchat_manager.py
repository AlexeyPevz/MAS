"""
Teams-Enhanced GroupChat Manager
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ SmartGroupChatManager —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Teams API –∏–∑ AutoGen v0.4
"""
import asyncio
import logging
import os
from typing import Dict, List, Optional, Any, Callable, Union
from dataclasses import dataclass
from datetime import datetime, timezone
import json

from tools.smart_groupchat import SmartGroupChatManager, Message

# AutoGen v0.4 Teams API
try:
    from autogen_agentchat.teams import (
        Team,
        RoundRobinGroupChat,
        SelectorGroupChat,
        Swarm
    )
    from autogen_agentchat.conditions import (
        TextMentionTermination,
        MaxMessageTermination,
        HandoffTermination
    )
    from autogen_agentchat.agents import AssistantAgent
    from autogen_ext.models.openai import OpenAIChatCompletionClient
    TEAMS_API_AVAILABLE = True
except ImportError:
    TEAMS_API_AVAILABLE = False
    Team = None

logger = logging.getLogger(__name__)


@dataclass
class TeamTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
    id: str
    type: str  # research, development, analysis, creative
    query: str
    priority: int = 1
    context: Dict[str, Any] = None
    constraints: List[str] = None
    expected_output: str = None


class TeamsGroupChatManager(SmartGroupChatManager):
    """GroupChat Manager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Teams API"""
    
    def __init__(self, agents: Dict[str, Any] = None, routing: Dict[str, List[str]] = None):
        super().__init__(agents, routing)
        self.teams: Dict[str, Team] = {}
        self.model_client = None
        self._setup_teams()
        
    def _setup_teams(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
        if not TEAMS_API_AVAILABLE:
            logger.warning("Teams API not available, using basic mode")
            return
            
        # –°–æ–∑–¥–∞–µ–º model client
        self.model_client = OpenAIChatCompletionClient(
            model="gpt-4o-mini",
            api_key=os.getenv("OPENROUTER_API_KEY", ""),
            base_url="https://openrouter.ai/api/v1"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._create_research_team()
        self._create_development_team()
        self._create_analysis_team()
        self._create_creative_team()
        
    def _create_research_team(self):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.agents:
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
        research_agents = []
        
        if "researcher" in self.agents:
            research_agents.append(self.agents["researcher"])
        if "fact_checker" in self.agents:
            research_agents.append(self.agents["fact_checker"])
        if "multitool" in self.agents:
            research_agents.append(self.agents["multitool"])
            
        if len(research_agents) >= 2:
            # –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π
            termination = TextMentionTermination("–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û") | MaxMessageTermination(10)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
            self.teams["research"] = SelectorGroupChat(
                participants=research_agents,
                model_client=self.model_client,
                termination_condition=termination,
                selector_prompt="""–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
                - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: researcher
                - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç—ã: fact_checker
                - –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: multitool
                –£—á–∏—Ç—ã–≤–∞–π, –∫—Ç–æ —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ."""
            )
            
    def _create_development_team(self):
        """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.agents:
            return
            
        dev_agents = []
        
        if "agent_builder" in self.agents:
            dev_agents.append(self.agents["agent_builder"])
        if "workflow_builder" in self.agents:
            dev_agents.append(self.agents["workflow_builder"])
        if "webapp_builder" in self.agents:
            dev_agents.append(self.agents["webapp_builder"])
            
        if len(dev_agents) >= 2:
            # Round-robin –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            self.teams["development"] = RoundRobinGroupChat(
                participants=dev_agents,
                termination_condition=MaxMessageTermination(8)
            )
            
    def _create_analysis_team(self):
        """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        if not self.agents:
            return
            
        analysis_agents = []
        
        if "meta" in self.agents:
            analysis_agents.append(self.agents["meta"])
        if "model_selector" in self.agents:
            analysis_agents.append(self.agents["model_selector"])
        if "prompt_builder" in self.agents:
            analysis_agents.append(self.agents["prompt_builder"])
            
        if len(analysis_agents) >= 2:
            self.teams["analysis"] = RoundRobinGroupChat(
                participants=analysis_agents,
                termination_condition=MaxMessageTermination(6)
            )
            
    def _create_creative_team(self):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        if not self.agents:
            return
            
        creative_agents = []
        
        if "webapp_builder" in self.agents:
            creative_agents.append(self.agents["webapp_builder"])
        if "prompt_builder" in self.agents:
            creative_agents.append(self.agents["prompt_builder"])
        if "communicator" in self.agents:
            creative_agents.append(self.agents["communicator"])
            
        if len(creative_agents) >= 2:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Swarm –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                self.teams["creative"] = Swarm(
                    participants=creative_agents,
                    termination_condition=MaxMessageTermination(10)
                )
            except:
                # Fallback –Ω–∞ RoundRobin
                self.teams["creative"] = RoundRobinGroupChat(
                    participants=creative_agents,
                    termination_condition=MaxMessageTermination(10)
                )
    
    async def process_with_team(self, task: TeamTask) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã"""
        if not TEAMS_API_AVAILABLE or task.type not in self.teams:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            return await self.process_message(task.query, task.id)
            
        team = self.teams[task.type]
        
        logger.info(f"üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Ç–∏–ø–∞ '{task.type}' –∫–æ–º–∞–Ω–¥–æ–π")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            context_prompt = self._build_team_context(task)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            result = await team.run(task=context_prompt)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            team_response = {
                "task_id": task.id,
                "task_type": task.type,
                "team_used": task.type,
                "messages_count": len(result.messages),
                "result": result.messages[-1].content if result.messages else "No result",
                "participants": [msg.source for msg in result.messages],
                "success": True
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._save_team_result(task, team_response)
            
            return team_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return {
                "task_id": task.id,
                "task_type": task.type,
                "error": str(e),
                "success": False
            }
    
    def _build_team_context(self, task: TeamTask) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
        context_parts = [f"–ó–∞–¥–∞—á–∞: {task.query}"]
        
        if task.context:
            context_parts.append(f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(task.context, ensure_ascii=False)}")
            
        if task.constraints:
            context_parts.append(f"\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(task.constraints)}")
            
        if task.expected_output:
            context_parts.append(f"\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {task.expected_output}")
            
        return "\n".join(context_parts)
    
    def _save_team_result(self, task: TeamTask, result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        message = Message(
            sender=f"team_{task.type}",
            recipient="system",
            content=result["result"],
            timestamp=datetime.now(timezone.utc),
            message_type="team_result",
            metadata={
                "task_id": task.id,
                "task_type": task.type,
                "participants": result.get("participants", []),
                "messages_count": result.get("messages_count", 0)
            }
        )
        
        self.conversation_history.append(message)
        
    async def analyze_task_and_route(self, query: str, user_id: str) -> TeamTask:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        
        task_type = "general"
        priority = 1
        
        query_lower = query.lower()
        
        if any(word in query_lower for word in ["–∏—Å—Å–ª–µ–¥—É–π", "–Ω–∞–π–¥–∏", "—É–∑–Ω–∞–π", "–ø—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç"]):
            task_type = "research"
            priority = 2
        elif any(word in query_lower for word in ["—Å–æ–∑–¥–∞–π", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–ø–æ—Å—Ç—Ä–æ–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π"]):
            task_type = "development"
            priority = 2
        elif any(word in query_lower for word in ["–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "–æ—Ü–µ–Ω–∏", "—Å—Ä–∞–≤–Ω–∏"]):
            task_type = "analysis"
            priority = 2
        elif any(word in query_lower for word in ["–ø—Ä–∏–¥—É–º–∞–π", "–Ω–∞–ø–∏—à–∏", "—Å–æ—á–∏–Ω–∏"]):
            task_type = "creative"
            priority = 1
            
        return TeamTask(
            id=f"{user_id}_{datetime.now().timestamp()}",
            type=task_type,
            query=query,
            priority=priority
        )
    
    async def process_message(self, message: str, sender_id: str = "user") -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Teams"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        task = await self.analyze_task_and_route(message, sender_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if TEAMS_API_AVAILABLE and task.type in self.teams:
            logger.info(f"üéØ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É '{task.type}'")
            
            result = await self.process_with_team(task)
            
            if result.get("success"):
                return result["result"]
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É—é –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await super().process_message(message, sender_id)
    
    def get_teams_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥"""
        status = {
            "teams_available": TEAMS_API_AVAILABLE,
            "active_teams": list(self.teams.keys()),
            "teams_details": {}
        }
        
        for team_name, team in self.teams.items():
            status["teams_details"][team_name] = {
                "type": type(team).__name__,
                "participants": [p.name for p in team.participants] if hasattr(team, 'participants') else [],
                "ready": True
            }
            
        return status
    
    async def create_dynamic_team(
        self,
        agents: List[Any],
        task: str,
        team_type: str = "selector"
    ) -> Optional[Team]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        if not TEAMS_API_AVAILABLE or len(agents) < 2:
            return None
            
        try:
            if team_type == "selector":
                team = SelectorGroupChat(
                    participants=agents,
                    model_client=self.model_client,
                    termination_condition=MaxMessageTermination(10),
                    selector_prompt=f"–í—ã–±–µ—Ä–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}"
                )
            elif team_type == "roundrobin":
                team = RoundRobinGroupChat(
                    participants=agents,
                    termination_condition=MaxMessageTermination(len(agents) * 2)
                )
            elif team_type == "swarm":
                team = Swarm(
                    participants=agents,
                    termination_condition=MaxMessageTermination(15)
                )
            else:
                return None
                
            return team
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Teams-enhanced GroupChat Manager"""
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä (–∞–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    manager = TeamsGroupChatManager()
    await manager.initialize()
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    tasks = [
        "–ò—Å—Å–ª–µ–¥—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ AI –∞–≥–µ–Ω—Ç–æ–≤",
        "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π",
        "–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ —Ä–æ–±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞"
    ]
    
    for task_query in tasks:
        print(f"\nüìã –ó–∞–¥–∞—á–∞: {task_query}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        response = await manager.process_message(task_query, "example_user")
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç: {response[:200]}...")
        
    # –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥
    status = manager.get_teams_status()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥: {json.dumps(status, indent=2, ensure_ascii=False)}")


if __name__ == "__main__":
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        asyncio.run(example_usage())