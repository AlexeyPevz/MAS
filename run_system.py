#!/usr/bin/env python3
"""
Root-MAS System Launcher
–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã: API + MAS + Telegram Bot
"""

import os
import asyncio
import logging
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config.settings import validate_required_settings, ENVIRONMENT, API_HOST, API_PORT


def cleanup_old_processes():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    import subprocess
    try:
        import psutil
    except ImportError:
        psutil = None
    
    logger = logging.getLogger(__name__)
    
    if psutil:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π PID
            current_pid = os.getpid()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å—ã
            for proc in psutil.process_iter(['pid', 'ppid', 'name', 'status']):
                try:
                    if proc.info['status'] == psutil.STATUS_ZOMBIE:
                        logger.info(f"üßü –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å PID: {proc.info['pid']}")
                        # –ó–æ–º–±–∏ –Ω–µ–ª—å–∑—è —É–±–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ wait
                        try:
                            os.waitpid(proc.info['pid'], os.WNOHANG)
                        except:
                            pass
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å run_system.py
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['pid'] != current_pid and proc.info['name'] and 'python' in proc.info['name'].lower():
                        cmdline = proc.info.get('cmdline', [])
                        if cmdline and any('run_system.py' in arg for arg in cmdline):
                            logger.info(f"üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å PID: {proc.info['pid']}")
                            proc.terminate()
                            try:
                                proc.wait(timeout=3)
                            except psutil.TimeoutExpired:
                                proc.kill()
                                proc.wait(timeout=1)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    else:
        # Fallback –µ—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        logger.warning("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º pkill")
        subprocess.run(['pkill', '-f', 'python.*run_system.py', '-F', str(os.getpid())], 
                      capture_output=True, text=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGCHLD –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–æ–º–±–∏
    def handle_sigchld(signum, frame):
        try:
            while True:
                # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                pid, status = os.waitpid(-1, os.WNOHANG)
                if pid == 0:
                    break
        except OSError:
            pass
    
    signal.signal(signal.SIGCHLD, handle_sigchld)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    cleanup_old_processes()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    from tools.logging_config import setup_production_logging, setup_development_logging, log_monitor
    
    environment = os.getenv("ENVIRONMENT", "production")
    if environment == "production":
        setup_production_logging()
    else:
        setup_development_logging()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
    log_monitor()
    
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Root-MAS System...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("logs", exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        errors = validate_required_settings()
        if errors:
            for error in errors:
                logger.error(f"‚ùå {error}")
            sys.exit(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        mode = os.getenv("RUN_MODE", "full")  # full, api, mas
        
        tasks = []
        
        if mode in ["full", "api"]:
            # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
            logger.info("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
            api_task = asyncio.create_task(run_api_server())
            tasks.append(("API Server", api_task))
        
        if mode in ["full", "mas"]:
            # –ó–∞–ø—É—Å–∫ MAS —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
            logger.info("ü§ñ MAS —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ API...")
        
        if mode == "full" and os.getenv("TELEGRAM_BOT_TOKEN"):
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (—á–µ—Ä–µ–∑ API)
            logger.info("üì± –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            bot_task = asyncio.create_task(run_telegram_bot_wrapper())
            tasks.append(("Telegram Bot", bot_task))
        
        if not tasks:
            logger.error("‚ùå –ù–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            sys.exit(1)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        stop_event = asyncio.Event()
        
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
            stop_event.set()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        logger.info("üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        api_port = int(os.getenv("API_PORT", "8000"))
        logger.info(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:{api_port}")
        logger.info(f"üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{api_port}/docs")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await stop_event.wait()
        
        # Graceful shutdown
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        for name, task in tasks:
            logger.info(f"  üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {name}...")
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


async def run_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    import uvicorn
    from api.main import app
    
    config = uvicorn.Config(
        app,
        host=API_HOST,
        port=API_PORT,
        log_level=os.getenv("LOG_LEVEL", "info").lower(),
        access_log=True
    )
    
    server = uvicorn.Server(config)
    await server.serve()


async def run_telegram_bot_wrapper():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    logger = logging.getLogger(__name__)
    try:
        await run_telegram_bot()
    except Exception as e:
        logger.error(f"‚ùå Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã


async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming"""
    from tools.telegram_api_client import create_api_callback
    
    logger = logging.getLogger(__name__)
    
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ streaming
    enable_streaming = os.getenv("TELEGRAM_STREAMING", "true").lower() == "true"
    
    try:
        # –°–æ–∑–¥–∞–µ–º callback —á–µ—Ä–µ–∑ API
        api_port = int(os.getenv("API_PORT", "8000"))
        api_callback, api_client = create_api_callback(f"http://localhost:{api_port}")
        
        if enable_streaming:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞
            from tools.streaming_telegram_bot import StreamingTelegramBot, create_streaming_callback
            logger.info("üåä –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º streaming –¥–ª—è Telegram –±–æ—Ç–∞")
            
            # –°–æ–∑–¥–∞–µ–º streaming callback
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è streaming –∏–∑ SmartGroupChatManager
            async def streaming_callback(message: str, user_id: str):
                """–í—Ä–µ–º–µ–Ω–Ω—ã–π streaming callback —á–µ—Ä–µ–∑ API"""
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏
                response = await api_callback(message)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º streaming
                words = response.split()
                chunk = ""
                for i, word in enumerate(words):
                    chunk += word + " "
                    if (i + 1) % 3 == 0 or i == len(words) - 1:
                        yield chunk
                        chunk = ""
                        await asyncio.sleep(0.05)
            
            bot = StreamingTelegramBot(
                token=token,
                mas_callback=api_callback,
                streaming_callback=streaming_callback,
                streaming_delay=0.3,
                enable_voice=False
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
            from tools.modern_telegram_bot import ModernTelegramBot
            logger.info("üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º Telegram –±–æ—Ç–∞")
            
            bot = ModernTelegramBot(
                token=token,
                mas_callback=api_callback,
                enable_voice=False
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.run()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞
        logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ Telegram –±–æ—Ç–∞")
    finally:
        if 'api_client' in locals():
            await api_client.stop()


def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                          Root-MAS                            ‚ïë
    ‚ïë                   Multi-Agent System                         ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  ü§ñ –ê–≥–µ–Ω—Ç—ã      üì± Telegram     üåê API      üìä –ú–µ—Ç—Ä–∏–∫–∏      ‚ïë
    ‚ïë  üí¨ –ß–∞—Ç         üîç –ü–æ–∏—Å–∫        üìã –ó–∞–¥–∞—á–∏   üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


if __name__ == "__main__":
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 9):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    if sys.version_info >= (3, 13):
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Python 3.13+ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏!")
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.10 - 3.11")
        print("‚ö†Ô∏è  –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   - python-telegram-bot –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å 3.13")
        print("   - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã autogen –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print()
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫? (y/N): ")
        if response.lower() != 'y':
            print("üëã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.11")
            sys.exit(0)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)