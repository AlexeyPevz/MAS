#!/usr/bin/env python3
"""
Root-MAS System Launcher (Fixed version)
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
"""

import os
import asyncio
import logging
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/system.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
_running = False
_shutdown_event = None


async def minimal_test_server():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("üåê Starting minimal test server on port 8000...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FastAPI
        from fastapi import FastAPI
        from fastapi.responses import JSONResponse
        import uvicorn
        
        app = FastAPI(title="Root-MAS Test")
        
        @app.get("/")
        async def root():
            return JSONResponse({
                "status": "ok",
                "message": "Root-MAS Test Server is running"
            })
        
        @app.get("/health")
        async def health():
            return JSONResponse({"status": "healthy"})
        
        config = uvicorn.Config(
            app,
            host="0.0.0.0",
            port=8000,
            log_level="info"
        )
        
        server = uvicorn.Server(config)
        await server.serve()
        
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è FastAPI/Uvicorn not available: {e}")
        logger.info("üí§ Running in sleep mode (dependencies missing)")
        
        # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while not _shutdown_event.is_set():
            await asyncio.sleep(1)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global _running, _shutdown_event
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
    if _running:
        logger.warning("‚ö†Ô∏è System is already running!")
        return
    
    _running = True
    _shutdown_event = asyncio.Event()
    
    logger.info("üöÄ Starting Root-MAS System (Fixed Version)...")
    logger.info(f"üìÇ Working directory: {os.getcwd()}")
    logger.info(f"üêç Python version: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    environment = os.getenv("ENVIRONMENT", "development")
    logger.info(f"üåç Environment: {environment}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"üõë Received signal {signum}, shutting down...")
        _shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = []
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        server_task = asyncio.create_task(minimal_test_server())
        tasks.append(("Test Server", server_task))
        
        logger.info("‚úÖ System started successfully!")
        logger.info("üìù Press Ctrl+C to stop")
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await _shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Graceful shutdown
        logger.info("üîÑ Shutting down components...")
        
        for name, task in tasks:
            if not task.done():
                logger.info(f"  üõë Stopping {name}...")
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        _running = False
        logger.info("‚úÖ System stopped successfully")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing = []
    
    required_modules = [
        ("dotenv", "python-dotenv"),
        ("psutil", "psutil"),
    ]
    
    for module, package in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing.append(package)
    
    if missing:
        logger.warning(f"‚ö†Ô∏è Missing dependencies: {', '.join(missing)}")
        logger.info("Install with: pip3 install " + " ".join(missing))
        return False
    
    return True


def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–∞–Ω–Ω–µ—Ä"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        Root-MAS (Fixed Version)        ‚ïë
‚ïë         Multi-Agent System             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


if __name__ == "__main__":
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 9):
        print("‚ùå Python 3.9+ required")
        sys.exit(1)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è Python 3.13+
    if sys.version_info >= (3, 13):
        print("‚ö†Ô∏è  WARNING: Python 3.13+ detected")
        print("   Some dependencies may not be compatible")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("‚ö†Ô∏è  Running with limited functionality")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Stopped by user")
    except Exception as e:
        print(f"\n‚ùå Critical error: {e}")
        sys.exit(1)