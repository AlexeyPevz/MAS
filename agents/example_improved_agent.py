"""
Example of improved agent implementation
"""
from typing import List, Dict, Any, Optional
import json
from dataclasses import dataclass
from datetime import datetime
from agents.base import BaseAgent


@dataclass
class Task:
    id: str
    title: str
    description: str
    priority: int  # 1-5
    status: str  # pending, in_progress, completed, blocked
    assigned_to: Optional[str] = None
    dependencies: List[str] = None
    created_at: datetime = None
    updated_at: datetime = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.updated_at is None:
            self.updated_at = datetime.now()
        if self.dependencies is None:
            self.dependencies = []


class ImprovedCoordinationAgent(BaseAgent):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self, tier="cheap", model=None):
        super().__init__("coordination", model, tier)
        self.tasks: Dict[str, Task] = {}
        self.agent_workload: Dict[str, int] = {}
        
    def generate_reply(self, messages, sender=None, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            
        last_message = messages[-1]["content"] if isinstance(messages[-1], dict) else str(messages[-1])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = self._analyze_intent(last_message)
        
        if intent == "create_task":
            return self._handle_create_task(last_message)
        elif intent == "status_update":
            return self._handle_status_update()
        elif intent == "assign_task":
            return self._handle_task_assignment(last_message)
        elif intent == "get_bottlenecks":
            return self._analyze_bottlenecks()
        else:
            return self._handle_general_coordination(last_message)
    
    def _analyze_intent(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π", "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "create task", "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É"]):
            return "create_task"
        elif any(word in message_lower for word in ["—Å—Ç–∞—Ç—É—Å", "status", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "progress"]):
            return "status_update"
        elif any(word in message_lower for word in ["–Ω–∞–∑–Ω–∞—á—å", "assign", "–ø–µ—Ä–µ–¥–∞–π"]):
            return "assign_task"
        elif any(word in message_lower for word in ["bottleneck", "–ø—Ä–æ–±–ª–µ–º–∞", "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–∑–∞—Å—Ç—Ä—è–ª"]):
            return "get_bottlenecks"
        else:
            return "general"
    
    def _handle_create_task(self, message: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        task_info = self._extract_task_info(message)
        
        task = Task(
            id=f"TASK-{len(self.tasks) + 1:04d}",
            title=task_info.get("title", "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
            description=task_info.get("description", message),
            priority=task_info.get("priority", 3),
            status="pending"
        )
        
        self.tasks[task.id] = task
        
        return f"""‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:
**ID**: {task.id}
**–ù–∞–∑–≤–∞–Ω–∏–µ**: {task.title}
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {'üî¥' * task.priority}{'‚ö™' * (5 - task.priority)}
**–°—Ç–∞—Ç—É—Å**: {task.status}

–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID {task.id} –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def _handle_status_update(self) -> str:
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.tasks:
            return "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ"
        
        stats = {
            "pending": 0,
            "in_progress": 0,
            "completed": 0,
            "blocked": 0
        }
        
        for task in self.tasks.values():
            stats[task.status] += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
        report = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏**\n\n"
        report += f"**–í—Å–µ–≥–æ –∑–∞–¥–∞—á**: {len(self.tasks)}\n\n"
        report += "**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º**:\n"
        report += f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['pending']}\n"
        report += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
        report += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {stats['completed']}\n"
        report += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {stats['blocked']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
        priority_tasks = sorted(
            [t for t in self.tasks.values() if t.status in ['pending', 'in_progress']], 
            key=lambda x: x.priority, 
            reverse=True
        )[:3]
        
        if priority_tasks:
            report += "**üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏**:\n"
            for task in priority_tasks:
                report += f"- [{task.id}] {task.title} ({'üî¥' * task.priority})\n"
        
        return report
    
    def _handle_task_assignment(self, message: str) -> str:
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è task_id –∏ agent_name
        parts = message.lower().split()
        task_id = None
        agent_name = None
        
        for i, part in enumerate(parts):
            if part.startswith("task-") and i + 2 < len(parts):
                task_id = part.upper()
                # –ò—â–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ task_id
                for j in range(i + 1, len(parts)):
                    if parts[j] in ["meta", "researcher", "builder", "checker"]:
                        agent_name = parts[j]
                        break
        
        if not task_id or task_id not in self.tasks:
            return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏."
        
        if not agent_name:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_name = self._find_least_busy_agent()
        
        task = self.tasks[task_id]
        task.assigned_to = agent_name
        task.status = "in_progress"
        task.updated_at = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≥–µ–Ω—Ç–∞
        if agent_name not in self.agent_workload:
            self.agent_workload[agent_name] = 0
        self.agent_workload[agent_name] += 1
        
        return f"""‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:
**–ó–∞–¥–∞—á–∞**: {task.id} - {task.title}
**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å**: {agent_name}
**–°—Ç–∞—Ç—É—Å**: –ü–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É

–ê–≥–µ–Ω—Ç {agent_name} —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é."""
    
    def _analyze_bottlenecks(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ —Å–∏—Å—Ç–µ–º–µ"""
        bottlenecks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        blocked_tasks = [t for t in self.tasks.values() if t.status == "blocked"]
        if blocked_tasks:
            bottlenecks.append(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(blocked_tasks)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        overloaded_agents = [(agent, load) for agent, load in self.agent_workload.items() if load > 3]
        if overloaded_agents:
            for agent, load in overloaded_agents:
                bottlenecks.append(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω: {load} –∑–∞–¥–∞—á")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        old_tasks = []
        for task in self.tasks.values():
            if task.status == "in_progress":
                age = (datetime.now() - task.created_at).days
                if age > 3:
                    old_tasks.append(task)
        
        if old_tasks:
            bottlenecks.append(f"‚è∞ –ó–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π: {len(old_tasks)}")
        
        if not bottlenecks:
            return "‚úÖ –£–∑–∫–∏—Ö –º–µ—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ."
        
        report = "‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∑–∫–∏–µ –º–µ—Å—Ç–∞**:\n\n"
        for bottleneck in bottlenecks:
            report += f"{bottleneck}\n"
        
        report += "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**:\n"
        report += "- –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏—Ö\n"
        report += "- –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏\n"
        report += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"
        
        return report
    
    def _extract_task_info(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã NLP
        info = {
            "title": "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": message,
            "priority": 3
        }
        
        # –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if "—Å—Ä–æ—á–Ω–æ" in message.lower() or "urgent" in message.lower():
            info["priority"] = 5
        elif "–≤–∞–∂–Ω–æ" in message.lower() or "important" in message.lower():
            info["priority"] = 4
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        if ":" in message:
            parts = message.split(":", 1)
            potential_title = parts[0].strip()
            if len(potential_title) < 100:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                info["title"] = potential_title
                info["description"] = parts[1].strip() if len(parts) > 1 else message
        
        return info
    
    def _find_least_busy_agent(self) -> str:
        """–ü–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        available_agents = ["researcher", "builder", "checker", "analyzer"]
        
        least_busy = None
        min_load = float('inf')
        
        for agent in available_agents:
            load = self.agent_workload.get(agent, 0)
            if load < min_load:
                min_load = load
                least_busy = agent
        
        return least_busy or "researcher"
    
    def _handle_general_coordination(self, message: str) -> str:
        """–û–±—â–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
        return f"""ü§ñ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
- –°–æ–∑–¥–∞–Ω–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –ê–Ω–∞–ª–∏–∑–æ–º —É–∑–∫–∏—Ö –º–µ—Å—Ç
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""